import * as XLSX from "xlsx";
import Papa from "papaparse"; // Import papaparse
import { supabase } from "@/lib/supabaseClient";
import {
  processDEV,
  processInterBR,
  processInterBRAccount,
  processHandelsbanken,
  processAmex,
  processSEB,
} from "@/lib/utils/bankProcessors";

export async function uploadExcel(file: File, bank: string) {
  try {
    const arrayBuffer = await file.arrayBuffer();
    let data: string[][]; // Explicitly type data as string[][]

    if (file.name.endsWith(".csv")) {
      const text = new TextDecoder("utf-8").decode(arrayBuffer);

      // Use PapaParse to parse the CSV data
      const parsed = Papa.parse<string[]>(text, {
        header: false, // Disable header row parsing
        skipEmptyLines: true, // Skip empty lines
        delimiter: bank === "Inter-BR-Account" ? ";" : ",", // Use semicolon for Inter BR Account files
      });
      data = parsed.data as string[][]; // Cast parsed data to string[][]
    } else {
      const workbook = XLSX.read(arrayBuffer, { type: "array" });
      const sheetName = workbook.SheetNames[0];
      data = XLSX.utils.sheet_to_json<string[]>(workbook.Sheets[sheetName], {
        header: 1,
      }) as string[][]; // Cast to string[][]
    }
    console.log("Parsed data:", data);
    let processedData;
    switch (bank) {
      case "DEV":
        processedData = processDEV(data);
        console.log("Processed Data:", processedData);
        break;
      case "Inter-BR":
        processedData = processInterBR(data, file.name);
        break;
      case "Inter-BR-Account":
        processedData = processInterBRAccount(data, file.name);
        break;
      case "Handelsbanken-SE":
        processedData = processHandelsbanken(data);
        break;
      case "AmericanExpress-SE":
        processedData = processAmex(data, file.name);
        break;
      case "SEB_SJ_Prio-SE":
        processedData = processSEB(data, file.name);
        break;
      default:
        throw new Error("Unknown bank type.");
    } // Upload to Supabase
    const result = await uploadToSupabase(
      processedData.tableName,
      processedData.transactions,
    );
    return result;
  } catch (error) {
    if (
      error instanceof Error &&
      error.message.startsWith("TABLE_NOT_EXISTS:")
    ) {
      // Re-throw table not exists error to be handled by the UI
      throw error;
    }
    return `Error: ${error instanceof Error ? error.message : "Unknown error"}`;
  }
}

export async function createTableInSupabase(tableName: string) {
  // Since we can't execute DDL directly through the client, we'll return instructions
  const instructions = `
Please create the table manually in your Supabase SQL editor with the following commands:

1. Create the table:
CREATE TABLE public."${tableName}" (
  id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  "Date" date NULL,
  "Description" text NULL,
  "Amount" numeric NULL,
  "Balance" numeric NULL,
  "Category" text NULL DEFAULT 'Unknown'::text,
  "Responsible" text NULL DEFAULT 'Carlos'::text,
  "Comment" text NULL,
  user_id uuid NULL DEFAULT '2b5c5467-04e0-4820-bea9-1645821fa1b7'::uuid,
  "Bank" text NULL DEFAULT 'Inter-BR'::text,
  CONSTRAINT "${tableName}_pkey" PRIMARY KEY (id),
  CONSTRAINT "${tableName}_id_key" UNIQUE (id)
) TABLESPACE pg_default;

2. Enable RLS:
ALTER TABLE public."${tableName}" ENABLE ROW LEVEL SECURITY;

3. Create RLS Policy:
CREATE POLICY "Enable all for users based on user_id"
ON "public"."${tableName}"
AS PERMISSIVE
FOR ALL
TO authenticated
USING (
  (( SELECT auth.uid() AS uid) = user_id)
)
WITH CHECK (
  (SELECT auth.uid()) = user_id
);
    `;

  return instructions;
}

async function uploadToSupabase(
  tableName: string,
  transactions: Record<string, unknown>[],
) {
  try {
    // Get the current highest ID from the table
    const { data: maxIdData, error: maxIdError } = await supabase
      .from(tableName)
      .select("id")
      .order("id", { ascending: false })
      .limit(1);

    if (maxIdError && maxIdError.code === "PGRST116") {
      // PGRST116 = table doesn't exist
      throw new Error(`TABLE_NOT_EXISTS:${tableName}`);
    } else if (maxIdError) {
      throw new Error(maxIdError.message);
    }

    // Calculate the starting ID for new records
    const currentMaxId =
      maxIdData && maxIdData.length > 0 ? maxIdData[0].id : 0;

    // Update transaction IDs to continue from the current max
    const transactionsWithCorrectIds = transactions.map(
      (transaction, index) => ({
        ...transaction,
        id: currentMaxId + index + 1,
      }),
    );

    const { error } = await supabase
      .from(tableName)
      .insert(transactionsWithCorrectIds);
    if (error) throw new Error(error.message);
    return `Upload successful! ${transactionsWithCorrectIds.length} records inserted into ${tableName} starting from ID ${currentMaxId + 1}`;
  } catch (error) {
    if (
      error instanceof Error &&
      error.message.startsWith("TABLE_NOT_EXISTS:")
    ) {
      throw error; // Re-throw table not exists error to be handled by the UI
    }
    return `Error uploading to Supabase: ${error instanceof Error ? error.message : "Unknown error"}`;
  }
}
