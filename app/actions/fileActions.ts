import * as XLSX from "xlsx";
import Papa from "papaparse"; // Import papaparse
import { supabase } from "@/lib/supabaseClient";
import {
  processDEV,
  processInterBRMastercard,
  processInterBRAccount,
  processHandelsbanken,
  processAmex,
  processSEB,
} from "@/lib/utils/bankProcessors";

export async function uploadExcel(
  file: File,
  bank: string,
  clearData: boolean = false,
) {
  try {
    console.log(
      "uploadExcel called with bank:",
      bank,
      "file:",
      file.name,
      "clearData:",
      clearData,
    );
    const arrayBuffer = await file.arrayBuffer();
    let data: string[][]; // Explicitly type data as string[][]

    if (file.name.endsWith(".csv")) {
      const text = new TextDecoder("utf-8").decode(arrayBuffer);

      // Use PapaParse to parse the CSV data
      const parsed = Papa.parse<string[]>(text, {
        header: false, // Disable header row parsing
        skipEmptyLines: true, // Skip empty lines
        delimiter: bank === "Inter-BR-Account" ? ";" : ",", // Use semicolon for Inter BR Account files
      });
      data = parsed.data as string[][]; // Cast parsed data to string[][]
    } else {
      const workbook = XLSX.read(arrayBuffer, { type: "array" });
      const sheetName = workbook.SheetNames[0];
      data = XLSX.utils.sheet_to_json<string[]>(workbook.Sheets[sheetName], {
        header: 1,
      }) as string[][]; // Cast to string[][]
    }
    console.log("Parsed data:", data.slice(0, 5)); // Log first 5 rows
    let processedData;
    console.log("Processing bank:", bank);
    switch (bank) {
      case "DEV":
        processedData = processDEV(data);
        console.log("Processed Data:", processedData);
        break;
      case "Inter-BR-Mastercard":
        processedData = processInterBRMastercard(data, file.name);
        break;
      case "Inter-BR-Account":
        console.log("Processing Inter-BR-Account");
        processedData = processInterBRAccount(data, file.name);
        console.log("Processed data:", processedData);
        break;
      case "Handelsbanken-SE":
        processedData = processHandelsbanken(data);
        break;
      case "AmericanExpress-SE":
        processedData = processAmex(data, file.name);
        break;
      case "SEB_SJ_Prio-SE":
        processedData = processSEB(data, file.name);
        break;
      default:
        return {
          success: false,
          error: "UNSUPPORTED_BANK",
          message: "Unknown bank type.",
        };
    }
    console.log("Final processed data:", processedData);
    // Upload to Supabase
    console.log("Uploading to Supabase table:", processedData.tableName);
    const result = await uploadToSupabase(
      processedData.tableName,
      processedData.transactions,
      clearData,
    );
    console.log("Upload result:", result);
    return result;
  } catch (error) {
    console.error("Error in uploadExcel:", error);
    return {
      success: false,
      error: "PROCESSING_ERROR",
      message:
        error instanceof Error ? error.message : "Unknown error occurred",
    };
  }
}

export async function createTableInSupabase(tableName: string) {
  // Since we can't execute DDL directly through the client, we'll return instructions
  const instructions = `Please create the table manually in your Supabase SQL editor with the following commands:

1. Create the table:
CREATE TABLE public."${tableName}" (
  id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  "Date" date NULL,
  "Description" text NULL,
  "Amount" numeric NULL,
  "Balance" numeric NULL,
  "Category" text NULL DEFAULT 'Unknown'::text,
  "Responsible" text NULL DEFAULT 'Carlos'::text,
  "Comment" text NULL,
  user_id uuid NULL DEFAULT '2b5c5467-04e0-4820-bea9-1645821fa1b7'::uuid,
  "Bank" text NULL DEFAULT 'Inter-BR'::text,
  CONSTRAINT "${tableName}_pkey" PRIMARY KEY (id),
  CONSTRAINT "${tableName}_id_key" UNIQUE (id)
) TABLESPACE pg_default;

2. Enable RLS:
ALTER TABLE public."${tableName}" 
ENABLE ROW LEVEL SECURITY;

3. Create RLS Policy:
CREATE POLICY "Enable all for users based on user_id"
ON "public"."${tableName}"
AS PERMISSIVE
FOR ALL
TO authenticated
USING (
  user_id = '2b5c5467-04e0-4820-bea9-1645821fa1b7'::uuid OR
  auth.uid()::text = '2b5c5467-04e0-4820-bea9-1645821fa1b7' OR
  auth.uid() = user_id
)
WITH CHECK (
  user_id = '2b5c5467-04e0-4820-bea9-1645821fa1b7'::uuid OR
  auth.uid()::text = '2b5c5467-04e0-4820-bea9-1645821fa1b7' OR
  auth.uid() = user_id
);`;

  return instructions;
}

export async function executeTableCreation(tableName: string) {
  try {
    console.log("Attempting to create table:", tableName);

    // Create separate SQL statements for better execution
    const createTableSQL = `CREATE TABLE IF NOT EXISTS public."${tableName}" (
        id bigint GENERATED BY DEFAULT AS IDENTITY NOT NULL,
        created_at timestamp with time zone NOT NULL DEFAULT now(),
        "Date" date NULL,
        "Description" text NULL,
        "Amount" numeric NULL,
        "Balance" numeric NULL,
        "Category" text NULL DEFAULT 'Unknown'::text,
        "Responsible" text NULL DEFAULT 'Carlos'::text,
        "Comment" text NULL,
        user_id uuid NULL DEFAULT '2b5c5467-04e0-4820-bea9-1645821fa1b7'::uuid,
        "Bank" text NULL DEFAULT 'Inter-BR'::text,
        CONSTRAINT "${tableName}_pkey" PRIMARY KEY (id),
        CONSTRAINT "${tableName}_id_key" UNIQUE (id)
      )`;

    const enableRLSSQL = `ALTER TABLE public."${tableName}" ENABLE ROW LEVEL SECURITY`;

    const createPolicySQL = `CREATE POLICY "Enable all for users based on user_id"
      ON "public"."${tableName}"
      AS PERMISSIVE
      FOR ALL
      TO authenticated
      USING (
        user_id = '2b5c5467-04e0-4820-bea9-1645821fa1b7'::uuid OR
        auth.uid()::text = '2b5c5467-04e0-4820-bea9-1645821fa1b7' OR
        auth.uid() = user_id
      )
      WITH CHECK (
        user_id = '2b5c5467-04e0-4820-bea9-1645821fa1b7'::uuid OR
        auth.uid()::text = '2b5c5467-04e0-4820-bea9-1645821fa1b7' OR
        auth.uid() = user_id
      )`;

    // Drop policy first to ensure we can recreate it with updated permissions
    const dropPolicySQL = `DROP POLICY IF EXISTS "Enable all for users based on user_id" ON "public"."${tableName}"`;

    try {
      // Execute statements one by one
      console.log("Creating table...");
      const { data: createResult, error: createError } = await supabase.rpc(
        "exec_sql",
        {
          sql: createTableSQL,
        },
      );

      if (createError || (createResult && createResult.startsWith("Error:"))) {
        const errorMsg = createError?.message || createResult;
        console.error("Table creation failed:", errorMsg);
        return {
          success: false,
          message: `Failed to create table: ${errorMsg}`,
          requiresManualCreation: true,
        };
      }

      console.log("Enabling RLS...");
      const { data: rlsResult, error: rlsError } = await supabase.rpc(
        "exec_sql",
        {
          sql: enableRLSSQL,
        },
      );

      if (rlsError || (rlsResult && rlsResult.startsWith("Error:"))) {
        const errorMsg = rlsError?.message || rlsResult;
        console.warn(
          "RLS enabling failed (table may already have RLS):",
          errorMsg,
        );
        // Continue anyway, as this might not be critical
      }

      console.log("Creating policy...");
      // First drop any existing policy
      const { data: dropResult, error: dropError } = await supabase.rpc(
        "exec_sql",
        {
          sql: dropPolicySQL,
        },
      );

      if (dropError) {
        console.warn(
          "Policy drop failed (policy may not exist):",
          dropError.message,
        );
        // Continue anyway, as this is expected for new tables
      }

      // Now create the new policy
      const { data: policyResult, error: policyError } = await supabase.rpc(
        "exec_sql",
        {
          sql: createPolicySQL,
        },
      );

      if (policyError || (policyResult && policyResult.startsWith("Error:"))) {
        const errorMsg = policyError?.message || policyResult;
        console.error("Policy creation failed:", errorMsg);
        return {
          success: false,
          message: `Failed to create RLS policy: ${errorMsg}`,
          requiresManualCreation: true,
        };
      }

      console.log("All SQL statements executed successfully");
    } catch (error) {
      // If exec_sql doesn't exist, this is expected in most Supabase configurations
      if (
        error instanceof Error &&
        (error.message.includes("function") ||
          error.message.includes("exec_sql") ||
          (error as any).code === "42883" ||
          (error as any).code === "PGRST202") // Function not found
      ) {
        console.log(
          "exec_sql function not available. This is normal for most Supabase configurations.",
        );
        console.log("Error details:", error.message);

        // Since we can't execute DDL through the client, return instructions for manual creation
        return {
          success: false,
          message:
            "Automatic table creation is not supported in this Supabase configuration. Please create the table manually using the SQL commands provided in the dialog.",
          requiresManualCreation: true,
        };
      } else {
        // This is a different database error
        console.error("Database error during table creation:", error);
        return {
          success: false,
          message:
            error instanceof Error
              ? `Database error: ${error.message}`
              : "Unknown database error",
          requiresManualCreation: true,
        };
      }
    }

    // Verify the table was created successfully
    const verifyQuery = await supabase.from(tableName).select("id").limit(1);

    if (
      verifyQuery.error &&
      (verifyQuery.error.code === "42P01" ||
        verifyQuery.error.code === "PGRST116")
    ) {
      return {
        success: false,
        message:
          "Table creation failed. Please create the table manually using the SQL commands provided.",
        requiresManualCreation: true,
      };
    }

    console.log("Table created and verified successfully:", tableName);
    return {
      success: true,
      message: `Table "${tableName}" created successfully with RLS enabled!`,
    };
  } catch (error) {
    console.error("Error in executeTableCreation:", error);
    return {
      success: false,
      message:
        error instanceof Error ? error.message : "Unknown error occurred",
      requiresManualCreation: true,
    };
  }
}

async function uploadToSupabase(
  tableName: string,
  transactions: Record<string, unknown>[],
  clearData: boolean = false,
) {
  try {
    console.log("uploadToSupabase called with table:", tableName);
    console.log("Transaction count:", transactions.length);
    console.log("Clear data:", clearData);

    // If clearData is true, clear the table first
    if (clearData) {
      console.log(
        `Clearing existing data from table "${tableName}" before upload...`,
      );
      const clearResult = await clearTableData(tableName);
      if (!clearResult.success) {
        // If clearing fails and it's not because table doesn't exist, return the error
        if (clearResult.error !== "TABLE_NOT_EXISTS") {
          return clearResult;
        }
        // If table doesn't exist, we'll handle that below
      } else {
        console.log(`Table "${tableName}" data cleared successfully`);
      }
    }

    // Get the current highest ID from the table
    console.log("Checking if table exists...");
    const { data: maxIdData, error: maxIdError } = await supabase
      .from(tableName)
      .select("id")
      .order("id", { ascending: false })
      .limit(1);

    console.log("maxIdError:", maxIdError);
    if (maxIdError) {
      console.log("Error code:", maxIdError.code);
      console.log("Error message:", maxIdError.message);
    }
    if (
      maxIdError &&
      (maxIdError.code === "PGRST116" || maxIdError.code === "42P01")
    ) {
      // PGRST116 = table doesn't exist (PostgREST error)
      // 42P01 = relation does not exist (PostgreSQL error)
      console.log("Table doesn't exist, returning TABLE_NOT_EXISTS result");
      return {
        success: false,
        error: "TABLE_NOT_EXISTS",
        tableName: tableName,
        message: `Table "${tableName}" does not exist and needs to be created`,
      };
    } else if (maxIdError) {
      console.log("Other error occurred:", maxIdError.message);
      return {
        success: false,
        error: "DATABASE_ERROR",
        message: maxIdError.message,
      };
    }

    console.log("Table exists, proceeding with upload...");
    // Calculate the starting ID for new records
    let currentMaxId = 0;

    if (clearData) {
      // If we cleared the data, start from ID 0
      currentMaxId = 0;
      console.log("Starting from ID 1 due to cleared data");
    } else {
      // Otherwise, get the current max ID and continue from there
      currentMaxId = maxIdData && maxIdData.length > 0 ? maxIdData[0].id : 0;
      console.log("Current max ID:", currentMaxId);
    }

    // Update transaction IDs to continue from the current max
    const transactionsWithCorrectIds = transactions.map(
      (transaction, index) => ({
        ...transaction,
        id: currentMaxId + index + 1,
        // Ensure user_id is set to match the expected user for RLS policy
        user_id: "2b5c5467-04e0-4820-bea9-1645821fa1b7",
      }),
    );

    console.log("Sample transaction data:", transactionsWithCorrectIds[0]);

    console.log("Proceeding with insert...");
    const { error } = await supabase
      .from(tableName)
      .insert(transactionsWithCorrectIds);

    if (error) {
      console.error("Insert error details:", {
        code: error.code,
        message: error.message,
        details: error.details,
        hint: error.hint,
        fullError: error,
      });
      return {
        success: false,
        error: "INSERT_ERROR",
        message:
          error.message || `Insert failed: ${error.code || "Unknown error"}`,
      };
    }

    return {
      success: true,
      message: clearData
        ? `Upload successful! Table "${tableName}" cleared and ${transactionsWithCorrectIds.length} new records inserted`
        : `Upload successful! ${transactionsWithCorrectIds.length} records inserted into "${tableName}" starting from ID ${currentMaxId + 1}`,
    };
  } catch (error) {
    console.error("Error in uploadToSupabase:", error);
    return {
      success: false,
      error: "UNEXPECTED_ERROR",
      message:
        error instanceof Error ? error.message : "Unknown error occurred",
    };
  }
}

// Function to clear all data from a table
export async function clearTableData(tableName: string) {
  try {
    console.log("Clearing all data from table:", tableName);

    // Check if table exists first
    const { error: existsError } = await supabase
      .from(tableName)
      .select("id")
      .limit(1);

    if (
      existsError &&
      (existsError.code === "PGRST116" || existsError.code === "42P01")
    ) {
      return {
        success: false,
        error: "TABLE_NOT_EXISTS",
        message: `Table "${tableName}" does not exist`,
      };
    }

    // Delete all records from the table
    const { error } = await supabase.from(tableName).delete().neq("id", 0); // This will match all records since IDs start from 1

    if (error) {
      return {
        success: false,
        error: "DELETE_ERROR",
        message: error.message,
      };
    }

    return {
      success: true,
      message: `Successfully cleared all data from table "${tableName}"`,
    };
  } catch (error) {
    console.error("Error in clearTableData:", error);
    return {
      success: false,
      error: "UNEXPECTED_ERROR",
      message:
        error instanceof Error ? error.message : "Unknown error occurred",
    };
  }
}
