{
  "page.tsx": {
    "defined": [
      "AuthenticatedLandingPage",
      "LandingPage"
    ],
    "called": [
      "Math.random",
      "clearInterval",
      "console.error",
      "fetch",
      "fill.map",
      "handleScroll",
      "navigator.getCurrentPosition",
      "response.json",
      "setCurrentTextIndex",
      "setInterval",
      "setShowNavbar",
      "setUserLocation",
      "toLocaleDateString",
      "toLocaleTimeString",
      "useAuth",
      "useCallback",
      "useEffect",
      "useState",
      "window.addEventListener",
      "window.removeEventListener"
    ],
    "both": [],
    "imports": {
      "useState": {
        "source": "react",
        "type": "npm",
        "importedName": "useState",
        "localName": "useState"
      },
      "useEffect": {
        "source": "react",
        "type": "npm",
        "importedName": "useEffect",
        "localName": "useEffect"
      },
      "useCallback": {
        "source": "react",
        "type": "npm",
        "importedName": "useCallback",
        "localName": "useCallback"
      },
      "Link": {
        "source": "next/link",
        "type": "npm",
        "importedName": "default",
        "localName": "Link"
      },
      "Image": {
        "source": "next/image",
        "type": "npm",
        "importedName": "default",
        "localName": "Image"
      },
      "useAuth": {
        "source": "@/context/AuthContext",
        "type": "alias",
        "importedName": "useAuth",
        "localName": "useAuth"
      },
      "Button": {
        "source": "@/components/ui/button",
        "type": "alias",
        "importedName": "Button",
        "localName": "Button"
      },
      "UnauthenticatedLandingPage": {
        "source": "@/components/UnauthenticatedLandingPage",
        "type": "alias",
        "importedName": "default",
        "localName": "UnauthenticatedLandingPage"
      }
    },
    "calledWithImports": {
      "useAuth": {
        "source": "@/context/AuthContext",
        "type": "alias",
        "importedName": "useAuth",
        "localName": "useAuth"
      },
      "useState": {
        "source": "react",
        "type": "npm",
        "importedName": "useState",
        "localName": "useState"
      },
      "useCallback": {
        "source": "react",
        "type": "npm",
        "importedName": "useCallback",
        "localName": "useCallback"
      },
      "setShowNavbar": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setShowNavbar"
      },
      "useEffect": {
        "source": "react",
        "type": "npm",
        "importedName": "useEffect",
        "localName": "useEffect"
      },
      "window.addEventListener": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "window",
        "functionName": "window.addEventListener",
        "fullMemberPath": "window.addEventListener",
        "methodChain": [
          "addEventListener"
        ],
        "isChainedCall": true
      },
      "handleScroll": {
        "source": "unknown",
        "type": "unknown",
        "importedName": "handleScroll",
        "localName": "handleScroll"
      },
      "window.removeEventListener": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "window",
        "functionName": "window.removeEventListener",
        "fullMemberPath": "window.removeEventListener",
        "methodChain": [
          "removeEventListener"
        ],
        "isChainedCall": true
      },
      "toLocaleDateString": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "unknown",
        "functionName": "toLocaleDateString",
        "fullMemberPath": "toLocaleDateString"
      },
      "setInterval": {
        "source": "unknown",
        "type": "unknown",
        "importedName": "setInterval",
        "localName": "setInterval"
      },
      "setCurrentTextIndex": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setCurrentTextIndex"
      },
      "navigator.getCurrentPosition": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "navigator",
        "functionName": "navigator.getCurrentPosition",
        "fullMemberPath": "navigator.getCurrentPosition",
        "methodChain": [
          "getCurrentPosition"
        ],
        "isChainedCall": true
      },
      "fetch": {
        "source": "unknown",
        "type": "unknown",
        "importedName": "fetch",
        "localName": "fetch"
      },
      "response.json": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "response",
        "functionName": "response.json",
        "fullMemberPath": "response.json",
        "methodChain": [
          "json"
        ],
        "isChainedCall": true
      },
      "setUserLocation": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setUserLocation"
      },
      "console.error": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "console",
        "functionName": "console.error",
        "fullMemberPath": "console.error",
        "methodChain": [
          "error"
        ],
        "isChainedCall": true
      },
      "clearInterval": {
        "source": "unknown",
        "type": "unknown",
        "importedName": "clearInterval",
        "localName": "clearInterval"
      },
      "toLocaleTimeString": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "unknown",
        "functionName": "toLocaleTimeString",
        "fullMemberPath": "toLocaleTimeString"
      },
      "fill.map": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "unknown",
        "functionName": "fill.map",
        "fullMemberPath": "fill.map",
        "methodChain": [
          "fill",
          "map"
        ],
        "isChainedCall": true
      },
      "Math.random": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "Math",
        "functionName": "Math.random",
        "fullMemberPath": "Math.random",
        "methodChain": [
          "random"
        ],
        "isChainedCall": true
      }
    },
    "destructuredFunctions": {
      "showNavbar": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "showNavbar"
      },
      "setShowNavbar": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setShowNavbar"
      },
      "currentTextIndex": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "currentTextIndex"
      },
      "setCurrentTextIndex": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setCurrentTextIndex"
      },
      "userLocation": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "userLocation"
      },
      "setUserLocation": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setUserLocation"
      }
    }
  },
  "NavbarWrapper.tsx": {
    "defined": [
      "NavbarWrapper",
      "checkNavbarVisibility"
    ],
    "called": [
      "checkNavbarVisibility",
      "clearInterval",
      "setInterval",
      "setIsVisible",
      "useAuth",
      "useEffect",
      "usePathname",
      "useState"
    ],
    "both": [
      "checkNavbarVisibility"
    ],
    "imports": {
      "useAuth": {
        "source": "../context/AuthContext",
        "type": "relative",
        "importedName": "useAuth",
        "localName": "useAuth"
      },
      "Navbar": {
        "source": "./navbar",
        "type": "relative",
        "importedName": "default",
        "localName": "Navbar"
      },
      "usePathname": {
        "source": "next/navigation",
        "type": "npm",
        "importedName": "usePathname",
        "localName": "usePathname"
      },
      "useState": {
        "source": "react",
        "type": "npm",
        "importedName": "useState",
        "localName": "useState"
      },
      "useEffect": {
        "source": "react",
        "type": "npm",
        "importedName": "useEffect",
        "localName": "useEffect"
      }
    },
    "calledWithImports": {
      "useAuth": {
        "source": "../context/AuthContext",
        "type": "relative",
        "importedName": "useAuth",
        "localName": "useAuth"
      },
      "usePathname": {
        "source": "next/navigation",
        "type": "npm",
        "importedName": "usePathname",
        "localName": "usePathname"
      },
      "useState": {
        "source": "react",
        "type": "npm",
        "importedName": "useState",
        "localName": "useState"
      },
      "useEffect": {
        "source": "react",
        "type": "npm",
        "importedName": "useEffect",
        "localName": "useEffect"
      },
      "setIsVisible": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setIsVisible"
      },
      "checkNavbarVisibility": {
        "source": "local",
        "type": "local",
        "importedName": "checkNavbarVisibility",
        "localName": "checkNavbarVisibility"
      },
      "setInterval": {
        "source": "unknown",
        "type": "unknown",
        "importedName": "setInterval",
        "localName": "setInterval"
      },
      "clearInterval": {
        "source": "unknown",
        "type": "unknown",
        "importedName": "clearInterval",
        "localName": "clearInterval"
      }
    },
    "destructuredFunctions": {
      "isVisible": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "isVisible"
      },
      "setIsVisible": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setIsVisible"
      }
    }
  },
  "navbar.tsx": {
    "defined": [
      "Navbar",
      "handleLinkClick",
      "handleLogout",
      "handleMouseLeave",
      "performCleanupAndRedirect"
    ],
    "called": [
      "console.error",
      "console.log",
      "e.preventDefault",
      "e.stopPropagation",
      "error.includes",
      "localStorage.removeItem",
      "navLinks.map",
      "performCleanupAndRedirect",
      "restrictedUserIds.includes",
      "sessionStorage.clear",
      "setIsMenuOpen",
      "setNavLinks",
      "setShowLegacyNav",
      "supabase.signOut",
      "useAuth",
      "useEffect",
      "useState",
      "window.alert"
    ],
    "both": [
      "performCleanupAndRedirect"
    ],
    "imports": {
      "useAuth": {
        "source": "../context/AuthContext",
        "type": "relative",
        "importedName": "useAuth",
        "localName": "useAuth"
      },
      "supabase": {
        "source": "../lib/supabaseClient",
        "type": "relative",
        "importedName": "supabase",
        "localName": "supabase"
      },
      "DropdownMenu": {
        "source": "@/components/ui/dropdown-menu",
        "type": "alias",
        "importedName": "DropdownMenu",
        "localName": "DropdownMenu"
      },
      "DropdownMenuContent": {
        "source": "@/components/ui/dropdown-menu",
        "type": "alias",
        "importedName": "DropdownMenuContent",
        "localName": "DropdownMenuContent"
      },
      "DropdownMenuItem": {
        "source": "@/components/ui/dropdown-menu",
        "type": "alias",
        "importedName": "DropdownMenuItem",
        "localName": "DropdownMenuItem"
      },
      "DropdownMenuTrigger": {
        "source": "@/components/ui/dropdown-menu",
        "type": "alias",
        "importedName": "DropdownMenuTrigger",
        "localName": "DropdownMenuTrigger"
      },
      "Button": {
        "source": "@/components/ui/button",
        "type": "alias",
        "importedName": "Button",
        "localName": "Button"
      },
      "Link": {
        "source": "next/link",
        "type": "npm",
        "importedName": "default",
        "localName": "Link"
      },
      "useState": {
        "source": "react",
        "type": "npm",
        "importedName": "useState",
        "localName": "useState"
      },
      "useEffect": {
        "source": "react",
        "type": "npm",
        "importedName": "useEffect",
        "localName": "useEffect"
      },
      "Menu": {
        "source": "lucide-react",
        "type": "npm",
        "importedName": "Menu",
        "localName": "Menu"
      },
      "X": {
        "source": "lucide-react",
        "type": "npm",
        "importedName": "X",
        "localName": "X"
      },
      "DarkNavigationMenuDemo": {
        "source": "@/components/DarkNavigationMenuDemo",
        "type": "alias",
        "importedName": "DarkNavigationMenuDemo",
        "localName": "DarkNavigationMenuDemo"
      }
    },
    "calledWithImports": {
      "useAuth": {
        "source": "../context/AuthContext",
        "type": "relative",
        "importedName": "useAuth",
        "localName": "useAuth"
      },
      "useState": {
        "source": "react",
        "type": "npm",
        "importedName": "useState",
        "localName": "useState"
      },
      "useEffect": {
        "source": "react",
        "type": "npm",
        "importedName": "useEffect",
        "localName": "useEffect"
      },
      "restrictedUserIds.includes": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "restrictedUserIds",
        "functionName": "restrictedUserIds.includes",
        "fullMemberPath": "restrictedUserIds.includes",
        "methodChain": [
          "includes"
        ],
        "isChainedCall": true
      },
      "setNavLinks": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setNavLinks"
      },
      "setShowLegacyNav": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setShowLegacyNav"
      },
      "e.preventDefault": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "e",
        "functionName": "e.preventDefault",
        "fullMemberPath": "e.preventDefault",
        "methodChain": [
          "preventDefault"
        ],
        "isChainedCall": true
      },
      "e.stopPropagation": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "e",
        "functionName": "e.stopPropagation",
        "fullMemberPath": "e.stopPropagation",
        "methodChain": [
          "stopPropagation"
        ],
        "isChainedCall": true
      },
      "console.log": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "console",
        "functionName": "console.log",
        "fullMemberPath": "console.log",
        "methodChain": [
          "log"
        ],
        "isChainedCall": true
      },
      "supabase.signOut": {
        "source": "../lib/supabaseClient",
        "type": "relative",
        "importedName": "supabase",
        "localName": "supabase",
        "memberOf": "supabase",
        "functionName": "supabase.signOut",
        "fullMemberPath": "supabase.signOut",
        "methodChain": [
          "signOut"
        ],
        "isChainedCall": true
      },
      "console.error": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "console",
        "functionName": "console.error",
        "fullMemberPath": "console.error",
        "methodChain": [
          "error"
        ],
        "isChainedCall": true
      },
      "error.includes": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "error",
        "functionName": "error.includes",
        "fullMemberPath": "error.includes",
        "methodChain": [
          "includes"
        ],
        "isChainedCall": true
      },
      "performCleanupAndRedirect": {
        "source": "local",
        "type": "local",
        "importedName": "performCleanupAndRedirect",
        "localName": "performCleanupAndRedirect"
      },
      "window.alert": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "window",
        "functionName": "window.alert",
        "fullMemberPath": "window.alert",
        "methodChain": [
          "alert"
        ],
        "isChainedCall": true
      },
      "localStorage.removeItem": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "localStorage",
        "functionName": "localStorage.removeItem",
        "fullMemberPath": "localStorage.removeItem",
        "methodChain": [
          "removeItem"
        ],
        "isChainedCall": true
      },
      "sessionStorage.clear": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "sessionStorage",
        "functionName": "sessionStorage.clear",
        "fullMemberPath": "sessionStorage.clear",
        "methodChain": [
          "clear"
        ],
        "isChainedCall": true
      },
      "setIsMenuOpen": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setIsMenuOpen"
      },
      "navLinks.map": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "navLinks",
        "functionName": "navLinks.map",
        "fullMemberPath": "navLinks.map",
        "methodChain": [
          "map"
        ],
        "isChainedCall": true
      }
    },
    "destructuredFunctions": {
      "isMenuOpen": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "isMenuOpen"
      },
      "setIsMenuOpen": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setIsMenuOpen"
      },
      "navLinks": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "navLinks"
      },
      "setNavLinks": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setNavLinks"
      },
      "showLegacyNav": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "showLegacyNav"
      },
      "setShowLegacyNav": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setShowLegacyNav"
      }
    }
  },
  "layout.tsx": {
    "defined": [
      "RootLayout"
    ],
    "called": [],
    "both": [],
    "imports": {
      "AuthProvider": {
        "source": "../context/AuthContext",
        "type": "relative",
        "importedName": "AuthProvider",
        "localName": "AuthProvider"
      },
      "NavbarWrapper": {
        "source": "./NavbarWrapper",
        "type": "relative",
        "importedName": "default",
        "localName": "NavbarWrapper"
      },
      "Toaster": {
        "source": "@/components/ui/sonner",
        "type": "alias",
        "importedName": "Toaster",
        "localName": "Toaster"
      }
    },
    "calledWithImports": {},
    "destructuredFunctions": {}
  },
  "welcome/page.tsx": {
    "defined": [
      "WelcomePage",
      "handleNavigationToFamilyPage"
    ],
    "called": [
      "clearTimeout",
      "containerRef.current.add",
      "e.preventDefault",
      "messages.map",
      "router.push",
      "setCharIndex",
      "setCurrentMessage",
      "setIsNavigating",
      "setMessageIndex",
      "setMessages",
      "setShowButton",
      "setTimeout",
      "useEffect",
      "useRef",
      "useRouter",
      "useState"
    ],
    "both": [],
    "imports": {
      "React": {
        "source": "react",
        "type": "npm",
        "importedName": "default",
        "localName": "React"
      },
      "useEffect": {
        "source": "react",
        "type": "npm",
        "importedName": "useEffect",
        "localName": "useEffect"
      },
      "useState": {
        "source": "react",
        "type": "npm",
        "importedName": "useState",
        "localName": "useState"
      },
      "useRef": {
        "source": "react",
        "type": "npm",
        "importedName": "useRef",
        "localName": "useRef"
      },
      "useRouter": {
        "source": "next/navigation",
        "type": "npm",
        "importedName": "useRouter",
        "localName": "useRouter"
      }
    },
    "calledWithImports": {
      "useRouter": {
        "source": "next/navigation",
        "type": "npm",
        "importedName": "useRouter",
        "localName": "useRouter"
      },
      "useState": {
        "source": "react",
        "type": "npm",
        "importedName": "useState",
        "localName": "useState"
      },
      "useRef": {
        "source": "react",
        "type": "npm",
        "importedName": "useRef",
        "localName": "useRef"
      },
      "useEffect": {
        "source": "react",
        "type": "npm",
        "importedName": "useEffect",
        "localName": "useEffect"
      },
      "setTimeout": {
        "source": "unknown",
        "type": "unknown",
        "importedName": "setTimeout",
        "localName": "setTimeout"
      },
      "setShowButton": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setShowButton"
      },
      "clearTimeout": {
        "source": "unknown",
        "type": "unknown",
        "importedName": "clearTimeout",
        "localName": "clearTimeout"
      },
      "setCurrentMessage": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setCurrentMessage"
      },
      "setCharIndex": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setCharIndex"
      },
      "setMessages": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setMessages"
      },
      "setMessageIndex": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setMessageIndex"
      },
      "e.preventDefault": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "e",
        "functionName": "e.preventDefault",
        "fullMemberPath": "e.preventDefault",
        "methodChain": [
          "preventDefault"
        ],
        "isChainedCall": true
      },
      "setIsNavigating": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setIsNavigating"
      },
      "containerRef.current.add": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "containerRef",
        "functionName": "containerRef.current.add",
        "fullMemberPath": "containerRef.current.add",
        "methodChain": [
          "current",
          "add"
        ],
        "isChainedCall": true
      },
      "router.push": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "router",
        "functionName": "router.push",
        "fullMemberPath": "router.push",
        "methodChain": [
          "push"
        ],
        "isChainedCall": true
      },
      "messages.map": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "messages",
        "functionName": "messages.map",
        "fullMemberPath": "messages.map",
        "methodChain": [
          "map"
        ],
        "isChainedCall": true
      }
    },
    "destructuredFunctions": {
      "messages": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "messages"
      },
      "setMessages": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setMessages"
      },
      "currentMessage": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "currentMessage"
      },
      "setCurrentMessage": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setCurrentMessage"
      },
      "messageIndex": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "messageIndex"
      },
      "setMessageIndex": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setMessageIndex"
      },
      "charIndex": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "charIndex"
      },
      "setCharIndex": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setCharIndex"
      },
      "showButton": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "showButton"
      },
      "setShowButton": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setShowButton"
      },
      "isNavigating": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "isNavigating"
      },
      "setIsNavigating": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setIsNavigating"
      }
    }
  },
  "upload/page.tsx": {
    "defined": [
      "UploadPage",
      "cancelClearData",
      "confirmClearData",
      "getTableName",
      "handleClearDataChange",
      "handleCloseDialog",
      "handleCopyInstructions",
      "handleCreateTable",
      "handleFileChange",
      "handleUpload"
    ],
    "called": [
      "BANK_OPTIONS.map",
      "console.error",
      "console.log",
      "createTableInSupabase",
      "e.stopPropagation",
      "executeTableCreation",
      "fileName.match",
      "getTableName",
      "navigator.writeText",
      "setClearData",
      "setCreatingTable",
      "setFile",
      "setPendingBank",
      "setPendingFile",
      "setPendingTableName",
      "setShowClearDataWarning",
      "setShowCreateTableDialog",
      "setTableInstructions",
      "setUploading",
      "tableInstructions.substring",
      "toast.error",
      "toast.success",
      "uploadExcel",
      "uploadedFile.match",
      "useEffect",
      "useState"
    ],
    "both": [
      "getTableName"
    ],
    "imports": {
      "useState": {
        "source": "react",
        "type": "npm",
        "importedName": "useState",
        "localName": "useState"
      },
      "useEffect": {
        "source": "react",
        "type": "npm",
        "importedName": "useEffect",
        "localName": "useEffect"
      },
      "uploadExcel": {
        "source": "@/app/actions/fileActions",
        "type": "alias",
        "importedName": "uploadExcel",
        "localName": "uploadExcel"
      },
      "createTableInSupabase": {
        "source": "@/app/actions/fileActions",
        "type": "alias",
        "importedName": "createTableInSupabase",
        "localName": "createTableInSupabase"
      },
      "executeTableCreation": {
        "source": "@/app/actions/fileActions",
        "type": "alias",
        "importedName": "executeTableCreation",
        "localName": "executeTableCreation"
      },
      "Button": {
        "source": "@/components/ui/button",
        "type": "alias",
        "importedName": "Button",
        "localName": "Button"
      },
      "Input": {
        "source": "@/components/ui/input",
        "type": "alias",
        "importedName": "Input",
        "localName": "Input"
      },
      "Card": {
        "source": "@/components/ui/card",
        "type": "alias",
        "importedName": "Card",
        "localName": "Card"
      },
      "CardContent": {
        "source": "@/components/ui/card",
        "type": "alias",
        "importedName": "CardContent",
        "localName": "CardContent"
      },
      "CardHeader": {
        "source": "@/components/ui/card",
        "type": "alias",
        "importedName": "CardHeader",
        "localName": "CardHeader"
      },
      "CardTitle": {
        "source": "@/components/ui/card",
        "type": "alias",
        "importedName": "CardTitle",
        "localName": "CardTitle"
      },
      "toast": {
        "source": "sonner",
        "type": "npm",
        "importedName": "toast",
        "localName": "toast"
      },
      "Select": {
        "source": "@/components/ui/select",
        "type": "alias",
        "importedName": "Select",
        "localName": "Select"
      },
      "SelectContent": {
        "source": "@/components/ui/select",
        "type": "alias",
        "importedName": "SelectContent",
        "localName": "SelectContent"
      },
      "SelectItem": {
        "source": "@/components/ui/select",
        "type": "alias",
        "importedName": "SelectItem",
        "localName": "SelectItem"
      },
      "SelectTrigger": {
        "source": "@/components/ui/select",
        "type": "alias",
        "importedName": "SelectTrigger",
        "localName": "SelectTrigger"
      },
      "SelectValue": {
        "source": "@/components/ui/select",
        "type": "alias",
        "importedName": "SelectValue",
        "localName": "SelectValue"
      },
      "Checkbox": {
        "source": "@/components/ui/checkbox",
        "type": "alias",
        "importedName": "Checkbox",
        "localName": "Checkbox"
      },
      "Dialog": {
        "source": "@/components/ui/dialog",
        "type": "alias",
        "importedName": "Dialog",
        "localName": "Dialog"
      },
      "DialogContent": {
        "source": "@/components/ui/dialog",
        "type": "alias",
        "importedName": "DialogContent",
        "localName": "DialogContent"
      },
      "DialogDescription": {
        "source": "@/components/ui/dialog",
        "type": "alias",
        "importedName": "DialogDescription",
        "localName": "DialogDescription"
      },
      "DialogHeader": {
        "source": "@/components/ui/dialog",
        "type": "alias",
        "importedName": "DialogHeader",
        "localName": "DialogHeader"
      },
      "DialogTitle": {
        "source": "@/components/ui/dialog",
        "type": "alias",
        "importedName": "DialogTitle",
        "localName": "DialogTitle"
      },
      "ProtectedRoute": {
        "source": "@/components/protected-route",
        "type": "alias",
        "importedName": "default",
        "localName": "ProtectedRoute"
      }
    },
    "calledWithImports": {
      "useState": {
        "source": "react",
        "type": "npm",
        "importedName": "useState",
        "localName": "useState"
      },
      "useEffect": {
        "source": "react",
        "type": "npm",
        "importedName": "useEffect",
        "localName": "useEffect"
      },
      "console.log": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "console",
        "functionName": "console.log",
        "fullMemberPath": "console.log",
        "methodChain": [
          "log"
        ],
        "isChainedCall": true
      },
      "tableInstructions.substring": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "tableInstructions",
        "functionName": "tableInstructions.substring",
        "fullMemberPath": "tableInstructions.substring",
        "methodChain": [
          "substring"
        ],
        "isChainedCall": true
      },
      "uploadedFile.match": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "uploadedFile",
        "functionName": "uploadedFile.match",
        "fullMemberPath": "uploadedFile.match",
        "methodChain": [
          "match"
        ],
        "isChainedCall": true
      },
      "toast.error": {
        "source": "sonner",
        "type": "npm",
        "importedName": "toast",
        "localName": "toast",
        "memberOf": "toast",
        "functionName": "toast.error",
        "fullMemberPath": "toast.error",
        "methodChain": [
          "error"
        ],
        "isChainedCall": true
      },
      "setFile": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setFile"
      },
      "setUploading": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setUploading"
      },
      "uploadExcel": {
        "source": "@/app/actions/fileActions",
        "type": "alias",
        "importedName": "uploadExcel",
        "localName": "uploadExcel"
      },
      "toast.success": {
        "source": "sonner",
        "type": "npm",
        "importedName": "toast",
        "localName": "toast",
        "memberOf": "toast",
        "functionName": "toast.success",
        "fullMemberPath": "toast.success",
        "methodChain": [
          "success"
        ],
        "isChainedCall": true
      },
      "setPendingTableName": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setPendingTableName"
      },
      "setPendingFile": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setPendingFile"
      },
      "setPendingBank": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setPendingBank"
      },
      "createTableInSupabase": {
        "source": "@/app/actions/fileActions",
        "type": "alias",
        "importedName": "createTableInSupabase",
        "localName": "createTableInSupabase"
      },
      "setTableInstructions": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setTableInstructions"
      },
      "setShowCreateTableDialog": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setShowCreateTableDialog"
      },
      "console.error": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "console",
        "functionName": "console.error",
        "fullMemberPath": "console.error",
        "methodChain": [
          "error"
        ],
        "isChainedCall": true
      },
      "navigator.writeText": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "navigator",
        "functionName": "navigator.writeText",
        "fullMemberPath": "navigator.writeText",
        "methodChain": [
          "writeText"
        ],
        "isChainedCall": true
      },
      "setCreatingTable": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setCreatingTable"
      },
      "executeTableCreation": {
        "source": "@/app/actions/fileActions",
        "type": "alias",
        "importedName": "executeTableCreation",
        "localName": "executeTableCreation"
      },
      "setShowClearDataWarning": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setShowClearDataWarning"
      },
      "setClearData": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setClearData"
      },
      "fileName.match": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "fileName",
        "functionName": "fileName.match",
        "fullMemberPath": "fileName.match",
        "methodChain": [
          "match"
        ],
        "isChainedCall": true
      },
      "getTableName": {
        "source": "local",
        "type": "local",
        "importedName": "getTableName",
        "localName": "getTableName"
      },
      "BANK_OPTIONS.map": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "BANK_OPTIONS",
        "functionName": "BANK_OPTIONS.map",
        "fullMemberPath": "BANK_OPTIONS.map",
        "methodChain": [
          "map"
        ],
        "isChainedCall": true
      },
      "e.stopPropagation": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "e",
        "functionName": "e.stopPropagation",
        "fullMemberPath": "e.stopPropagation",
        "methodChain": [
          "stopPropagation"
        ],
        "isChainedCall": true
      }
    },
    "destructuredFunctions": {
      "file": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "file"
      },
      "setFile": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setFile"
      },
      "selectedBank": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "selectedBank"
      },
      "setSelectedBank": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setSelectedBank"
      },
      "uploading": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "uploading"
      },
      "setUploading": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setUploading"
      },
      "clearData": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "clearData"
      },
      "setClearData": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setClearData"
      },
      "showClearDataWarning": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "showClearDataWarning"
      },
      "setShowClearDataWarning": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setShowClearDataWarning"
      },
      "showCreateTableDialog": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "showCreateTableDialog"
      },
      "setShowCreateTableDialog": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setShowCreateTableDialog"
      },
      "pendingTableName": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "pendingTableName"
      },
      "setPendingTableName": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setPendingTableName"
      },
      "tableInstructions": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "tableInstructions"
      },
      "setTableInstructions": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setTableInstructions"
      },
      "creatingTable": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "creatingTable"
      },
      "setCreatingTable": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setCreatingTable"
      },
      "pendingFile": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "pendingFile"
      },
      "setPendingFile": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setPendingFile"
      },
      "pendingBank": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "pendingBank"
      },
      "setPendingBank": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setPendingBank"
      }
    }
  },
  "unauthorized/page.tsx": {
    "defined": [
      "UnauthorizedPage"
    ],
    "called": [],
    "both": [],
    "imports": {
      "Link": {
        "source": "next/link",
        "type": "npm",
        "importedName": "default",
        "localName": "Link"
      },
      "Button": {
        "source": "@/components/ui/button",
        "type": "alias",
        "importedName": "Button",
        "localName": "Button"
      }
    },
    "calledWithImports": {},
    "destructuredFunctions": {}
  },
  "types/window.d.ts": {
    "defined": [],
    "called": [],
    "both": [],
    "imports": {},
    "calledWithImports": {},
    "destructuredFunctions": {}
  },
  "types/bill.ts": {
    "defined": [],
    "called": [],
    "both": [],
    "imports": {},
    "calledWithImports": {},
    "destructuredFunctions": {}
  },
  "sjprio/page.tsx": {
    "defined": [
      "Home",
      "fetchTransactions"
    ],
    "called": [
      "console.error",
      "fetchTransactions",
      "setTransactions",
      "supabase.from.select.eq",
      "useAuth",
      "useEffect",
      "useState",
      "window.open"
    ],
    "both": [
      "fetchTransactions"
    ],
    "imports": {
      "useEffect": {
        "source": "react",
        "type": "npm",
        "importedName": "useEffect",
        "localName": "useEffect"
      },
      "useState": {
        "source": "react",
        "type": "npm",
        "importedName": "useState",
        "localName": "useState"
      },
      "supabase": {
        "source": "../../lib/supabaseClient",
        "type": "relative",
        "importedName": "supabase",
        "localName": "supabase"
      },
      "useAuth": {
        "source": "../../context/AuthContext",
        "type": "relative",
        "importedName": "useAuth",
        "localName": "useAuth"
      },
      "Button": {
        "source": "@/components/ui/button",
        "type": "alias",
        "importedName": "Button",
        "localName": "Button"
      },
      "ProtectedRoute": {
        "source": "@/components/protected-route",
        "type": "alias",
        "importedName": "default",
        "localName": "ProtectedRoute"
      },
      "TransactionTable": {
        "source": "@/components/ui/transaction/TransactionTable",
        "type": "alias",
        "importedName": "default",
        "localName": "TransactionTable"
      },
      "UpdateSjAggregatedButton": {
        "source": "@/components/UpdateSjAggregatedButton",
        "type": "alias",
        "importedName": "default",
        "localName": "UpdateSjAggregatedButton"
      },
      "Transaction": {
        "source": "@/types/transaction",
        "type": "alias",
        "importedName": "Transaction",
        "localName": "Transaction"
      }
    },
    "calledWithImports": {
      "useAuth": {
        "source": "../../context/AuthContext",
        "type": "relative",
        "importedName": "useAuth",
        "localName": "useAuth"
      },
      "useState": {
        "source": "react",
        "type": "npm",
        "importedName": "useState",
        "localName": "useState"
      },
      "useEffect": {
        "source": "react",
        "type": "npm",
        "importedName": "useEffect",
        "localName": "useEffect"
      },
      "supabase.from.select.eq": {
        "source": "../../lib/supabaseClient",
        "type": "relative",
        "importedName": "supabase",
        "localName": "supabase",
        "memberOf": "supabase",
        "functionName": "supabase.from.select.eq",
        "fullMemberPath": "supabase.from.select.eq",
        "methodChain": [
          "from",
          "select",
          "eq"
        ],
        "isChainedCall": true
      },
      "console.error": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "console",
        "functionName": "console.error",
        "fullMemberPath": "console.error",
        "methodChain": [
          "error"
        ],
        "isChainedCall": true
      },
      "setTransactions": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setTransactions"
      },
      "fetchTransactions": {
        "source": "local",
        "type": "local",
        "importedName": "fetchTransactions",
        "localName": "fetchTransactions"
      },
      "window.open": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "window",
        "functionName": "window.open",
        "fullMemberPath": "window.open",
        "methodChain": [
          "open"
        ],
        "isChainedCall": true
      }
    },
    "destructuredFunctions": {
      "transactions": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "transactions"
      },
      "setTransactions": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setTransactions"
      }
    }
  },
  "profile/page.tsx": {
    "defined": [
      "ProfilePage",
      "fetchBankDetails",
      "generateSupabaseTableName",
      "handleCancelEditTableName",
      "handleEditTableName",
      "handleSaveTableName",
      "handleTableNameInputChange",
      "handleToggleAccountStatus",
      "loadInitialBankData",
      "setupPage"
    ],
    "called": [
      "JSON.stringify",
      "Object.entries",
      "Object.entries.map",
      "account.replace",
      "accounts.map",
      "bankAccounts.find",
      "bankName.toLowerCase.replace.replace",
      "banks.map",
      "console.error",
      "console.log",
      "dateObj.toLocaleDateString",
      "fetchBankDetails",
      "generateSupabaseTableName",
      "handleCancelEditTableName",
      "handleEditTableName",
      "handleSaveTableName",
      "handleTableNameInputChange",
      "handleToggleAccountStatus",
      "loadInitialBankData",
      "prev.map",
      "setBankAccounts",
      "setCurrentUser",
      "setIsInitialLoading",
      "settingsMap.get",
      "setupPage",
      "supabase.from.select.eq",
      "supabase.from.select.order.limit.maybeSingle",
      "supabase.from.upsert.select",
      "supabase.getSession",
      "useEffect",
      "useState"
    ],
    "both": [
      "fetchBankDetails",
      "generateSupabaseTableName",
      "handleCancelEditTableName",
      "handleEditTableName",
      "handleSaveTableName",
      "handleTableNameInputChange",
      "handleToggleAccountStatus",
      "loadInitialBankData",
      "setupPage"
    ],
    "imports": {
      "useEffect": {
        "source": "react",
        "type": "npm",
        "importedName": "useEffect",
        "localName": "useEffect"
      },
      "useState": {
        "source": "react",
        "type": "npm",
        "importedName": "useState",
        "localName": "useState"
      },
      "supabase": {
        "source": "@/lib/supabaseClient",
        "type": "alias",
        "importedName": "supabase",
        "localName": "supabase"
      },
      "User": {
        "source": "@supabase/supabase-js",
        "type": "npm",
        "importedName": "User",
        "localName": "User"
      },
      "Switch": {
        "source": "@/components/ui/switch",
        "type": "alias",
        "importedName": "Switch",
        "localName": "Switch"
      },
      "Label": {
        "source": "@/components/ui/label",
        "type": "alias",
        "importedName": "Label",
        "localName": "Label"
      },
      "Input": {
        "source": "@/components/ui/input",
        "type": "alias",
        "importedName": "Input",
        "localName": "Input"
      },
      "Button": {
        "source": "@/components/ui/button",
        "type": "alias",
        "importedName": "Button",
        "localName": "Button"
      },
      "Card": {
        "source": "@/components/ui/card",
        "type": "alias",
        "importedName": "Card",
        "localName": "Card"
      },
      "CardContent": {
        "source": "@/components/ui/card",
        "type": "alias",
        "importedName": "CardContent",
        "localName": "CardContent"
      },
      "CardDescription": {
        "source": "@/components/ui/card",
        "type": "alias",
        "importedName": "CardDescription",
        "localName": "CardDescription"
      },
      "CardHeader": {
        "source": "@/components/ui/card",
        "type": "alias",
        "importedName": "CardHeader",
        "localName": "CardHeader"
      },
      "CardTitle": {
        "source": "@/components/ui/card",
        "type": "alias",
        "importedName": "CardTitle",
        "localName": "CardTitle"
      },
      "Accordion": {
        "source": "@/components/ui/accordion",
        "type": "alias",
        "importedName": "Accordion",
        "localName": "Accordion"
      },
      "AccordionContent": {
        "source": "@/components/ui/accordion",
        "type": "alias",
        "importedName": "AccordionContent",
        "localName": "AccordionContent"
      },
      "AccordionItem": {
        "source": "@/components/ui/accordion",
        "type": "alias",
        "importedName": "AccordionItem",
        "localName": "AccordionItem"
      },
      "AccordionTrigger": {
        "source": "@/components/ui/accordion",
        "type": "alias",
        "importedName": "AccordionTrigger",
        "localName": "AccordionTrigger"
      },
      "Badge": {
        "source": "@/components/ui/badge",
        "type": "alias",
        "importedName": "Badge",
        "localName": "Badge"
      }
    },
    "calledWithImports": {
      "bankName.toLowerCase.replace.replace": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "bankName",
        "functionName": "bankName.toLowerCase.replace.replace",
        "fullMemberPath": "bankName.toLowerCase.replace.replace",
        "methodChain": [
          "toLowerCase",
          "replace",
          "replace"
        ],
        "isChainedCall": true
      },
      "useState": {
        "source": "react",
        "type": "npm",
        "importedName": "useState",
        "localName": "useState"
      },
      "useEffect": {
        "source": "react",
        "type": "npm",
        "importedName": "useEffect",
        "localName": "useEffect"
      },
      "setIsInitialLoading": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setIsInitialLoading"
      },
      "supabase.getSession": {
        "source": "@/lib/supabaseClient",
        "type": "alias",
        "importedName": "supabase",
        "localName": "supabase",
        "memberOf": "supabase",
        "functionName": "supabase.getSession",
        "fullMemberPath": "supabase.getSession",
        "methodChain": [
          "getSession"
        ],
        "isChainedCall": true
      },
      "console.error": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "console",
        "functionName": "console.error",
        "fullMemberPath": "console.error",
        "methodChain": [
          "error"
        ],
        "isChainedCall": true
      },
      "setCurrentUser": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setCurrentUser"
      },
      "loadInitialBankData": {
        "source": "local",
        "type": "local",
        "importedName": "loadInitialBankData",
        "localName": "loadInitialBankData"
      },
      "console.log": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "console",
        "functionName": "console.log",
        "fullMemberPath": "console.log",
        "methodChain": [
          "log"
        ],
        "isChainedCall": true
      },
      "setupPage": {
        "source": "local",
        "type": "local",
        "importedName": "setupPage",
        "localName": "setupPage"
      },
      "supabase.from.select.eq": {
        "source": "@/lib/supabaseClient",
        "type": "alias",
        "importedName": "supabase",
        "localName": "supabase",
        "memberOf": "supabase",
        "functionName": "supabase.from.select.eq",
        "fullMemberPath": "supabase.from.select.eq",
        "methodChain": [
          "from",
          "select",
          "eq"
        ],
        "isChainedCall": true
      },
      "Object.entries": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "Object",
        "functionName": "Object.entries",
        "fullMemberPath": "Object.entries",
        "methodChain": [
          "entries"
        ],
        "isChainedCall": true
      },
      "banks.map": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "banks",
        "functionName": "banks.map",
        "fullMemberPath": "banks.map",
        "methodChain": [
          "map"
        ],
        "isChainedCall": true
      },
      "settingsMap.get": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "settingsMap",
        "functionName": "settingsMap.get",
        "fullMemberPath": "settingsMap.get",
        "methodChain": [
          "get"
        ],
        "isChainedCall": true
      },
      "generateSupabaseTableName": {
        "source": "local",
        "type": "local",
        "importedName": "generateSupabaseTableName",
        "localName": "generateSupabaseTableName"
      },
      "setBankAccounts": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setBankAccounts"
      },
      "fetchBankDetails": {
        "source": "local",
        "type": "local",
        "importedName": "fetchBankDetails",
        "localName": "fetchBankDetails"
      },
      "supabase.from.select.order.limit.maybeSingle": {
        "source": "@/lib/supabaseClient",
        "type": "alias",
        "importedName": "supabase",
        "localName": "supabase",
        "memberOf": "supabase",
        "functionName": "supabase.from.select.order.limit.maybeSingle",
        "fullMemberPath": "supabase.from.select.order.limit.maybeSingle",
        "methodChain": [
          "from",
          "select",
          "order",
          "limit",
          "maybeSingle"
        ],
        "isChainedCall": true
      },
      "dateObj.toLocaleDateString": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "dateObj",
        "functionName": "dateObj.toLocaleDateString",
        "fullMemberPath": "dateObj.toLocaleDateString",
        "methodChain": [
          "toLocaleDateString"
        ],
        "isChainedCall": true
      },
      "prev.map": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "prev",
        "functionName": "prev.map",
        "fullMemberPath": "prev.map",
        "methodChain": [
          "map"
        ],
        "isChainedCall": true
      },
      "supabase.from.upsert.select": {
        "source": "@/lib/supabaseClient",
        "type": "alias",
        "importedName": "supabase",
        "localName": "supabase",
        "memberOf": "supabase",
        "functionName": "supabase.from.upsert.select",
        "fullMemberPath": "supabase.from.upsert.select",
        "methodChain": [
          "from",
          "upsert",
          "select"
        ],
        "isChainedCall": true
      },
      "bankAccounts.find": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "bankAccounts",
        "functionName": "bankAccounts.find",
        "fullMemberPath": "bankAccounts.find",
        "methodChain": [
          "find"
        ],
        "isChainedCall": true
      },
      "Object.entries.map": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "Object",
        "functionName": "Object.entries.map",
        "fullMemberPath": "Object.entries.map",
        "methodChain": [
          "entries",
          "map"
        ],
        "isChainedCall": true
      },
      "accounts.map": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "accounts",
        "functionName": "accounts.map",
        "fullMemberPath": "accounts.map",
        "methodChain": [
          "map"
        ],
        "isChainedCall": true
      },
      "handleEditTableName": {
        "source": "local",
        "type": "local",
        "importedName": "handleEditTableName",
        "localName": "handleEditTableName"
      },
      "handleTableNameInputChange": {
        "source": "local",
        "type": "local",
        "importedName": "handleTableNameInputChange",
        "localName": "handleTableNameInputChange"
      },
      "handleCancelEditTableName": {
        "source": "local",
        "type": "local",
        "importedName": "handleCancelEditTableName",
        "localName": "handleCancelEditTableName"
      },
      "handleSaveTableName": {
        "source": "local",
        "type": "local",
        "importedName": "handleSaveTableName",
        "localName": "handleSaveTableName"
      },
      "account.replace": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "account",
        "functionName": "account.replace",
        "fullMemberPath": "account.replace",
        "methodChain": [
          "replace"
        ],
        "isChainedCall": true
      },
      "handleToggleAccountStatus": {
        "source": "local",
        "type": "local",
        "importedName": "handleToggleAccountStatus",
        "localName": "handleToggleAccountStatus"
      },
      "JSON.stringify": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "JSON",
        "functionName": "JSON.stringify",
        "fullMemberPath": "JSON.stringify",
        "methodChain": [
          "stringify"
        ],
        "isChainedCall": true
      }
    },
    "destructuredFunctions": {
      "bankAccounts": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "bankAccounts"
      },
      "setBankAccounts": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setBankAccounts"
      },
      "isInitialLoading": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "isInitialLoading"
      },
      "setIsInitialLoading": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setIsInitialLoading"
      },
      "currentUser": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "currentUser"
      },
      "setCurrentUser": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setCurrentUser"
      }
    }
  },
  "recurrent/page.tsx": {
    "defined": [
      "BillsPage",
      "fetchBills",
      "handleBillUpdate",
      "handleExpenseSubmit",
      "handleMonthChange",
      "handleSort",
      "handleTogglePaid",
      "nextMonth",
      "prevMonth"
    ],
    "called": [
      "JSON.stringify",
      "MONTHS.findIndex",
      "MONTHS.forEach",
      "MONTHS.slice.map",
      "MONTHS.toLowerCase.substring",
      "Object.entries.map",
      "React.useMemo",
      "aValue.localeCompare",
      "bValue.localeCompare",
      "bills.find",
      "bills.reduce",
      "console.error",
      "currentValue.toLocaleString",
      "fetchBills",
      "getMonth",
      "handleSort",
      "month.toLowerCase.substring",
      "newExpense.toLocaleString",
      "parseFloat",
      "parseInt",
      "prevBills.map",
      "relevantMonths.forEach",
      "setBills",
      "setCurrentMonth",
      "setCurrentMonthIndex",
      "setIsSubmitting",
      "setLoading",
      "setNewExpense",
      "setSelectedCountry",
      "setSortConfig",
      "setUpdating",
      "sort",
      "sortedBills.filter.map",
      "supabase.from.insert.select",
      "supabase.from.select",
      "supabase.from.update.eq",
      "toast.error",
      "toast.success",
      "total.toLocaleString",
      "useEffect",
      "useState",
      "values.includes"
    ],
    "both": [
      "fetchBills",
      "handleSort"
    ],
    "imports": {
      "useState": {
        "source": "react",
        "type": "npm",
        "importedName": "useState",
        "localName": "useState"
      },
      "useEffect": {
        "source": "react",
        "type": "npm",
        "importedName": "useEffect",
        "localName": "useEffect"
      },
      "React": {
        "source": "react",
        "type": "npm",
        "importedName": "default",
        "localName": "React"
      },
      "Table": {
        "source": "@/components/ui/table",
        "type": "alias",
        "importedName": "Table",
        "localName": "Table"
      },
      "TableBody": {
        "source": "@/components/ui/table",
        "type": "alias",
        "importedName": "TableBody",
        "localName": "TableBody"
      },
      "TableCell": {
        "source": "@/components/ui/table",
        "type": "alias",
        "importedName": "TableCell",
        "localName": "TableCell"
      },
      "TableHead": {
        "source": "@/components/ui/table",
        "type": "alias",
        "importedName": "TableHead",
        "localName": "TableHead"
      },
      "TableHeader": {
        "source": "@/components/ui/table",
        "type": "alias",
        "importedName": "TableHeader",
        "localName": "TableHeader"
      },
      "TableRow": {
        "source": "@/components/ui/table",
        "type": "alias",
        "importedName": "TableRow",
        "localName": "TableRow"
      },
      "ProtectedRoute": {
        "source": "@/components/protected-route",
        "type": "alias",
        "importedName": "default",
        "localName": "ProtectedRoute"
      },
      "BillCard": {
        "source": "../components/bill-card",
        "type": "relative",
        "importedName": "default",
        "localName": "BillCard"
      },
      "Bill": {
        "source": "../types/bill",
        "type": "relative",
        "importedName": "Bill",
        "localName": "Bill"
      },
      "supabase": {
        "source": "@/lib/supabaseClient",
        "type": "alias",
        "importedName": "supabase",
        "localName": "supabase"
      },
      "BillChart": {
        "source": "@/components/ui/bill-chart",
        "type": "alias",
        "importedName": "BillChart",
        "localName": "BillChart"
      },
      "Label": {
        "source": "../../components/ui/label",
        "type": "relative",
        "importedName": "Label",
        "localName": "Label"
      },
      "ToggleGroup": {
        "source": "@/components/ui/toggle-group",
        "type": "alias",
        "importedName": "ToggleGroup",
        "localName": "ToggleGroup"
      },
      "ToggleGroupItem": {
        "source": "@/components/ui/toggle-group",
        "type": "alias",
        "importedName": "ToggleGroupItem",
        "localName": "ToggleGroupItem"
      },
      "Button": {
        "source": "@/components/ui/button",
        "type": "alias",
        "importedName": "Button",
        "localName": "Button"
      },
      "Input": {
        "source": "@/components/ui/input",
        "type": "alias",
        "importedName": "Input",
        "localName": "Input"
      },
      "toast": {
        "source": "sonner",
        "type": "npm",
        "importedName": "toast",
        "localName": "toast"
      },
      "Select": {
        "source": "@/components/ui/select",
        "type": "alias",
        "importedName": "Select",
        "localName": "Select"
      },
      "SelectContent": {
        "source": "@/components/ui/select",
        "type": "alias",
        "importedName": "SelectContent",
        "localName": "SelectContent"
      },
      "SelectItem": {
        "source": "@/components/ui/select",
        "type": "alias",
        "importedName": "SelectItem",
        "localName": "SelectItem"
      },
      "SelectTrigger": {
        "source": "@/components/ui/select",
        "type": "alias",
        "importedName": "SelectTrigger",
        "localName": "SelectTrigger"
      },
      "SelectValue": {
        "source": "@/components/ui/select",
        "type": "alias",
        "importedName": "SelectValue",
        "localName": "SelectValue"
      },
      "Sheet": {
        "source": "@/components/ui/sheet",
        "type": "alias",
        "importedName": "Sheet",
        "localName": "Sheet"
      },
      "SheetContent": {
        "source": "@/components/ui/sheet",
        "type": "alias",
        "importedName": "SheetContent",
        "localName": "SheetContent"
      },
      "SheetDescription": {
        "source": "@/components/ui/sheet",
        "type": "alias",
        "importedName": "SheetDescription",
        "localName": "SheetDescription"
      },
      "SheetHeader": {
        "source": "@/components/ui/sheet",
        "type": "alias",
        "importedName": "SheetHeader",
        "localName": "SheetHeader"
      },
      "SheetTitle": {
        "source": "@/components/ui/sheet",
        "type": "alias",
        "importedName": "SheetTitle",
        "localName": "SheetTitle"
      },
      "SheetTrigger": {
        "source": "@/components/ui/sheet",
        "type": "alias",
        "importedName": "SheetTrigger",
        "localName": "SheetTrigger"
      },
      "SheetFooter": {
        "source": "@/components/ui/sheet",
        "type": "alias",
        "importedName": "SheetFooter",
        "localName": "SheetFooter"
      },
      "SheetClose": {
        "source": "@/components/ui/sheet",
        "type": "alias",
        "importedName": "SheetClose",
        "localName": "SheetClose"
      }
    },
    "calledWithImports": {
      "useState": {
        "source": "react",
        "type": "npm",
        "importedName": "useState",
        "localName": "useState"
      },
      "getMonth": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "unknown",
        "functionName": "getMonth",
        "fullMemberPath": "getMonth"
      },
      "supabase.from.select": {
        "source": "@/lib/supabaseClient",
        "type": "alias",
        "importedName": "supabase",
        "localName": "supabase",
        "memberOf": "supabase",
        "functionName": "supabase.from.select",
        "fullMemberPath": "supabase.from.select",
        "methodChain": [
          "from",
          "select"
        ],
        "isChainedCall": true
      },
      "setBills": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setBills"
      },
      "console.error": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "console",
        "functionName": "console.error",
        "fullMemberPath": "console.error",
        "methodChain": [
          "error"
        ],
        "isChainedCall": true
      },
      "JSON.stringify": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "JSON",
        "functionName": "JSON.stringify",
        "fullMemberPath": "JSON.stringify",
        "methodChain": [
          "stringify"
        ],
        "isChainedCall": true
      },
      "setLoading": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setLoading"
      },
      "setUpdating": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setUpdating"
      },
      "MONTHS.toLowerCase.substring": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "MONTHS",
        "functionName": "MONTHS.toLowerCase.substring",
        "fullMemberPath": "MONTHS.toLowerCase.substring",
        "methodChain": [
          "toLowerCase",
          "substring"
        ],
        "isChainedCall": true
      },
      "bills.find": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "bills",
        "functionName": "bills.find",
        "fullMemberPath": "bills.find",
        "methodChain": [
          "find"
        ],
        "isChainedCall": true
      },
      "prevBills.map": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "prevBills",
        "functionName": "prevBills.map",
        "fullMemberPath": "prevBills.map",
        "methodChain": [
          "map"
        ],
        "isChainedCall": true
      },
      "supabase.from.update.eq": {
        "source": "@/lib/supabaseClient",
        "type": "alias",
        "importedName": "supabase",
        "localName": "supabase",
        "memberOf": "supabase",
        "functionName": "supabase.from.update.eq",
        "fullMemberPath": "supabase.from.update.eq",
        "methodChain": [
          "from",
          "update",
          "eq"
        ],
        "isChainedCall": true
      },
      "toast.error": {
        "source": "sonner",
        "type": "npm",
        "importedName": "toast",
        "localName": "toast",
        "memberOf": "toast",
        "functionName": "toast.error",
        "fullMemberPath": "toast.error",
        "methodChain": [
          "error"
        ],
        "isChainedCall": true
      },
      "setIsSubmitting": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setIsSubmitting"
      },
      "MONTHS.forEach": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "MONTHS",
        "functionName": "MONTHS.forEach",
        "fullMemberPath": "MONTHS.forEach",
        "methodChain": [
          "forEach"
        ],
        "isChainedCall": true
      },
      "month.toLowerCase.substring": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "month",
        "functionName": "month.toLowerCase.substring",
        "fullMemberPath": "month.toLowerCase.substring",
        "methodChain": [
          "toLowerCase",
          "substring"
        ],
        "isChainedCall": true
      },
      "supabase.from.insert.select": {
        "source": "@/lib/supabaseClient",
        "type": "alias",
        "importedName": "supabase",
        "localName": "supabase",
        "memberOf": "supabase",
        "functionName": "supabase.from.insert.select",
        "fullMemberPath": "supabase.from.insert.select",
        "methodChain": [
          "from",
          "insert",
          "select"
        ],
        "isChainedCall": true
      },
      "toast.success": {
        "source": "sonner",
        "type": "npm",
        "importedName": "toast",
        "localName": "toast",
        "memberOf": "toast",
        "functionName": "toast.success",
        "fullMemberPath": "toast.success",
        "methodChain": [
          "success"
        ],
        "isChainedCall": true
      },
      "newExpense.toLocaleString": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "newExpense",
        "functionName": "newExpense.toLocaleString",
        "fullMemberPath": "newExpense.toLocaleString",
        "methodChain": [
          "toLocaleString"
        ],
        "isChainedCall": true
      },
      "setNewExpense": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setNewExpense"
      },
      "MONTHS.findIndex": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "MONTHS",
        "functionName": "MONTHS.findIndex",
        "fullMemberPath": "MONTHS.findIndex",
        "methodChain": [
          "findIndex"
        ],
        "isChainedCall": true
      },
      "setCurrentMonthIndex": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setCurrentMonthIndex"
      },
      "setCurrentMonth": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setCurrentMonth"
      },
      "useEffect": {
        "source": "react",
        "type": "npm",
        "importedName": "useEffect",
        "localName": "useEffect"
      },
      "fetchBills": {
        "source": "local",
        "type": "local",
        "importedName": "fetchBills",
        "localName": "fetchBills"
      },
      "bills.reduce": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "bills",
        "functionName": "bills.reduce",
        "fullMemberPath": "bills.reduce",
        "methodChain": [
          "reduce"
        ],
        "isChainedCall": true
      },
      "MONTHS.slice.map": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "MONTHS",
        "functionName": "MONTHS.slice.map",
        "fullMemberPath": "MONTHS.slice.map",
        "methodChain": [
          "slice",
          "map"
        ],
        "isChainedCall": true
      },
      "relevantMonths.forEach": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "relevantMonths",
        "functionName": "relevantMonths.forEach",
        "fullMemberPath": "relevantMonths.forEach",
        "methodChain": [
          "forEach"
        ],
        "isChainedCall": true
      },
      "React.useMemo": {
        "source": "react",
        "type": "npm",
        "importedName": "default",
        "localName": "React",
        "memberOf": "React",
        "functionName": "React.useMemo",
        "fullMemberPath": "React.useMemo",
        "methodChain": [
          "useMemo"
        ],
        "isChainedCall": true
      },
      "sort": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "unknown",
        "functionName": "sort",
        "fullMemberPath": "sort"
      },
      "aValue.localeCompare": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "aValue",
        "functionName": "aValue.localeCompare",
        "fullMemberPath": "aValue.localeCompare",
        "methodChain": [
          "localeCompare"
        ],
        "isChainedCall": true
      },
      "bValue.localeCompare": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "bValue",
        "functionName": "bValue.localeCompare",
        "fullMemberPath": "bValue.localeCompare",
        "methodChain": [
          "localeCompare"
        ],
        "isChainedCall": true
      },
      "setSortConfig": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setSortConfig"
      },
      "setSelectedCountry": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setSelectedCountry"
      },
      "values.includes": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "values",
        "functionName": "values.includes",
        "fullMemberPath": "values.includes",
        "methodChain": [
          "includes"
        ],
        "isChainedCall": true
      },
      "Object.entries.map": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "Object",
        "functionName": "Object.entries.map",
        "fullMemberPath": "Object.entries.map",
        "methodChain": [
          "entries",
          "map"
        ],
        "isChainedCall": true
      },
      "total.toLocaleString": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "total",
        "functionName": "total.toLocaleString",
        "fullMemberPath": "total.toLocaleString",
        "methodChain": [
          "toLocaleString"
        ],
        "isChainedCall": true
      },
      "handleSort": {
        "source": "local",
        "type": "local",
        "importedName": "handleSort",
        "localName": "handleSort"
      },
      "sortedBills.filter.map": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "sortedBills",
        "functionName": "sortedBills.filter.map",
        "fullMemberPath": "sortedBills.filter.map",
        "methodChain": [
          "filter",
          "map"
        ],
        "isChainedCall": true
      },
      "currentValue.toLocaleString": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "currentValue",
        "functionName": "currentValue.toLocaleString",
        "fullMemberPath": "currentValue.toLocaleString",
        "methodChain": [
          "toLocaleString"
        ],
        "isChainedCall": true
      },
      "parseInt": {
        "source": "unknown",
        "type": "unknown",
        "importedName": "parseInt",
        "localName": "parseInt"
      },
      "parseFloat": {
        "source": "unknown",
        "type": "unknown",
        "importedName": "parseFloat",
        "localName": "parseFloat"
      }
    },
    "destructuredFunctions": {
      "bills": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "bills"
      },
      "setBills": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setBills"
      },
      "loading": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "loading"
      },
      "setLoading": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setLoading"
      },
      "updating": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "updating"
      },
      "setUpdating": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setUpdating"
      },
      "currentMonth": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "currentMonth"
      },
      "setCurrentMonth": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setCurrentMonth"
      },
      "currentMonthIndex": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "currentMonthIndex"
      },
      "setCurrentMonthIndex": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setCurrentMonthIndex"
      },
      "selectedCountry": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "selectedCountry"
      },
      "setSelectedCountry": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setSelectedCountry"
      },
      "sortConfig": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "sortConfig"
      },
      "setSortConfig": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setSortConfig"
      },
      "newExpense": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "newExpense"
      },
      "setNewExpense": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setNewExpense"
      },
      "isSubmitting": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "isSubmitting"
      },
      "setIsSubmitting": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setIsSubmitting"
      }
    }
  },
  "inter-account/page.tsx": {
    "defined": [
      "Home",
      "fetchTransactions"
    ],
    "called": [
      "Object.entries.map",
      "bankInfo.join",
      "bankTransactions.reduce",
      "console.error",
      "data.filter",
      "data.map.filter",
      "fetchTransactions",
      "setBankInfo",
      "setTransactions",
      "supabase.from.select.eq",
      "toLocaleDateString",
      "uniqueBanks.forEach",
      "useAuth",
      "useEffect",
      "useState"
    ],
    "both": [
      "fetchTransactions"
    ],
    "imports": {
      "useEffect": {
        "source": "react",
        "type": "npm",
        "importedName": "useEffect",
        "localName": "useEffect"
      },
      "useState": {
        "source": "react",
        "type": "npm",
        "importedName": "useState",
        "localName": "useState"
      },
      "supabase": {
        "source": "../../lib/supabaseClient",
        "type": "relative",
        "importedName": "supabase",
        "localName": "supabase"
      },
      "useAuth": {
        "source": "../../context/AuthContext",
        "type": "relative",
        "importedName": "useAuth",
        "localName": "useAuth"
      },
      "Button": {
        "source": "@/components/ui/button",
        "type": "alias",
        "importedName": "Button",
        "localName": "Button"
      },
      "ProtectedRoute": {
        "source": "@/components/protected-route",
        "type": "alias",
        "importedName": "default",
        "localName": "ProtectedRoute"
      },
      "TransactionTable": {
        "source": "@/components/ui/transaction/TransactionTable",
        "type": "alias",
        "importedName": "default",
        "localName": "TransactionTable"
      },
      "UpdateAggregatedButton": {
        "source": "@/components/UpdateAggregatedButton",
        "type": "alias",
        "importedName": "default",
        "localName": "UpdateAggregatedButton"
      },
      "UpdateInterAggregatedButton": {
        "source": "@/components/UpdateInterAggregatedButton",
        "type": "alias",
        "importedName": "default",
        "localName": "UpdateInterAggregatedButton"
      },
      "Transaction": {
        "source": "@/types/transaction",
        "type": "alias",
        "importedName": "Transaction",
        "localName": "Transaction"
      },
      "Info": {
        "source": "lucide-react",
        "type": "npm",
        "importedName": "Info",
        "localName": "Info"
      }
    },
    "calledWithImports": {
      "useAuth": {
        "source": "../../context/AuthContext",
        "type": "relative",
        "importedName": "useAuth",
        "localName": "useAuth"
      },
      "useState": {
        "source": "react",
        "type": "npm",
        "importedName": "useState",
        "localName": "useState"
      },
      "useEffect": {
        "source": "react",
        "type": "npm",
        "importedName": "useEffect",
        "localName": "useEffect"
      },
      "supabase.from.select.eq": {
        "source": "../../lib/supabaseClient",
        "type": "relative",
        "importedName": "supabase",
        "localName": "supabase",
        "memberOf": "supabase",
        "functionName": "supabase.from.select.eq",
        "fullMemberPath": "supabase.from.select.eq",
        "methodChain": [
          "from",
          "select",
          "eq"
        ],
        "isChainedCall": true
      },
      "console.error": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "console",
        "functionName": "console.error",
        "fullMemberPath": "console.error",
        "methodChain": [
          "error"
        ],
        "isChainedCall": true
      },
      "setTransactions": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setTransactions"
      },
      "data.map.filter": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "data",
        "functionName": "data.map.filter",
        "fullMemberPath": "data.map.filter",
        "methodChain": [
          "map",
          "filter"
        ],
        "isChainedCall": true
      },
      "uniqueBanks.forEach": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "uniqueBanks",
        "functionName": "uniqueBanks.forEach",
        "fullMemberPath": "uniqueBanks.forEach",
        "methodChain": [
          "forEach"
        ],
        "isChainedCall": true
      },
      "data.filter": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "data",
        "functionName": "data.filter",
        "fullMemberPath": "data.filter",
        "methodChain": [
          "filter"
        ],
        "isChainedCall": true
      },
      "bankTransactions.reduce": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "bankTransactions",
        "functionName": "bankTransactions.reduce",
        "fullMemberPath": "bankTransactions.reduce",
        "methodChain": [
          "reduce"
        ],
        "isChainedCall": true
      },
      "setBankInfo": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setBankInfo"
      },
      "fetchTransactions": {
        "source": "local",
        "type": "local",
        "importedName": "fetchTransactions",
        "localName": "fetchTransactions"
      },
      "bankInfo.join": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "bankInfo",
        "functionName": "bankInfo.join",
        "fullMemberPath": "bankInfo.join",
        "methodChain": [
          "join"
        ],
        "isChainedCall": true
      },
      "Object.entries.map": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "Object",
        "functionName": "Object.entries.map",
        "fullMemberPath": "Object.entries.map",
        "methodChain": [
          "entries",
          "map"
        ],
        "isChainedCall": true
      },
      "toLocaleDateString": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "unknown",
        "functionName": "toLocaleDateString",
        "fullMemberPath": "toLocaleDateString"
      }
    },
    "destructuredFunctions": {
      "transactions": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "transactions"
      },
      "setTransactions": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setTransactions"
      },
      "bankInfo": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "bankInfo"
      },
      "setBankInfo": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setBankInfo"
      }
    }
  },
  "inter/page.tsx": {
    "defined": [
      "Home",
      "fetchTransactions"
    ],
    "called": [
      "console.error",
      "fetchTransactions",
      "setTransactions",
      "supabase.from.select.eq",
      "useAuth",
      "useEffect",
      "useState",
      "window.open"
    ],
    "both": [
      "fetchTransactions"
    ],
    "imports": {
      "useEffect": {
        "source": "react",
        "type": "npm",
        "importedName": "useEffect",
        "localName": "useEffect"
      },
      "useState": {
        "source": "react",
        "type": "npm",
        "importedName": "useState",
        "localName": "useState"
      },
      "supabase": {
        "source": "../../lib/supabaseClient",
        "type": "relative",
        "importedName": "supabase",
        "localName": "supabase"
      },
      "useAuth": {
        "source": "../../context/AuthContext",
        "type": "relative",
        "importedName": "useAuth",
        "localName": "useAuth"
      },
      "Button": {
        "source": "@/components/ui/button",
        "type": "alias",
        "importedName": "Button",
        "localName": "Button"
      },
      "ProtectedRoute": {
        "source": "@/components/protected-route",
        "type": "alias",
        "importedName": "default",
        "localName": "ProtectedRoute"
      },
      "TransactionTable": {
        "source": "@/components/ui/transaction/TransactionTable",
        "type": "alias",
        "importedName": "default",
        "localName": "TransactionTable"
      },
      "Transaction": {
        "source": "@/types/transaction",
        "type": "alias",
        "importedName": "Transaction",
        "localName": "Transaction"
      }
    },
    "calledWithImports": {
      "useAuth": {
        "source": "../../context/AuthContext",
        "type": "relative",
        "importedName": "useAuth",
        "localName": "useAuth"
      },
      "useState": {
        "source": "react",
        "type": "npm",
        "importedName": "useState",
        "localName": "useState"
      },
      "useEffect": {
        "source": "react",
        "type": "npm",
        "importedName": "useEffect",
        "localName": "useEffect"
      },
      "supabase.from.select.eq": {
        "source": "../../lib/supabaseClient",
        "type": "relative",
        "importedName": "supabase",
        "localName": "supabase",
        "memberOf": "supabase",
        "functionName": "supabase.from.select.eq",
        "fullMemberPath": "supabase.from.select.eq",
        "methodChain": [
          "from",
          "select",
          "eq"
        ],
        "isChainedCall": true
      },
      "console.error": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "console",
        "functionName": "console.error",
        "fullMemberPath": "console.error",
        "methodChain": [
          "error"
        ],
        "isChainedCall": true
      },
      "setTransactions": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setTransactions"
      },
      "fetchTransactions": {
        "source": "local",
        "type": "local",
        "importedName": "fetchTransactions",
        "localName": "fetchTransactions"
      },
      "window.open": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "window",
        "functionName": "window.open",
        "fullMemberPath": "window.open",
        "methodChain": [
          "open"
        ],
        "isChainedCall": true
      }
    },
    "destructuredFunctions": {
      "transactions": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "transactions"
      },
      "setTransactions": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setTransactions"
      }
    }
  },
  "email-merge/page.tsx": {
    "defined": [
      "EmailMergePage",
      "formatDate",
      "formatFileSize",
      "handleFileSelect",
      "handleMerge"
    ],
    "called": [
      "Array.isArray",
      "Date.now",
      "JSON.parse",
      "JSON.stringify",
      "Math.floor",
      "Math.log",
      "Math.pow",
      "URL.createObjectURL",
      "URL.revokeObjectURL",
      "a.click",
      "document.appendChild",
      "document.createElement",
      "document.removeChild",
      "emailFiles.push",
      "file.endsWith",
      "file.text",
      "formatDate",
      "formatFileSize",
      "getTime",
      "mergeResult.map",
      "merged.dateRange.split",
      "merged.push",
      "parseFloat",
      "seenIds.add",
      "seenIds.has",
      "selectedFiles.map",
      "setError",
      "setIsProcessing",
      "setMergeResult",
      "setSelectedFiles",
      "sort",
      "toFixed",
      "toISOString",
      "toLocaleDateString",
      "useRef",
      "useState"
    ],
    "both": [
      "formatDate",
      "formatFileSize"
    ],
    "imports": {
      "useState": {
        "source": "react",
        "type": "npm",
        "importedName": "useState",
        "localName": "useState"
      },
      "useRef": {
        "source": "react",
        "type": "npm",
        "importedName": "useRef",
        "localName": "useRef"
      },
      "Button": {
        "source": "@/components/ui/button",
        "type": "alias",
        "importedName": "Button",
        "localName": "Button"
      },
      "Card": {
        "source": "@/components/ui/card",
        "type": "alias",
        "importedName": "Card",
        "localName": "Card"
      },
      "CardContent": {
        "source": "@/components/ui/card",
        "type": "alias",
        "importedName": "CardContent",
        "localName": "CardContent"
      },
      "CardDescription": {
        "source": "@/components/ui/card",
        "type": "alias",
        "importedName": "CardDescription",
        "localName": "CardDescription"
      },
      "CardHeader": {
        "source": "@/components/ui/card",
        "type": "alias",
        "importedName": "CardHeader",
        "localName": "CardHeader"
      },
      "CardTitle": {
        "source": "@/components/ui/card",
        "type": "alias",
        "importedName": "CardTitle",
        "localName": "CardTitle"
      },
      "Badge": {
        "source": "@/components/ui/badge",
        "type": "alias",
        "importedName": "Badge",
        "localName": "Badge"
      },
      "Separator": {
        "source": "@/components/ui/separator",
        "type": "alias",
        "importedName": "Separator",
        "localName": "Separator"
      },
      "Upload": {
        "source": "lucide-react",
        "type": "npm",
        "importedName": "Upload",
        "localName": "Upload"
      },
      "FileText": {
        "source": "lucide-react",
        "type": "npm",
        "importedName": "FileText",
        "localName": "FileText"
      },
      "CheckCircle": {
        "source": "lucide-react",
        "type": "npm",
        "importedName": "CheckCircle",
        "localName": "CheckCircle"
      },
      "AlertCircle": {
        "source": "lucide-react",
        "type": "npm",
        "importedName": "AlertCircle",
        "localName": "AlertCircle"
      },
      "Download": {
        "source": "lucide-react",
        "type": "npm",
        "importedName": "Download",
        "localName": "Download"
      }
    },
    "calledWithImports": {
      "useState": {
        "source": "react",
        "type": "npm",
        "importedName": "useState",
        "localName": "useState"
      },
      "useRef": {
        "source": "react",
        "type": "npm",
        "importedName": "useRef",
        "localName": "useRef"
      },
      "setError": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setError"
      },
      "file.endsWith": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "file",
        "functionName": "file.endsWith",
        "fullMemberPath": "file.endsWith",
        "methodChain": [
          "endsWith"
        ],
        "isChainedCall": true
      },
      "file.text": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "file",
        "functionName": "file.text",
        "fullMemberPath": "file.text",
        "methodChain": [
          "text"
        ],
        "isChainedCall": true
      },
      "JSON.parse": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "JSON",
        "functionName": "JSON.parse",
        "fullMemberPath": "JSON.parse",
        "methodChain": [
          "parse"
        ],
        "isChainedCall": true
      },
      "emailFiles.push": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "emailFiles",
        "functionName": "emailFiles.push",
        "fullMemberPath": "emailFiles.push",
        "methodChain": [
          "push"
        ],
        "isChainedCall": true
      },
      "setSelectedFiles": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setSelectedFiles"
      },
      "setIsProcessing": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setIsProcessing"
      },
      "Date.now": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "Date",
        "functionName": "Date.now",
        "fullMemberPath": "Date.now",
        "methodChain": [
          "now"
        ],
        "isChainedCall": true
      },
      "sort": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "unknown",
        "functionName": "sort",
        "fullMemberPath": "sort"
      },
      "getTime": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "unknown",
        "functionName": "getTime",
        "fullMemberPath": "getTime"
      },
      "toISOString": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "unknown",
        "functionName": "toISOString",
        "fullMemberPath": "toISOString"
      },
      "Array.isArray": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "Array",
        "functionName": "Array.isArray",
        "fullMemberPath": "Array.isArray",
        "methodChain": [
          "isArray"
        ],
        "isChainedCall": true
      },
      "merged.push": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "merged",
        "functionName": "merged.push",
        "fullMemberPath": "merged.push",
        "methodChain": [
          "push"
        ],
        "isChainedCall": true
      },
      "seenIds.has": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "seenIds",
        "functionName": "seenIds.has",
        "fullMemberPath": "seenIds.has",
        "methodChain": [
          "has"
        ],
        "isChainedCall": true
      },
      "seenIds.add": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "seenIds",
        "functionName": "seenIds.add",
        "fullMemberPath": "seenIds.add",
        "methodChain": [
          "add"
        ],
        "isChainedCall": true
      },
      "JSON.stringify": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "JSON",
        "functionName": "JSON.stringify",
        "fullMemberPath": "JSON.stringify",
        "methodChain": [
          "stringify"
        ],
        "isChainedCall": true
      },
      "URL.createObjectURL": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "URL",
        "functionName": "URL.createObjectURL",
        "fullMemberPath": "URL.createObjectURL",
        "methodChain": [
          "createObjectURL"
        ],
        "isChainedCall": true
      },
      "merged.dateRange.split": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "merged",
        "functionName": "merged.dateRange.split",
        "fullMemberPath": "merged.dateRange.split",
        "methodChain": [
          "dateRange",
          "split"
        ],
        "isChainedCall": true
      },
      "document.createElement": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "document",
        "functionName": "document.createElement",
        "fullMemberPath": "document.createElement",
        "methodChain": [
          "createElement"
        ],
        "isChainedCall": true
      },
      "document.appendChild": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "document",
        "functionName": "document.appendChild",
        "fullMemberPath": "document.appendChild",
        "methodChain": [
          "appendChild"
        ],
        "isChainedCall": true
      },
      "a.click": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "a",
        "functionName": "a.click",
        "fullMemberPath": "a.click",
        "methodChain": [
          "click"
        ],
        "isChainedCall": true
      },
      "document.removeChild": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "document",
        "functionName": "document.removeChild",
        "fullMemberPath": "document.removeChild",
        "methodChain": [
          "removeChild"
        ],
        "isChainedCall": true
      },
      "URL.revokeObjectURL": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "URL",
        "functionName": "URL.revokeObjectURL",
        "fullMemberPath": "URL.revokeObjectURL",
        "methodChain": [
          "revokeObjectURL"
        ],
        "isChainedCall": true
      },
      "setMergeResult": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setMergeResult"
      },
      "selectedFiles.map": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "selectedFiles",
        "functionName": "selectedFiles.map",
        "fullMemberPath": "selectedFiles.map",
        "methodChain": [
          "map"
        ],
        "isChainedCall": true
      },
      "Math.floor": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "Math",
        "functionName": "Math.floor",
        "fullMemberPath": "Math.floor",
        "methodChain": [
          "floor"
        ],
        "isChainedCall": true
      },
      "Math.log": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "Math",
        "functionName": "Math.log",
        "fullMemberPath": "Math.log",
        "methodChain": [
          "log"
        ],
        "isChainedCall": true
      },
      "parseFloat": {
        "source": "unknown",
        "type": "unknown",
        "importedName": "parseFloat",
        "localName": "parseFloat"
      },
      "toFixed": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "unknown",
        "functionName": "toFixed",
        "fullMemberPath": "toFixed"
      },
      "Math.pow": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "Math",
        "functionName": "Math.pow",
        "fullMemberPath": "Math.pow",
        "methodChain": [
          "pow"
        ],
        "isChainedCall": true
      },
      "toLocaleDateString": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "unknown",
        "functionName": "toLocaleDateString",
        "fullMemberPath": "toLocaleDateString"
      },
      "formatDate": {
        "source": "local",
        "type": "local",
        "importedName": "formatDate",
        "localName": "formatDate"
      },
      "formatFileSize": {
        "source": "local",
        "type": "local",
        "importedName": "formatFileSize",
        "localName": "formatFileSize"
      },
      "mergeResult.map": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "mergeResult",
        "functionName": "mergeResult.map",
        "fullMemberPath": "mergeResult.map",
        "methodChain": [
          "map"
        ],
        "isChainedCall": true
      }
    },
    "destructuredFunctions": {
      "selectedFiles": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "selectedFiles"
      },
      "setSelectedFiles": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setSelectedFiles"
      },
      "isProcessing": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "isProcessing"
      },
      "setIsProcessing": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setIsProcessing"
      },
      "mergeResult": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "mergeResult"
      },
      "setMergeResult": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setMergeResult"
      },
      "error": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "error"
      },
      "setError": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setError"
      }
    }
  },
  "handelsbanken/page.tsx": {
    "defined": [
      "Home",
      "fetchTransactions"
    ],
    "called": [
      "console.error",
      "fetchTransactions",
      "setTransactions",
      "supabase.from.select.eq",
      "useAuth",
      "useEffect",
      "useState"
    ],
    "both": [
      "fetchTransactions"
    ],
    "imports": {
      "useEffect": {
        "source": "react",
        "type": "npm",
        "importedName": "useEffect",
        "localName": "useEffect"
      },
      "useState": {
        "source": "react",
        "type": "npm",
        "importedName": "useState",
        "localName": "useState"
      },
      "supabase": {
        "source": "../../lib/supabaseClient",
        "type": "relative",
        "importedName": "supabase",
        "localName": "supabase"
      },
      "useAuth": {
        "source": "../../context/AuthContext",
        "type": "relative",
        "importedName": "useAuth",
        "localName": "useAuth"
      },
      "Button": {
        "source": "@/components/ui/button",
        "type": "alias",
        "importedName": "Button",
        "localName": "Button"
      },
      "ProtectedRoute": {
        "source": "@/components/protected-route",
        "type": "alias",
        "importedName": "default",
        "localName": "ProtectedRoute"
      },
      "TransactionTable": {
        "source": "@/components/ui/transaction/TransactionTable",
        "type": "alias",
        "importedName": "default",
        "localName": "TransactionTable"
      },
      "UpdateAggregatedButton": {
        "source": "@/components/UpdateAggregatedButton",
        "type": "alias",
        "importedName": "default",
        "localName": "UpdateAggregatedButton"
      },
      "Transaction": {
        "source": "@/types/transaction",
        "type": "alias",
        "importedName": "Transaction",
        "localName": "Transaction"
      }
    },
    "calledWithImports": {
      "useAuth": {
        "source": "../../context/AuthContext",
        "type": "relative",
        "importedName": "useAuth",
        "localName": "useAuth"
      },
      "useState": {
        "source": "react",
        "type": "npm",
        "importedName": "useState",
        "localName": "useState"
      },
      "useEffect": {
        "source": "react",
        "type": "npm",
        "importedName": "useEffect",
        "localName": "useEffect"
      },
      "supabase.from.select.eq": {
        "source": "../../lib/supabaseClient",
        "type": "relative",
        "importedName": "supabase",
        "localName": "supabase",
        "memberOf": "supabase",
        "functionName": "supabase.from.select.eq",
        "fullMemberPath": "supabase.from.select.eq",
        "methodChain": [
          "from",
          "select",
          "eq"
        ],
        "isChainedCall": true
      },
      "console.error": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "console",
        "functionName": "console.error",
        "fullMemberPath": "console.error",
        "methodChain": [
          "error"
        ],
        "isChainedCall": true
      },
      "setTransactions": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setTransactions"
      },
      "fetchTransactions": {
        "source": "local",
        "type": "local",
        "importedName": "fetchTransactions",
        "localName": "fetchTransactions"
      }
    },
    "destructuredFunctions": {
      "transactions": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "transactions"
      },
      "setTransactions": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setTransactions"
      }
    }
  },
  "email-client/page.tsx": {
    "defined": [
      "EmailClient",
      "clearAuthData",
      "clearCache",
      "clearUploadedData",
      "delay",
      "downloadJsonFile",
      "exportEmailsForDateRange",
      "fetchEmails",
      "formatDate",
      "formatGmailDate",
      "getDateRangeInfo",
      "getEmailsToShow",
      "getHeader",
      "getOrganizationIcon",
      "getUserInfo",
      "handleFileUpload",
      "handleSignIn",
      "handleSignOut",
      "loadAuthData",
      "loadCachedEmails",
      "safeSetLocalStorage",
      "saveAuthData",
      "saveCachedEmails",
      "showFewerEmails",
      "showMoreEmails",
      "updateStorageInfo"
    ],
    "called": [
      "Array.isArray",
      "Date.now",
      "JSON.parse",
      "JSON.stringify",
      "Math.ceil",
      "Math.floor",
      "Math.max",
      "Math.min",
      "Math.pow",
      "Math.round",
      "Math.sqrt",
      "Object.entries.filter",
      "Object.entries.forEach",
      "Object.entries.map.sort.slice",
      "Object.entries.sort",
      "Object.entries.sort.slice.map",
      "Object.keys",
      "Object.keys.forEach",
      "Object.values",
      "Promise.all",
      "URL.createObjectURL",
      "URL.revokeObjectURL",
      "ageInMinutes.toFixed",
      "allEmailResults.filter",
      "allEmailResults.map",
      "allEmailResults.push",
      "batch.map",
      "batchResults.filter",
      "cacheAge.toLocaleString",
      "cacheTimestamp.getTime",
      "cartaoRicoFaturaEmails.slice.map",
      "checkExistingAuth",
      "clearAuthData",
      "clearCache",
      "clearUploadedData",
      "console.error",
      "console.log",
      "console.warn",
      "currentWeekEnd.getDate",
      "currentWeekEnd.setDate",
      "currentWeekEnd.setTime",
      "currentWeekEnd.toLocaleDateString",
      "currentWeekStart.getDate",
      "currentWeekStart.setDate",
      "currentWeekStart.toLocaleDateString",
      "d.getTime",
      "dailyCounts.reduce",
      "data.toLowerCase.includes",
      "date.getDate.toString.padStart",
      "date.getFullYear",
      "date.getHours",
      "date.getMonth",
      "date.getTime",
      "date.toISOString.split",
      "date.toLocaleDateString",
      "date.toLocaleString",
      "dateA.getTime",
      "dateB.getTime",
      "delay",
      "details.map",
      "dinFakturaEmails.slice.map",
      "document.appendChild",
      "document.createElement",
      "document.getElementById",
      "document.removeChild",
      "downloadJsonFile",
      "email.payload.filter",
      "email.payload.filter.slice",
      "email.payload.slice",
      "email.substring",
      "email.toLowerCase",
      "emailLower.includes",
      "emails.filter",
      "emails.forEach",
      "emails.map",
      "emails.map.filter",
      "emails.reduce",
      "emailsData.map",
      "emailsData.slice.map",
      "endDateObj.getTime",
      "expandedEmails.has",
      "faturaCartaoEmails.slice.map",
      "fetch",
      "fetchDuration.toFixed",
      "fetchEmails",
      "file.text",
      "formatDate",
      "formatGmailDate",
      "from.toLowerCase.includes",
      "fromHeader.toLowerCase",
      "getDateRangeInfo",
      "getEmailsToShow",
      "getFullYear",
      "getHeader",
      "getOrganizationIcon",
      "getUserInfo",
      "h.toLowerCase",
      "headers.find",
      "includes",
      "initializeGapi",
      "institution.toLowerCase",
      "institutionGroups.push",
      "institutionGroups.sort",
      "institutionSenders.map",
      "institutionSenders.reduce",
      "isNaN",
      "jsonData.map",
      "link.click",
      "loadAuthData",
      "loadCachedEmails",
      "localStorage.getItem",
      "localStorage.removeItem",
      "localStorage.setItem",
      "mean.toFixed",
      "minimalEmails.slice.map",
      "name.toLowerCase",
      "navigator.estimate",
      "newSet.add",
      "newSet.delete",
      "newSet.has",
      "newest.getTime",
      "newest.toLocaleDateString",
      "now.getTime",
      "oldest.getTime",
      "oldest.toLocaleDateString",
      "org.toLowerCase",
      "orgLower.includes",
      "organization.toLowerCase",
      "organizationEmails.filter",
      "organizationEmails.slice.map",
      "originalUploadedEmails.filter",
      "otherAmexEmails.slice.map",
      "otherInterEmails.slice.map",
      "otherRicoEmails.slice.map",
      "outlierDays.toString",
      "outlierThreshold.toFixed",
      "performance.now",
      "reject",
      "resolve",
      "response.json",
      "response.result.slice",
      "safeSetLocalStorage",
      "saveAuthData",
      "saveCachedEmails",
      "selectedSenders.every",
      "selectedSenders.join",
      "selectedSenders.map",
      "selectedSenders.some",
      "sender.match",
      "sender.toLowerCase",
      "sender.toLowerCase.includes",
      "senderCountsArray.reduce",
      "senderLower.includes",
      "setCacheAge",
      "setDataSource",
      "setEmails",
      "setError",
      "setExpandedEmails",
      "setExportEndDate",
      "setExportProgress",
      "setExportStartDate",
      "setFetchTime",
      "setInstitutionEmailCounts",
      "setIsCheckingAuth",
      "setIsExporting",
      "setIsLoadingFromCache",
      "setIsProcessingUpload",
      "setIsSignedIn",
      "setLoading",
      "setOriginalUploadedEmails",
      "setShowAllSenders",
      "setShowAllUploadSenders",
      "setStorageInfo",
      "setSuccess",
      "setTimeout",
      "setUploadedFile",
      "setUserInfo",
      "showFewerEmails",
      "showMoreEmails",
      "sizeInMB.toFixed",
      "stdDev.toFixed",
      "subject.toLowerCase.includes",
      "toDateString",
      "toFixed",
      "toISOString",
      "toLocaleDateString",
      "toString.padStart",
      "toggleEmailExpansion",
      "tokenClient.requestAccessToken",
      "topSender.substring",
      "transformedEmails.filter",
      "trim.replace",
      "ungroupedSenders.push",
      "ungroupedSenders.slice.map",
      "ungroupedSenders.sort",
      "unusualHourPercentage.toFixed",
      "unusualHours.reduce",
      "updateStorageInfo",
      "useCallback",
      "useEffect",
      "useMemo",
      "useState",
      "validDates.map",
      "week.getTime",
      "week.toISOString",
      "weeklyEmailResults.filter",
      "weeklyEmailResults.push",
      "weeklyIntervals.map",
      "weeklyIntervals.push",
      "weeklyMessages.slice",
      "window.gapi.client.gmail.getProfile",
      "window.gapi.client.gmail.users.get",
      "window.gapi.client.gmail.users.list",
      "window.gapi.getToken",
      "window.gapi.init",
      "window.gapi.setToken",
      "window.google.accounts.initTokenClient",
      "window.google.accounts.revoke",
      "window.load"
    ],
    "both": [
      "clearAuthData",
      "clearCache",
      "clearUploadedData",
      "delay",
      "downloadJsonFile",
      "fetchEmails",
      "formatDate",
      "formatGmailDate",
      "getDateRangeInfo",
      "getEmailsToShow",
      "getHeader",
      "getOrganizationIcon",
      "getUserInfo",
      "loadAuthData",
      "loadCachedEmails",
      "safeSetLocalStorage",
      "saveAuthData",
      "saveCachedEmails",
      "showFewerEmails",
      "showMoreEmails",
      "updateStorageInfo"
    ],
    "imports": {
      "React": {
        "source": "react",
        "type": "npm",
        "importedName": "default",
        "localName": "React"
      },
      "useState": {
        "source": "react",
        "type": "npm",
        "importedName": "useState",
        "localName": "useState"
      },
      "useEffect": {
        "source": "react",
        "type": "npm",
        "importedName": "useEffect",
        "localName": "useEffect"
      },
      "useMemo": {
        "source": "react",
        "type": "npm",
        "importedName": "useMemo",
        "localName": "useMemo"
      },
      "useCallback": {
        "source": "react",
        "type": "npm",
        "importedName": "useCallback",
        "localName": "useCallback"
      },
      "Image": {
        "source": "next/image",
        "type": "npm",
        "importedName": "default",
        "localName": "Image"
      },
      "Button": {
        "source": "@/components/ui/button",
        "type": "alias",
        "importedName": "Button",
        "localName": "Button"
      },
      "Card": {
        "source": "@/components/ui/card",
        "type": "alias",
        "importedName": "Card",
        "localName": "Card"
      },
      "CardContent": {
        "source": "@/components/ui/card",
        "type": "alias",
        "importedName": "CardContent",
        "localName": "CardContent"
      },
      "CardDescription": {
        "source": "@/components/ui/card",
        "type": "alias",
        "importedName": "CardDescription",
        "localName": "CardDescription"
      },
      "CardHeader": {
        "source": "@/components/ui/card",
        "type": "alias",
        "importedName": "CardHeader",
        "localName": "CardHeader"
      },
      "CardTitle": {
        "source": "@/components/ui/card",
        "type": "alias",
        "importedName": "CardTitle",
        "localName": "CardTitle"
      },
      "Badge": {
        "source": "@/components/ui/badge",
        "type": "alias",
        "importedName": "Badge",
        "localName": "Badge"
      },
      "Input": {
        "source": "@/components/ui/input",
        "type": "alias",
        "importedName": "Input",
        "localName": "Input"
      },
      "Progress": {
        "source": "@/components/ui/progress",
        "type": "alias",
        "importedName": "Progress",
        "localName": "Progress"
      },
      "Loader2": {
        "source": "lucide-react",
        "type": "npm",
        "importedName": "Loader2",
        "localName": "Loader2"
      },
      "Mail": {
        "source": "lucide-react",
        "type": "npm",
        "importedName": "Mail",
        "localName": "Mail"
      },
      "User": {
        "source": "lucide-react",
        "type": "npm",
        "importedName": "User",
        "localName": "User"
      },
      "Users": {
        "source": "lucide-react",
        "type": "npm",
        "importedName": "Users",
        "localName": "Users"
      },
      "Calendar": {
        "source": "lucide-react",
        "type": "npm",
        "importedName": "Calendar",
        "localName": "Calendar"
      },
      "AlertCircle": {
        "source": "lucide-react",
        "type": "npm",
        "importedName": "AlertCircle",
        "localName": "AlertCircle"
      },
      "Filter": {
        "source": "lucide-react",
        "type": "npm",
        "importedName": "Filter",
        "localName": "Filter"
      },
      "BarChart3": {
        "source": "lucide-react",
        "type": "npm",
        "importedName": "BarChart3",
        "localName": "BarChart3"
      },
      "TrendingUp": {
        "source": "lucide-react",
        "type": "npm",
        "importedName": "TrendingUp",
        "localName": "TrendingUp"
      },
      "Building2": {
        "source": "lucide-react",
        "type": "npm",
        "importedName": "Building2",
        "localName": "Building2"
      },
      "CreditCard": {
        "source": "lucide-react",
        "type": "npm",
        "importedName": "CreditCard",
        "localName": "CreditCard"
      },
      "Banknote": {
        "source": "lucide-react",
        "type": "npm",
        "importedName": "Banknote",
        "localName": "Banknote"
      },
      "Download": {
        "source": "lucide-react",
        "type": "npm",
        "importedName": "Download",
        "localName": "Download"
      },
      "Upload": {
        "source": "lucide-react",
        "type": "npm",
        "importedName": "Upload",
        "localName": "Upload"
      },
      "FileText": {
        "source": "lucide-react",
        "type": "npm",
        "importedName": "FileText",
        "localName": "FileText"
      },
      "X": {
        "source": "lucide-react",
        "type": "npm",
        "importedName": "X",
        "localName": "X"
      },
      "ChartContainer": {
        "source": "@/components/ui/chart",
        "type": "alias",
        "importedName": "ChartContainer",
        "localName": "ChartContainer"
      },
      "ChartTooltip": {
        "source": "@/components/ui/chart",
        "type": "alias",
        "importedName": "ChartTooltip",
        "localName": "ChartTooltip"
      },
      "ChartTooltipContent": {
        "source": "@/components/ui/chart",
        "type": "alias",
        "importedName": "ChartTooltipContent",
        "localName": "ChartTooltipContent"
      },
      "BarChart": {
        "source": "recharts",
        "type": "npm",
        "importedName": "BarChart",
        "localName": "BarChart"
      },
      "Bar": {
        "source": "recharts",
        "type": "npm",
        "importedName": "Bar",
        "localName": "Bar"
      },
      "XAxis": {
        "source": "recharts",
        "type": "npm",
        "importedName": "XAxis",
        "localName": "XAxis"
      },
      "YAxis": {
        "source": "recharts",
        "type": "npm",
        "importedName": "YAxis",
        "localName": "YAxis"
      },
      "ResponsiveContainer": {
        "source": "recharts",
        "type": "npm",
        "importedName": "ResponsiveContainer",
        "localName": "ResponsiveContainer"
      },
      "HoverCard": {
        "source": "@/components/ui/hover-card",
        "type": "alias",
        "importedName": "HoverCard",
        "localName": "HoverCard"
      },
      "HoverCardContent": {
        "source": "@/components/ui/hover-card",
        "type": "alias",
        "importedName": "HoverCardContent",
        "localName": "HoverCardContent"
      },
      "HoverCardTrigger": {
        "source": "@/components/ui/hover-card",
        "type": "alias",
        "importedName": "HoverCardTrigger",
        "localName": "HoverCardTrigger"
      }
    },
    "calledWithImports": {
      "useState": {
        "source": "react",
        "type": "npm",
        "importedName": "useState",
        "localName": "useState"
      },
      "useEffect": {
        "source": "react",
        "type": "npm",
        "importedName": "useEffect",
        "localName": "useEffect"
      },
      "setError": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setError"
      },
      "localStorage.setItem": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "localStorage",
        "functionName": "localStorage.setItem",
        "fullMemberPath": "localStorage.setItem",
        "methodChain": [
          "setItem"
        ],
        "isChainedCall": true
      },
      "console.warn": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "console",
        "functionName": "console.warn",
        "fullMemberPath": "console.warn",
        "methodChain": [
          "warn"
        ],
        "isChainedCall": true
      },
      "console.error": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "console",
        "functionName": "console.error",
        "fullMemberPath": "console.error",
        "methodChain": [
          "error"
        ],
        "isChainedCall": true
      },
      "initializeGapi": {
        "source": "unknown",
        "type": "unknown",
        "importedName": "initializeGapi",
        "localName": "initializeGapi"
      },
      "loadCachedEmails": {
        "source": "local",
        "type": "local",
        "importedName": "loadCachedEmails",
        "localName": "loadCachedEmails"
      },
      "updateStorageInfo": {
        "source": "local",
        "type": "local",
        "importedName": "updateStorageInfo",
        "localName": "updateStorageInfo"
      },
      "checkExistingAuth": {
        "source": "unknown",
        "type": "unknown",
        "importedName": "checkExistingAuth",
        "localName": "checkExistingAuth"
      },
      "useCallback": {
        "source": "react",
        "type": "npm",
        "importedName": "useCallback",
        "localName": "useCallback"
      },
      "console.log": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "console",
        "functionName": "console.log",
        "fullMemberPath": "console.log",
        "methodChain": [
          "log"
        ],
        "isChainedCall": true
      },
      "document.getElementById": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "document",
        "functionName": "document.getElementById",
        "fullMemberPath": "document.getElementById",
        "methodChain": [
          "getElementById"
        ],
        "isChainedCall": true
      },
      "document.createElement": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "document",
        "functionName": "document.createElement",
        "fullMemberPath": "document.createElement",
        "methodChain": [
          "createElement"
        ],
        "isChainedCall": true
      },
      "document.appendChild": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "document",
        "functionName": "document.appendChild",
        "fullMemberPath": "document.appendChild",
        "methodChain": [
          "appendChild"
        ],
        "isChainedCall": true
      },
      "window.load": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "window",
        "functionName": "window.load",
        "fullMemberPath": "window.load",
        "methodChain": [
          "load"
        ],
        "isChainedCall": true
      },
      "window.gapi.init": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "window",
        "functionName": "window.gapi.init",
        "fullMemberPath": "window.gapi.init",
        "methodChain": [
          "gapi",
          "init"
        ],
        "isChainedCall": true
      },
      "resolve": {
        "source": "unknown",
        "type": "unknown",
        "importedName": "resolve",
        "localName": "resolve"
      },
      "reject": {
        "source": "unknown",
        "type": "unknown",
        "importedName": "reject",
        "localName": "reject"
      },
      "setIsLoadingFromCache": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setIsLoadingFromCache"
      },
      "localStorage.getItem": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "localStorage",
        "functionName": "localStorage.getItem",
        "fullMemberPath": "localStorage.getItem",
        "methodChain": [
          "getItem"
        ],
        "isChainedCall": true
      },
      "JSON.parse": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "JSON",
        "functionName": "JSON.parse",
        "fullMemberPath": "JSON.parse",
        "methodChain": [
          "parse"
        ],
        "isChainedCall": true
      },
      "now.getTime": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "now",
        "functionName": "now.getTime",
        "fullMemberPath": "now.getTime",
        "methodChain": [
          "getTime"
        ],
        "isChainedCall": true
      },
      "cacheTimestamp.getTime": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "cacheTimestamp",
        "functionName": "cacheTimestamp.getTime",
        "fullMemberPath": "cacheTimestamp.getTime",
        "methodChain": [
          "getTime"
        ],
        "isChainedCall": true
      },
      "setEmails": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setEmails"
      },
      "setFetchTime": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setFetchTime"
      },
      "setCacheAge": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setCacheAge"
      },
      "ageInMinutes.toFixed": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "ageInMinutes",
        "functionName": "ageInMinutes.toFixed",
        "fullMemberPath": "ageInMinutes.toFixed",
        "methodChain": [
          "toFixed"
        ],
        "isChainedCall": true
      },
      "localStorage.removeItem": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "localStorage",
        "functionName": "localStorage.removeItem",
        "fullMemberPath": "localStorage.removeItem",
        "methodChain": [
          "removeItem"
        ],
        "isChainedCall": true
      },
      "emailsData.map": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "emailsData",
        "functionName": "emailsData.map",
        "fullMemberPath": "emailsData.map",
        "methodChain": [
          "map"
        ],
        "isChainedCall": true
      },
      "email.substring": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "email",
        "functionName": "email.substring",
        "fullMemberPath": "email.substring",
        "methodChain": [
          "substring"
        ],
        "isChainedCall": true
      },
      "email.payload.filter": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "email",
        "functionName": "email.payload.filter",
        "fullMemberPath": "email.payload.filter",
        "methodChain": [
          "payload",
          "filter"
        ],
        "isChainedCall": true
      },
      "includes": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "unknown",
        "functionName": "includes",
        "fullMemberPath": "includes"
      },
      "toISOString": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "unknown",
        "functionName": "toISOString",
        "fullMemberPath": "toISOString"
      },
      "JSON.stringify": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "JSON",
        "functionName": "JSON.stringify",
        "fullMemberPath": "JSON.stringify",
        "methodChain": [
          "stringify"
        ],
        "isChainedCall": true
      },
      "sizeInMB.toFixed": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "sizeInMB",
        "functionName": "sizeInMB.toFixed",
        "fullMemberPath": "sizeInMB.toFixed",
        "methodChain": [
          "toFixed"
        ],
        "isChainedCall": true
      },
      "minimalEmails.slice.map": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "minimalEmails",
        "functionName": "minimalEmails.slice.map",
        "fullMemberPath": "minimalEmails.slice.map",
        "methodChain": [
          "slice",
          "map"
        ],
        "isChainedCall": true
      },
      "email.payload.slice": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "email",
        "functionName": "email.payload.slice",
        "fullMemberPath": "email.payload.slice",
        "methodChain": [
          "payload",
          "slice"
        ],
        "isChainedCall": true
      },
      "safeSetLocalStorage": {
        "source": "local",
        "type": "local",
        "importedName": "safeSetLocalStorage",
        "localName": "safeSetLocalStorage"
      },
      "emailsData.slice.map": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "emailsData",
        "functionName": "emailsData.slice.map",
        "fullMemberPath": "emailsData.slice.map",
        "methodChain": [
          "slice",
          "map"
        ],
        "isChainedCall": true
      },
      "email.payload.filter.slice": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "email",
        "functionName": "email.payload.filter.slice",
        "fullMemberPath": "email.payload.filter.slice",
        "methodChain": [
          "payload",
          "filter",
          "slice"
        ],
        "isChainedCall": true
      },
      "navigator.estimate": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "navigator",
        "functionName": "navigator.estimate",
        "fullMemberPath": "navigator.estimate",
        "methodChain": [
          "estimate"
        ],
        "isChainedCall": true
      },
      "setStorageInfo": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setStorageInfo"
      },
      "Date.now": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "Date",
        "functionName": "Date.now",
        "fullMemberPath": "Date.now",
        "methodChain": [
          "now"
        ],
        "isChainedCall": true
      },
      "setIsCheckingAuth": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setIsCheckingAuth"
      },
      "loadAuthData": {
        "source": "local",
        "type": "local",
        "importedName": "loadAuthData",
        "localName": "loadAuthData"
      },
      "setTimeout": {
        "source": "unknown",
        "type": "unknown",
        "importedName": "setTimeout",
        "localName": "setTimeout"
      },
      "clearAuthData": {
        "source": "local",
        "type": "local",
        "importedName": "clearAuthData",
        "localName": "clearAuthData"
      },
      "window.gapi.setToken": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "window",
        "functionName": "window.gapi.setToken",
        "fullMemberPath": "window.gapi.setToken",
        "methodChain": [
          "gapi",
          "setToken"
        ],
        "isChainedCall": true
      },
      "window.gapi.client.gmail.getProfile": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "window",
        "functionName": "window.gapi.client.gmail.getProfile",
        "fullMemberPath": "window.gapi.client.gmail.getProfile",
        "methodChain": [
          "gapi",
          "client",
          "gmail",
          "getProfile"
        ],
        "isChainedCall": true
      },
      "setIsSignedIn": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setIsSignedIn"
      },
      "setUserInfo": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setUserInfo"
      },
      "fetchEmails": {
        "source": "local",
        "type": "local",
        "importedName": "fetchEmails",
        "localName": "fetchEmails"
      },
      "setLoading": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setLoading"
      },
      "window.google.accounts.initTokenClient": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "window",
        "functionName": "window.google.accounts.initTokenClient",
        "fullMemberPath": "window.google.accounts.initTokenClient",
        "methodChain": [
          "google",
          "accounts",
          "initTokenClient"
        ],
        "isChainedCall": true
      },
      "getUserInfo": {
        "source": "local",
        "type": "local",
        "importedName": "getUserInfo",
        "localName": "getUserInfo"
      },
      "saveAuthData": {
        "source": "local",
        "type": "local",
        "importedName": "saveAuthData",
        "localName": "saveAuthData"
      },
      "tokenClient.requestAccessToken": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "tokenClient",
        "functionName": "tokenClient.requestAccessToken",
        "fullMemberPath": "tokenClient.requestAccessToken",
        "methodChain": [
          "requestAccessToken"
        ],
        "isChainedCall": true
      },
      "fetch": {
        "source": "unknown",
        "type": "unknown",
        "importedName": "fetch",
        "localName": "fetch"
      },
      "response.json": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "response",
        "functionName": "response.json",
        "fullMemberPath": "response.json",
        "methodChain": [
          "json"
        ],
        "isChainedCall": true
      },
      "performance.now": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "performance",
        "functionName": "performance.now",
        "fullMemberPath": "performance.now",
        "methodChain": [
          "now"
        ],
        "isChainedCall": true
      },
      "window.gapi.getToken": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "window",
        "functionName": "window.gapi.getToken",
        "fullMemberPath": "window.gapi.getToken",
        "methodChain": [
          "gapi",
          "getToken"
        ],
        "isChainedCall": true
      },
      "window.gapi.client.gmail.users.list": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "window",
        "functionName": "window.gapi.client.gmail.users.list",
        "fullMemberPath": "window.gapi.client.gmail.users.list",
        "methodChain": [
          "gapi",
          "client",
          "gmail",
          "users",
          "list"
        ],
        "isChainedCall": true
      },
      "response.result.slice": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "response",
        "functionName": "response.result.slice",
        "fullMemberPath": "response.result.slice",
        "methodChain": [
          "result",
          "slice"
        ],
        "isChainedCall": true
      },
      "Math.floor": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "Math",
        "functionName": "Math.floor",
        "fullMemberPath": "Math.floor",
        "methodChain": [
          "floor"
        ],
        "isChainedCall": true
      },
      "Math.ceil": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "Math",
        "functionName": "Math.ceil",
        "fullMemberPath": "Math.ceil",
        "methodChain": [
          "ceil"
        ],
        "isChainedCall": true
      },
      "batch.map": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "batch",
        "functionName": "batch.map",
        "fullMemberPath": "batch.map",
        "methodChain": [
          "map"
        ],
        "isChainedCall": true
      },
      "window.gapi.client.gmail.users.get": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "window",
        "functionName": "window.gapi.client.gmail.users.get",
        "fullMemberPath": "window.gapi.client.gmail.users.get",
        "methodChain": [
          "gapi",
          "client",
          "gmail",
          "users",
          "get"
        ],
        "isChainedCall": true
      },
      "Promise.all": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "Promise",
        "functionName": "Promise.all",
        "fullMemberPath": "Promise.all",
        "methodChain": [
          "all"
        ],
        "isChainedCall": true
      },
      "allEmailResults.push": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "allEmailResults",
        "functionName": "allEmailResults.push",
        "fullMemberPath": "allEmailResults.push",
        "methodChain": [
          "push"
        ],
        "isChainedCall": true
      },
      "delay": {
        "source": "local",
        "type": "local",
        "importedName": "delay",
        "localName": "delay"
      },
      "allEmailResults.filter": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "allEmailResults",
        "functionName": "allEmailResults.filter",
        "fullMemberPath": "allEmailResults.filter",
        "methodChain": [
          "filter"
        ],
        "isChainedCall": true
      },
      "saveCachedEmails": {
        "source": "local",
        "type": "local",
        "importedName": "saveCachedEmails",
        "localName": "saveCachedEmails"
      },
      "fetchDuration.toFixed": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "fetchDuration",
        "functionName": "fetchDuration.toFixed",
        "fullMemberPath": "fetchDuration.toFixed",
        "methodChain": [
          "toFixed"
        ],
        "isChainedCall": true
      },
      "Object.keys": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "Object",
        "functionName": "Object.keys",
        "fullMemberPath": "Object.keys",
        "methodChain": [
          "keys"
        ],
        "isChainedCall": true
      },
      "window.google.accounts.revoke": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "window",
        "functionName": "window.google.accounts.revoke",
        "fullMemberPath": "window.google.accounts.revoke",
        "methodChain": [
          "google",
          "accounts",
          "revoke"
        ],
        "isChainedCall": true
      },
      "clearCache": {
        "source": "local",
        "type": "local",
        "importedName": "clearCache",
        "localName": "clearCache"
      },
      "headers.find": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "headers",
        "functionName": "headers.find",
        "fullMemberPath": "headers.find",
        "methodChain": [
          "find"
        ],
        "isChainedCall": true
      },
      "h.toLowerCase": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "h",
        "functionName": "h.toLowerCase",
        "fullMemberPath": "h.toLowerCase",
        "methodChain": [
          "toLowerCase"
        ],
        "isChainedCall": true
      },
      "name.toLowerCase": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "name",
        "functionName": "name.toLowerCase",
        "fullMemberPath": "name.toLowerCase",
        "methodChain": [
          "toLowerCase"
        ],
        "isChainedCall": true
      },
      "date.toLocaleDateString": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "date",
        "functionName": "date.toLocaleDateString",
        "fullMemberPath": "date.toLocaleDateString",
        "methodChain": [
          "toLocaleDateString"
        ],
        "isChainedCall": true
      },
      "date.toLocaleString": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "date",
        "functionName": "date.toLocaleString",
        "fullMemberPath": "date.toLocaleString",
        "methodChain": [
          "toLocaleString"
        ],
        "isChainedCall": true
      },
      "getEmailsToShow": {
        "source": "local",
        "type": "local",
        "importedName": "getEmailsToShow",
        "localName": "getEmailsToShow"
      },
      "Math.min": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "Math",
        "functionName": "Math.min",
        "fullMemberPath": "Math.min",
        "methodChain": [
          "min"
        ],
        "isChainedCall": true
      },
      "setInstitutionEmailCounts": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setInstitutionEmailCounts"
      },
      "setExpandedEmails": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setExpandedEmails"
      },
      "newSet.has": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "newSet",
        "functionName": "newSet.has",
        "fullMemberPath": "newSet.has",
        "methodChain": [
          "has"
        ],
        "isChainedCall": true
      },
      "newSet.delete": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "newSet",
        "functionName": "newSet.delete",
        "fullMemberPath": "newSet.delete",
        "methodChain": [
          "delete"
        ],
        "isChainedCall": true
      },
      "newSet.add": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "newSet",
        "functionName": "newSet.add",
        "fullMemberPath": "newSet.add",
        "methodChain": [
          "add"
        ],
        "isChainedCall": true
      },
      "setIsExporting": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setIsExporting"
      },
      "setExportProgress": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setExportProgress"
      },
      "currentWeekEnd.setDate": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "currentWeekEnd",
        "functionName": "currentWeekEnd.setDate",
        "fullMemberPath": "currentWeekEnd.setDate",
        "methodChain": [
          "setDate"
        ],
        "isChainedCall": true
      },
      "currentWeekEnd.getDate": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "currentWeekEnd",
        "functionName": "currentWeekEnd.getDate",
        "fullMemberPath": "currentWeekEnd.getDate",
        "methodChain": [
          "getDate"
        ],
        "isChainedCall": true
      },
      "currentWeekEnd.setTime": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "currentWeekEnd",
        "functionName": "currentWeekEnd.setTime",
        "fullMemberPath": "currentWeekEnd.setTime",
        "methodChain": [
          "setTime"
        ],
        "isChainedCall": true
      },
      "endDateObj.getTime": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "endDateObj",
        "functionName": "endDateObj.getTime",
        "fullMemberPath": "endDateObj.getTime",
        "methodChain": [
          "getTime"
        ],
        "isChainedCall": true
      },
      "currentWeekStart.toLocaleDateString": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "currentWeekStart",
        "functionName": "currentWeekStart.toLocaleDateString",
        "fullMemberPath": "currentWeekStart.toLocaleDateString",
        "methodChain": [
          "toLocaleDateString"
        ],
        "isChainedCall": true
      },
      "currentWeekEnd.toLocaleDateString": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "currentWeekEnd",
        "functionName": "currentWeekEnd.toLocaleDateString",
        "fullMemberPath": "currentWeekEnd.toLocaleDateString",
        "methodChain": [
          "toLocaleDateString"
        ],
        "isChainedCall": true
      },
      "weeklyIntervals.push": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "weeklyIntervals",
        "functionName": "weeklyIntervals.push",
        "fullMemberPath": "weeklyIntervals.push",
        "methodChain": [
          "push"
        ],
        "isChainedCall": true
      },
      "currentWeekStart.setDate": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "currentWeekStart",
        "functionName": "currentWeekStart.setDate",
        "fullMemberPath": "currentWeekStart.setDate",
        "methodChain": [
          "setDate"
        ],
        "isChainedCall": true
      },
      "currentWeekStart.getDate": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "currentWeekStart",
        "functionName": "currentWeekStart.getDate",
        "fullMemberPath": "currentWeekStart.getDate",
        "methodChain": [
          "getDate"
        ],
        "isChainedCall": true
      },
      "date.getFullYear": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "date",
        "functionName": "date.getFullYear",
        "fullMemberPath": "date.getFullYear",
        "methodChain": [
          "getFullYear"
        ],
        "isChainedCall": true
      },
      "toString.padStart": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "unknown",
        "functionName": "toString.padStart",
        "fullMemberPath": "toString.padStart",
        "methodChain": [
          "toString",
          "padStart"
        ],
        "isChainedCall": true
      },
      "date.getMonth": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "date",
        "functionName": "date.getMonth",
        "fullMemberPath": "date.getMonth",
        "methodChain": [
          "getMonth"
        ],
        "isChainedCall": true
      },
      "date.getDate.toString.padStart": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "date",
        "functionName": "date.getDate.toString.padStart",
        "fullMemberPath": "date.getDate.toString.padStart",
        "methodChain": [
          "getDate",
          "toString",
          "padStart"
        ],
        "isChainedCall": true
      },
      "formatGmailDate": {
        "source": "local",
        "type": "local",
        "importedName": "formatGmailDate",
        "localName": "formatGmailDate"
      },
      "week.getTime": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "week",
        "functionName": "week.getTime",
        "fullMemberPath": "week.getTime",
        "methodChain": [
          "getTime"
        ],
        "isChainedCall": true
      },
      "weeklyMessages.slice": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "weeklyMessages",
        "functionName": "weeklyMessages.slice",
        "fullMemberPath": "weeklyMessages.slice",
        "methodChain": [
          "slice"
        ],
        "isChainedCall": true
      },
      "Math.round": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "Math",
        "functionName": "Math.round",
        "fullMemberPath": "Math.round",
        "methodChain": [
          "round"
        ],
        "isChainedCall": true
      },
      "weeklyEmailResults.push": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "weeklyEmailResults",
        "functionName": "weeklyEmailResults.push",
        "fullMemberPath": "weeklyEmailResults.push",
        "methodChain": [
          "push"
        ],
        "isChainedCall": true
      },
      "batchResults.filter": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "batchResults",
        "functionName": "batchResults.filter",
        "fullMemberPath": "batchResults.filter",
        "methodChain": [
          "filter"
        ],
        "isChainedCall": true
      },
      "weeklyEmailResults.filter": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "weeklyEmailResults",
        "functionName": "weeklyEmailResults.filter",
        "fullMemberPath": "weeklyEmailResults.filter",
        "methodChain": [
          "filter"
        ],
        "isChainedCall": true
      },
      "weeklyIntervals.map": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "weeklyIntervals",
        "functionName": "weeklyIntervals.map",
        "fullMemberPath": "weeklyIntervals.map",
        "methodChain": [
          "map"
        ],
        "isChainedCall": true
      },
      "week.toISOString": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "week",
        "functionName": "week.toISOString",
        "fullMemberPath": "week.toISOString",
        "methodChain": [
          "toISOString"
        ],
        "isChainedCall": true
      },
      "allEmailResults.map": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "allEmailResults",
        "functionName": "allEmailResults.map",
        "fullMemberPath": "allEmailResults.map",
        "methodChain": [
          "map"
        ],
        "isChainedCall": true
      },
      "getHeader": {
        "source": "local",
        "type": "local",
        "importedName": "getHeader",
        "localName": "getHeader"
      },
      "downloadJsonFile": {
        "source": "local",
        "type": "local",
        "importedName": "downloadJsonFile",
        "localName": "downloadJsonFile"
      },
      "URL.createObjectURL": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "URL",
        "functionName": "URL.createObjectURL",
        "fullMemberPath": "URL.createObjectURL",
        "methodChain": [
          "createObjectURL"
        ],
        "isChainedCall": true
      },
      "link.click": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "link",
        "functionName": "link.click",
        "fullMemberPath": "link.click",
        "methodChain": [
          "click"
        ],
        "isChainedCall": true
      },
      "document.removeChild": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "document",
        "functionName": "document.removeChild",
        "fullMemberPath": "document.removeChild",
        "methodChain": [
          "removeChild"
        ],
        "isChainedCall": true
      },
      "URL.revokeObjectURL": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "URL",
        "functionName": "URL.revokeObjectURL",
        "fullMemberPath": "URL.revokeObjectURL",
        "methodChain": [
          "revokeObjectURL"
        ],
        "isChainedCall": true
      },
      "setUploadedFile": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setUploadedFile"
      },
      "setIsProcessingUpload": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setIsProcessingUpload"
      },
      "file.text": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "file",
        "functionName": "file.text",
        "fullMemberPath": "file.text",
        "methodChain": [
          "text"
        ],
        "isChainedCall": true
      },
      "Array.isArray": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "Array",
        "functionName": "Array.isArray",
        "fullMemberPath": "Array.isArray",
        "methodChain": [
          "isArray"
        ],
        "isChainedCall": true
      },
      "jsonData.map": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "jsonData",
        "functionName": "jsonData.map",
        "fullMemberPath": "jsonData.map",
        "methodChain": [
          "map"
        ],
        "isChainedCall": true
      },
      "setOriginalUploadedEmails": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setOriginalUploadedEmails"
      },
      "transformedEmails.filter": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "transformedEmails",
        "functionName": "transformedEmails.filter",
        "fullMemberPath": "transformedEmails.filter",
        "methodChain": [
          "filter"
        ],
        "isChainedCall": true
      },
      "selectedSenders.some": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "selectedSenders",
        "functionName": "selectedSenders.some",
        "fullMemberPath": "selectedSenders.some",
        "methodChain": [
          "some"
        ],
        "isChainedCall": true
      },
      "organization.toLowerCase": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "organization",
        "functionName": "organization.toLowerCase",
        "fullMemberPath": "organization.toLowerCase",
        "methodChain": [
          "toLowerCase"
        ],
        "isChainedCall": true
      },
      "setSuccess": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setSuccess"
      },
      "originalUploadedEmails.filter": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "originalUploadedEmails",
        "functionName": "originalUploadedEmails.filter",
        "fullMemberPath": "originalUploadedEmails.filter",
        "methodChain": [
          "filter"
        ],
        "isChainedCall": true
      },
      "fromHeader.toLowerCase": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "fromHeader",
        "functionName": "fromHeader.toLowerCase",
        "fullMemberPath": "fromHeader.toLowerCase",
        "methodChain": [
          "toLowerCase"
        ],
        "isChainedCall": true
      },
      "senderLower.includes": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "senderLower",
        "functionName": "senderLower.includes",
        "fullMemberPath": "senderLower.includes",
        "methodChain": [
          "includes"
        ],
        "isChainedCall": true
      },
      "setDataSource": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setDataSource"
      },
      "useMemo": {
        "source": "react",
        "type": "npm",
        "importedName": "useMemo",
        "localName": "useMemo"
      },
      "emails.forEach": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "emails",
        "functionName": "emails.forEach",
        "fullMemberPath": "emails.forEach",
        "methodChain": [
          "forEach"
        ],
        "isChainedCall": true
      },
      "Object.entries.map.sort.slice": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "Object",
        "functionName": "Object.entries.map.sort.slice",
        "fullMemberPath": "Object.entries.map.sort.slice",
        "methodChain": [
          "entries",
          "map",
          "sort",
          "slice"
        ],
        "isChainedCall": true
      },
      "getFullYear": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "unknown",
        "functionName": "getFullYear",
        "fullMemberPath": "getFullYear"
      },
      "dateA.getTime": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "dateA",
        "functionName": "dateA.getTime",
        "fullMemberPath": "dateA.getTime",
        "methodChain": [
          "getTime"
        ],
        "isChainedCall": true
      },
      "dateB.getTime": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "dateB",
        "functionName": "dateB.getTime",
        "fullMemberPath": "dateB.getTime",
        "methodChain": [
          "getTime"
        ],
        "isChainedCall": true
      },
      "emails.map.filter": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "emails",
        "functionName": "emails.map.filter",
        "fullMemberPath": "emails.map.filter",
        "methodChain": [
          "map",
          "filter"
        ],
        "isChainedCall": true
      },
      "isNaN": {
        "source": "unknown",
        "type": "unknown",
        "importedName": "isNaN",
        "localName": "isNaN"
      },
      "date.getTime": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "date",
        "functionName": "date.getTime",
        "fullMemberPath": "date.getTime",
        "methodChain": [
          "getTime"
        ],
        "isChainedCall": true
      },
      "validDates.map": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "validDates",
        "functionName": "validDates.map",
        "fullMemberPath": "validDates.map",
        "methodChain": [
          "map"
        ],
        "isChainedCall": true
      },
      "d.getTime": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "d",
        "functionName": "d.getTime",
        "fullMemberPath": "d.getTime",
        "methodChain": [
          "getTime"
        ],
        "isChainedCall": true
      },
      "Math.max": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "Math",
        "functionName": "Math.max",
        "fullMemberPath": "Math.max",
        "methodChain": [
          "max"
        ],
        "isChainedCall": true
      },
      "newest.getTime": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "newest",
        "functionName": "newest.getTime",
        "fullMemberPath": "newest.getTime",
        "methodChain": [
          "getTime"
        ],
        "isChainedCall": true
      },
      "oldest.getTime": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "oldest",
        "functionName": "oldest.getTime",
        "fullMemberPath": "oldest.getTime",
        "methodChain": [
          "getTime"
        ],
        "isChainedCall": true
      },
      "toFixed": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "unknown",
        "functionName": "toFixed",
        "fullMemberPath": "toFixed"
      },
      "emails.filter": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "emails",
        "functionName": "emails.filter",
        "fullMemberPath": "emails.filter",
        "methodChain": [
          "filter"
        ],
        "isChainedCall": true
      },
      "date.toISOString.split": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "date",
        "functionName": "date.toISOString.split",
        "fullMemberPath": "date.toISOString.split",
        "methodChain": [
          "toISOString",
          "split"
        ],
        "isChainedCall": true
      },
      "Object.values": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "Object",
        "functionName": "Object.values",
        "fullMemberPath": "Object.values",
        "methodChain": [
          "values"
        ],
        "isChainedCall": true
      },
      "dailyCounts.reduce": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "dailyCounts",
        "functionName": "dailyCounts.reduce",
        "fullMemberPath": "dailyCounts.reduce",
        "methodChain": [
          "reduce"
        ],
        "isChainedCall": true
      },
      "Math.pow": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "Math",
        "functionName": "Math.pow",
        "fullMemberPath": "Math.pow",
        "methodChain": [
          "pow"
        ],
        "isChainedCall": true
      },
      "Math.sqrt": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "Math",
        "functionName": "Math.sqrt",
        "fullMemberPath": "Math.sqrt",
        "methodChain": [
          "sqrt"
        ],
        "isChainedCall": true
      },
      "Object.entries.filter": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "Object",
        "functionName": "Object.entries.filter",
        "fullMemberPath": "Object.entries.filter",
        "methodChain": [
          "entries",
          "filter"
        ],
        "isChainedCall": true
      },
      "sender.match": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "sender",
        "functionName": "sender.match",
        "fullMemberPath": "sender.match",
        "methodChain": [
          "match"
        ],
        "isChainedCall": true
      },
      "trim.replace": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "unknown",
        "functionName": "trim.replace",
        "fullMemberPath": "trim.replace",
        "methodChain": [
          "trim",
          "replace"
        ],
        "isChainedCall": true
      },
      "senderCountsArray.reduce": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "senderCountsArray",
        "functionName": "senderCountsArray.reduce",
        "fullMemberPath": "senderCountsArray.reduce",
        "methodChain": [
          "reduce"
        ],
        "isChainedCall": true
      },
      "Object.entries.sort": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "Object",
        "functionName": "Object.entries.sort",
        "fullMemberPath": "Object.entries.sort",
        "methodChain": [
          "entries",
          "sort"
        ],
        "isChainedCall": true
      },
      "date.getHours": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "date",
        "functionName": "date.getHours",
        "fullMemberPath": "date.getHours",
        "methodChain": [
          "getHours"
        ],
        "isChainedCall": true
      },
      "unusualHours.reduce": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "unusualHours",
        "functionName": "unusualHours.reduce",
        "fullMemberPath": "unusualHours.reduce",
        "methodChain": [
          "reduce"
        ],
        "isChainedCall": true
      },
      "outlierDays.toString": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "outlierDays",
        "functionName": "outlierDays.toString",
        "fullMemberPath": "outlierDays.toString",
        "methodChain": [
          "toString"
        ],
        "isChainedCall": true
      },
      "topSender.substring": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "topSender",
        "functionName": "topSender.substring",
        "fullMemberPath": "topSender.substring",
        "methodChain": [
          "substring"
        ],
        "isChainedCall": true
      },
      "unusualHourPercentage.toFixed": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "unusualHourPercentage",
        "functionName": "unusualHourPercentage.toFixed",
        "fullMemberPath": "unusualHourPercentage.toFixed",
        "methodChain": [
          "toFixed"
        ],
        "isChainedCall": true
      },
      "mean.toFixed": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "mean",
        "functionName": "mean.toFixed",
        "fullMemberPath": "mean.toFixed",
        "methodChain": [
          "toFixed"
        ],
        "isChainedCall": true
      },
      "stdDev.toFixed": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "stdDev",
        "functionName": "stdDev.toFixed",
        "fullMemberPath": "stdDev.toFixed",
        "methodChain": [
          "toFixed"
        ],
        "isChainedCall": true
      },
      "outlierThreshold.toFixed": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "outlierThreshold",
        "functionName": "outlierThreshold.toFixed",
        "fullMemberPath": "outlierThreshold.toFixed",
        "methodChain": [
          "toFixed"
        ],
        "isChainedCall": true
      },
      "clearUploadedData": {
        "source": "local",
        "type": "local",
        "importedName": "clearUploadedData",
        "localName": "clearUploadedData"
      },
      "setShowAllUploadSenders": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setShowAllUploadSenders"
      },
      "selectedSenders.map": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "selectedSenders",
        "functionName": "selectedSenders.map",
        "fullMemberPath": "selectedSenders.map",
        "methodChain": [
          "map"
        ],
        "isChainedCall": true
      },
      "setExportStartDate": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setExportStartDate"
      },
      "setExportEndDate": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setExportEndDate"
      },
      "toLocaleDateString": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "unknown",
        "functionName": "toLocaleDateString",
        "fullMemberPath": "toLocaleDateString"
      },
      "cacheAge.toLocaleString": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "cacheAge",
        "functionName": "cacheAge.toLocaleString",
        "fullMemberPath": "cacheAge.toLocaleString",
        "methodChain": [
          "toLocaleString"
        ],
        "isChainedCall": true
      },
      "emails.map": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "emails",
        "functionName": "emails.map",
        "fullMemberPath": "emails.map",
        "methodChain": [
          "map"
        ],
        "isChainedCall": true
      },
      "toDateString": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "unknown",
        "functionName": "toDateString",
        "fullMemberPath": "toDateString"
      },
      "getDateRangeInfo": {
        "source": "local",
        "type": "local",
        "importedName": "getDateRangeInfo",
        "localName": "getDateRangeInfo"
      },
      "oldest.toLocaleDateString": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "oldest",
        "functionName": "oldest.toLocaleDateString",
        "fullMemberPath": "oldest.toLocaleDateString",
        "methodChain": [
          "toLocaleDateString"
        ],
        "isChainedCall": true
      },
      "newest.toLocaleDateString": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "newest",
        "functionName": "newest.toLocaleDateString",
        "fullMemberPath": "newest.toLocaleDateString",
        "methodChain": [
          "toLocaleDateString"
        ],
        "isChainedCall": true
      },
      "details.map": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "details",
        "functionName": "details.map",
        "fullMemberPath": "details.map",
        "methodChain": [
          "map"
        ],
        "isChainedCall": true
      },
      "setShowAllSenders": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setShowAllSenders"
      },
      "Object.entries.sort.slice.map": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "Object",
        "functionName": "Object.entries.sort.slice.map",
        "fullMemberPath": "Object.entries.sort.slice.map",
        "methodChain": [
          "entries",
          "sort",
          "slice",
          "map"
        ],
        "isChainedCall": true
      },
      "emails.reduce": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "emails",
        "functionName": "emails.reduce",
        "fullMemberPath": "emails.reduce",
        "methodChain": [
          "reduce"
        ],
        "isChainedCall": true
      },
      "Object.entries.forEach": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "Object",
        "functionName": "Object.entries.forEach",
        "fullMemberPath": "Object.entries.forEach",
        "methodChain": [
          "entries",
          "forEach"
        ],
        "isChainedCall": true
      },
      "email.toLowerCase": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "email",
        "functionName": "email.toLowerCase",
        "fullMemberPath": "email.toLowerCase",
        "methodChain": [
          "toLowerCase"
        ],
        "isChainedCall": true
      },
      "institution.toLowerCase": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "institution",
        "functionName": "institution.toLowerCase",
        "fullMemberPath": "institution.toLowerCase",
        "methodChain": [
          "toLowerCase"
        ],
        "isChainedCall": true
      },
      "emailLower.includes": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "emailLower",
        "functionName": "emailLower.includes",
        "fullMemberPath": "emailLower.includes",
        "methodChain": [
          "includes"
        ],
        "isChainedCall": true
      },
      "data.toLowerCase.includes": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "data",
        "functionName": "data.toLowerCase.includes",
        "fullMemberPath": "data.toLowerCase.includes",
        "methodChain": [
          "toLowerCase",
          "includes"
        ],
        "isChainedCall": true
      },
      "institutionGroups.push": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "institutionGroups",
        "functionName": "institutionGroups.push",
        "fullMemberPath": "institutionGroups.push",
        "methodChain": [
          "push"
        ],
        "isChainedCall": true
      },
      "ungroupedSenders.push": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "ungroupedSenders",
        "functionName": "ungroupedSenders.push",
        "fullMemberPath": "ungroupedSenders.push",
        "methodChain": [
          "push"
        ],
        "isChainedCall": true
      },
      "Object.keys.forEach": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "Object",
        "functionName": "Object.keys.forEach",
        "fullMemberPath": "Object.keys.forEach",
        "methodChain": [
          "keys",
          "forEach"
        ],
        "isChainedCall": true
      },
      "institutionGroups.sort": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "institutionGroups",
        "functionName": "institutionGroups.sort",
        "fullMemberPath": "institutionGroups.sort",
        "methodChain": [
          "sort"
        ],
        "isChainedCall": true
      },
      "ungroupedSenders.sort": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "ungroupedSenders",
        "functionName": "ungroupedSenders.sort",
        "fullMemberPath": "ungroupedSenders.sort",
        "methodChain": [
          "sort"
        ],
        "isChainedCall": true
      },
      "institutionSenders.reduce": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "institutionSenders",
        "functionName": "institutionSenders.reduce",
        "fullMemberPath": "institutionSenders.reduce",
        "methodChain": [
          "reduce"
        ],
        "isChainedCall": true
      },
      "institutionSenders.map": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "institutionSenders",
        "functionName": "institutionSenders.map",
        "fullMemberPath": "institutionSenders.map",
        "methodChain": [
          "map"
        ],
        "isChainedCall": true
      },
      "ungroupedSenders.slice.map": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "ungroupedSenders",
        "functionName": "ungroupedSenders.slice.map",
        "fullMemberPath": "ungroupedSenders.slice.map",
        "methodChain": [
          "slice",
          "map"
        ],
        "isChainedCall": true
      },
      "selectedSenders.join": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "selectedSenders",
        "functionName": "selectedSenders.join",
        "fullMemberPath": "selectedSenders.join",
        "methodChain": [
          "join"
        ],
        "isChainedCall": true
      },
      "sender.toLowerCase": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "sender",
        "functionName": "sender.toLowerCase",
        "fullMemberPath": "sender.toLowerCase",
        "methodChain": [
          "toLowerCase"
        ],
        "isChainedCall": true
      },
      "org.toLowerCase": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "org",
        "functionName": "org.toLowerCase",
        "fullMemberPath": "org.toLowerCase",
        "methodChain": [
          "toLowerCase"
        ],
        "isChainedCall": true
      },
      "orgLower.includes": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "orgLower",
        "functionName": "orgLower.includes",
        "fullMemberPath": "orgLower.includes",
        "methodChain": [
          "includes"
        ],
        "isChainedCall": true
      },
      "organizationEmails.filter": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "organizationEmails",
        "functionName": "organizationEmails.filter",
        "fullMemberPath": "organizationEmails.filter",
        "methodChain": [
          "filter"
        ],
        "isChainedCall": true
      },
      "subject.toLowerCase.includes": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "subject",
        "functionName": "subject.toLowerCase.includes",
        "fullMemberPath": "subject.toLowerCase.includes",
        "methodChain": [
          "toLowerCase",
          "includes"
        ],
        "isChainedCall": true
      },
      "getOrganizationIcon": {
        "source": "local",
        "type": "local",
        "importedName": "getOrganizationIcon",
        "localName": "getOrganizationIcon"
      },
      "faturaCartaoEmails.slice.map": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "faturaCartaoEmails",
        "functionName": "faturaCartaoEmails.slice.map",
        "fullMemberPath": "faturaCartaoEmails.slice.map",
        "methodChain": [
          "slice",
          "map"
        ],
        "isChainedCall": true
      },
      "toggleEmailExpansion": {
        "source": "unknown",
        "type": "unknown",
        "importedName": "toggleEmailExpansion",
        "localName": "toggleEmailExpansion"
      },
      "formatDate": {
        "source": "local",
        "type": "local",
        "importedName": "formatDate",
        "localName": "formatDate"
      },
      "expandedEmails.has": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "expandedEmails",
        "functionName": "expandedEmails.has",
        "fullMemberPath": "expandedEmails.has",
        "methodChain": [
          "has"
        ],
        "isChainedCall": true
      },
      "showMoreEmails": {
        "source": "local",
        "type": "local",
        "importedName": "showMoreEmails",
        "localName": "showMoreEmails"
      },
      "showFewerEmails": {
        "source": "local",
        "type": "local",
        "importedName": "showFewerEmails",
        "localName": "showFewerEmails"
      },
      "otherInterEmails.slice.map": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "otherInterEmails",
        "functionName": "otherInterEmails.slice.map",
        "fullMemberPath": "otherInterEmails.slice.map",
        "methodChain": [
          "slice",
          "map"
        ],
        "isChainedCall": true
      },
      "from.toLowerCase.includes": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "from",
        "functionName": "from.toLowerCase.includes",
        "fullMemberPath": "from.toLowerCase.includes",
        "methodChain": [
          "toLowerCase",
          "includes"
        ],
        "isChainedCall": true
      },
      "cartaoRicoFaturaEmails.slice.map": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "cartaoRicoFaturaEmails",
        "functionName": "cartaoRicoFaturaEmails.slice.map",
        "fullMemberPath": "cartaoRicoFaturaEmails.slice.map",
        "methodChain": [
          "slice",
          "map"
        ],
        "isChainedCall": true
      },
      "otherRicoEmails.slice.map": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "otherRicoEmails",
        "functionName": "otherRicoEmails.slice.map",
        "fullMemberPath": "otherRicoEmails.slice.map",
        "methodChain": [
          "slice",
          "map"
        ],
        "isChainedCall": true
      },
      "dinFakturaEmails.slice.map": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "dinFakturaEmails",
        "functionName": "dinFakturaEmails.slice.map",
        "fullMemberPath": "dinFakturaEmails.slice.map",
        "methodChain": [
          "slice",
          "map"
        ],
        "isChainedCall": true
      },
      "otherAmexEmails.slice.map": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "otherAmexEmails",
        "functionName": "otherAmexEmails.slice.map",
        "fullMemberPath": "otherAmexEmails.slice.map",
        "methodChain": [
          "slice",
          "map"
        ],
        "isChainedCall": true
      },
      "organizationEmails.slice.map": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "organizationEmails",
        "functionName": "organizationEmails.slice.map",
        "fullMemberPath": "organizationEmails.slice.map",
        "methodChain": [
          "slice",
          "map"
        ],
        "isChainedCall": true
      },
      "selectedSenders.every": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "selectedSenders",
        "functionName": "selectedSenders.every",
        "fullMemberPath": "selectedSenders.every",
        "methodChain": [
          "every"
        ],
        "isChainedCall": true
      },
      "sender.toLowerCase.includes": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "sender",
        "functionName": "sender.toLowerCase.includes",
        "fullMemberPath": "sender.toLowerCase.includes",
        "methodChain": [
          "toLowerCase",
          "includes"
        ],
        "isChainedCall": true
      }
    },
    "destructuredFunctions": {
      "emails": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "emails"
      },
      "setEmails": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setEmails"
      },
      "isSignedIn": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "isSignedIn"
      },
      "setIsSignedIn": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setIsSignedIn"
      },
      "loading": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "loading"
      },
      "setLoading": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setLoading"
      },
      "error": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "error"
      },
      "setError": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setError"
      },
      "success": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "success"
      },
      "setSuccess": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setSuccess"
      },
      "userInfo": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "userInfo"
      },
      "setUserInfo": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setUserInfo"
      },
      "fetchTime": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "fetchTime"
      },
      "setFetchTime": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setFetchTime"
      },
      "cacheAge": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "cacheAge"
      },
      "setCacheAge": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setCacheAge"
      },
      "isLoadingFromCache": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "isLoadingFromCache"
      },
      "setIsLoadingFromCache": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setIsLoadingFromCache"
      },
      "isCheckingAuth": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "isCheckingAuth"
      },
      "setIsCheckingAuth": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setIsCheckingAuth"
      },
      "storageInfo": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "storageInfo"
      },
      "setStorageInfo": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setStorageInfo"
      },
      "showAllSenders": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "showAllSenders"
      },
      "setShowAllSenders": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setShowAllSenders"
      },
      "showAllUploadSenders": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "showAllUploadSenders"
      },
      "setShowAllUploadSenders": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setShowAllUploadSenders"
      },
      "selectedSenders": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "selectedSenders"
      },
      "institutionEmailCounts": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "institutionEmailCounts"
      },
      "setInstitutionEmailCounts": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setInstitutionEmailCounts"
      },
      "expandedEmails": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "expandedEmails"
      },
      "setExpandedEmails": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setExpandedEmails"
      },
      "exportStartDate": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "exportStartDate"
      },
      "setExportStartDate": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setExportStartDate"
      },
      "exportEndDate": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "exportEndDate"
      },
      "setExportEndDate": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setExportEndDate"
      },
      "isExporting": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "isExporting"
      },
      "setIsExporting": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setIsExporting"
      },
      "exportProgress": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "exportProgress"
      },
      "setExportProgress": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setExportProgress"
      },
      "dataSource": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "dataSource"
      },
      "setDataSource": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setDataSource"
      },
      "uploadedFile": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "uploadedFile"
      },
      "setUploadedFile": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setUploadedFile"
      },
      "isProcessingUpload": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "isProcessingUpload"
      },
      "setIsProcessingUpload": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setIsProcessingUpload"
      },
      "originalUploadedEmails": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "originalUploadedEmails"
      },
      "setOriginalUploadedEmails": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setOriginalUploadedEmails"
      }
    }
  },
  "family/page.tsx": {
    "defined": [
      "FamilyFinancePage",
      "adjustTransactionAmounts",
      "fetchTransactions",
      "handleSort",
      "sortTransactions"
    ],
    "called": [
      "Math.abs",
      "aValue.localeCompare",
      "adjustTransactionAmounts",
      "adjustedTransactions.filter",
      "console.error",
      "console.log",
      "fetchTransactions",
      "setAmandaTransactions",
      "setMeTransactions",
      "setSortConfig",
      "setUsTransactions",
      "sort",
      "supabase.from.select",
      "transactions.map",
      "useEffect",
      "useState"
    ],
    "both": [
      "adjustTransactionAmounts",
      "fetchTransactions"
    ],
    "imports": {
      "useEffect": {
        "source": "react",
        "type": "npm",
        "importedName": "useEffect",
        "localName": "useEffect"
      },
      "useState": {
        "source": "react",
        "type": "npm",
        "importedName": "useState",
        "localName": "useState"
      },
      "supabase": {
        "source": "../../lib/supabaseClient",
        "type": "relative",
        "importedName": "supabase",
        "localName": "supabase"
      },
      "Switch": {
        "source": "@/components/ui/switch",
        "type": "alias",
        "importedName": "Switch",
        "localName": "Switch"
      },
      "TableCardFamily": {
        "source": "@/components/ui/table-card-family",
        "type": "alias",
        "importedName": "default",
        "localName": "TableCardFamily"
      },
      "ProtectedRoute": {
        "source": "@/components/protected-route",
        "type": "alias",
        "importedName": "default",
        "localName": "ProtectedRoute"
      },
      "Separator": {
        "source": "@/components/ui/separator",
        "type": "alias",
        "importedName": "Separator",
        "localName": "Separator"
      },
      "FinanceSummaryCard": {
        "source": "@/components/ui/finance-summary-card",
        "type": "alias",
        "importedName": "FinanceSummaryCard",
        "localName": "FinanceSummaryCard"
      },
      "FinanceDetailCard": {
        "source": "@/components/ui/finance-detail-card",
        "type": "alias",
        "importedName": "FinanceDetailCard",
        "localName": "FinanceDetailCard"
      },
      "Carousel": {
        "source": "@/components/ui/carousel",
        "type": "alias",
        "importedName": "Carousel",
        "localName": "Carousel"
      },
      "CarouselContent": {
        "source": "@/components/ui/carousel",
        "type": "alias",
        "importedName": "CarouselContent",
        "localName": "CarouselContent"
      },
      "CarouselItem": {
        "source": "@/components/ui/carousel",
        "type": "alias",
        "importedName": "CarouselItem",
        "localName": "CarouselItem"
      },
      "CarouselPrevious": {
        "source": "@/components/ui/carousel",
        "type": "alias",
        "importedName": "CarouselPrevious",
        "localName": "CarouselPrevious"
      },
      "CarouselNext": {
        "source": "@/components/ui/carousel",
        "type": "alias",
        "importedName": "CarouselNext",
        "localName": "CarouselNext"
      },
      "CarouselDotsResponsive": {
        "source": "@/components/ui/carousel",
        "type": "alias",
        "importedName": "CarouselDotsResponsive",
        "localName": "CarouselDotsResponsive"
      }
    },
    "calledWithImports": {
      "useState": {
        "source": "react",
        "type": "npm",
        "importedName": "useState",
        "localName": "useState"
      },
      "transactions.map": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "transactions",
        "functionName": "transactions.map",
        "fullMemberPath": "transactions.map",
        "methodChain": [
          "map"
        ],
        "isChainedCall": true
      },
      "Math.abs": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "Math",
        "functionName": "Math.abs",
        "fullMemberPath": "Math.abs",
        "methodChain": [
          "abs"
        ],
        "isChainedCall": true
      },
      "useEffect": {
        "source": "react",
        "type": "npm",
        "importedName": "useEffect",
        "localName": "useEffect"
      },
      "console.log": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "console",
        "functionName": "console.log",
        "fullMemberPath": "console.log",
        "methodChain": [
          "log"
        ],
        "isChainedCall": true
      },
      "supabase.from.select": {
        "source": "../../lib/supabaseClient",
        "type": "relative",
        "importedName": "supabase",
        "localName": "supabase",
        "memberOf": "supabase",
        "functionName": "supabase.from.select",
        "fullMemberPath": "supabase.from.select",
        "methodChain": [
          "from",
          "select"
        ],
        "isChainedCall": true
      },
      "console.error": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "console",
        "functionName": "console.error",
        "fullMemberPath": "console.error",
        "methodChain": [
          "error"
        ],
        "isChainedCall": true
      },
      "adjustTransactionAmounts": {
        "source": "local",
        "type": "local",
        "importedName": "adjustTransactionAmounts",
        "localName": "adjustTransactionAmounts"
      },
      "setAmandaTransactions": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setAmandaTransactions"
      },
      "adjustedTransactions.filter": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "adjustedTransactions",
        "functionName": "adjustedTransactions.filter",
        "fullMemberPath": "adjustedTransactions.filter",
        "methodChain": [
          "filter"
        ],
        "isChainedCall": true
      },
      "setUsTransactions": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setUsTransactions"
      },
      "setMeTransactions": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setMeTransactions"
      },
      "fetchTransactions": {
        "source": "local",
        "type": "local",
        "importedName": "fetchTransactions",
        "localName": "fetchTransactions"
      },
      "setSortConfig": {
        "source": "unknown",
        "type": "unknown",
        "importedName": "setSortConfig",
        "localName": "setSortConfig"
      },
      "sort": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "unknown",
        "functionName": "sort",
        "fullMemberPath": "sort"
      },
      "aValue.localeCompare": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "aValue",
        "functionName": "aValue.localeCompare",
        "fullMemberPath": "aValue.localeCompare",
        "methodChain": [
          "localeCompare"
        ],
        "isChainedCall": true
      }
    },
    "destructuredFunctions": {
      "amandaTransactions": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "amandaTransactions"
      },
      "setAmandaTransactions": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setAmandaTransactions"
      },
      "usTransactions": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "usTransactions"
      },
      "setUsTransactions": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setUsTransactions"
      },
      "meTransactions": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "meTransactions"
      },
      "setMeTransactions": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setMeTransactions"
      },
      "showComments": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "showComments"
      },
      "setShowComments": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setShowComments"
      },
      "showDate": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "showDate"
      },
      "setShowDate": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setShowDate"
      },
      "showId": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "showId"
      },
      "setShowId": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setShowId"
      },
      "usTransactionsAmanda": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "usTransactionsAmanda"
      },
      "amandaSortConfig": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "amandaSortConfig"
      },
      "setAmandaSortConfig": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setAmandaSortConfig"
      },
      "usSortConfig": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "usSortConfig"
      },
      "setUsSortConfig": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setUsSortConfig"
      },
      "meSortConfig": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "meSortConfig"
      },
      "setMeSortConfig": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setMeSortConfig"
      },
      "usAmandaSortConfig": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "usAmandaSortConfig"
      },
      "setUsAmandaSortConfig": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setUsAmandaSortConfig"
      }
    }
  },
  "family/layout.tsx": {
    "defined": [
      "FamilyLayout"
    ],
    "called": [
      "clearTimeout",
      "setIsEntering",
      "setTimeout",
      "useEffect",
      "useState"
    ],
    "both": [],
    "imports": {
      "useEffect": {
        "source": "react",
        "type": "npm",
        "importedName": "useEffect",
        "localName": "useEffect"
      },
      "useState": {
        "source": "react",
        "type": "npm",
        "importedName": "useState",
        "localName": "useState"
      }
    },
    "calledWithImports": {
      "useState": {
        "source": "react",
        "type": "npm",
        "importedName": "useState",
        "localName": "useState"
      },
      "useEffect": {
        "source": "react",
        "type": "npm",
        "importedName": "useEffect",
        "localName": "useEffect"
      },
      "setTimeout": {
        "source": "unknown",
        "type": "unknown",
        "importedName": "setTimeout",
        "localName": "setTimeout"
      },
      "setIsEntering": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setIsEntering"
      },
      "clearTimeout": {
        "source": "unknown",
        "type": "unknown",
        "importedName": "clearTimeout",
        "localName": "clearTimeout"
      }
    },
    "destructuredFunctions": {
      "isEntering": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "isEntering"
      },
      "setIsEntering": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setIsEntering"
      }
    }
  },
  "global/page.tsx": {
    "defined": [
      "Home",
      "fetchTransactions"
    ],
    "called": [
      "console.error",
      "data.map",
      "fetchTransactions",
      "setTransactions",
      "supabase.from.select.eq",
      "transactions.filter",
      "useAuth",
      "useEffect",
      "useState"
    ],
    "both": [
      "fetchTransactions"
    ],
    "imports": {
      "useEffect": {
        "source": "react",
        "type": "npm",
        "importedName": "useEffect",
        "localName": "useEffect"
      },
      "useState": {
        "source": "react",
        "type": "npm",
        "importedName": "useState",
        "localName": "useState"
      },
      "supabase": {
        "source": "../../lib/supabaseClient",
        "type": "relative",
        "importedName": "supabase",
        "localName": "supabase"
      },
      "useAuth": {
        "source": "../../context/AuthContext",
        "type": "relative",
        "importedName": "useAuth",
        "localName": "useAuth"
      },
      "Button": {
        "source": "@/components/ui/button",
        "type": "alias",
        "importedName": "Button",
        "localName": "Button"
      },
      "ProtectedRoute": {
        "source": "@/components/protected-route",
        "type": "alias",
        "importedName": "default",
        "localName": "ProtectedRoute"
      },
      "TransactionTable": {
        "source": "@/components/ui/transaction/TransactionTable",
        "type": "alias",
        "importedName": "default",
        "localName": "TransactionTable"
      },
      "Transaction": {
        "source": "@/types/transaction",
        "type": "alias",
        "importedName": "Transaction",
        "localName": "Transaction"
      },
      "Accordion": {
        "source": "@/components/ui/accordion",
        "type": "alias",
        "importedName": "Accordion",
        "localName": "Accordion"
      },
      "AccordionItem": {
        "source": "@/components/ui/accordion",
        "type": "alias",
        "importedName": "AccordionItem",
        "localName": "AccordionItem"
      },
      "AccordionTrigger": {
        "source": "@/components/ui/accordion",
        "type": "alias",
        "importedName": "AccordionTrigger",
        "localName": "AccordionTrigger"
      },
      "AccordionContent": {
        "source": "@/components/ui/accordion",
        "type": "alias",
        "importedName": "AccordionContent",
        "localName": "AccordionContent"
      }
    },
    "calledWithImports": {
      "useAuth": {
        "source": "../../context/AuthContext",
        "type": "relative",
        "importedName": "useAuth",
        "localName": "useAuth"
      },
      "useState": {
        "source": "react",
        "type": "npm",
        "importedName": "useState",
        "localName": "useState"
      },
      "useEffect": {
        "source": "react",
        "type": "npm",
        "importedName": "useEffect",
        "localName": "useEffect"
      },
      "supabase.from.select.eq": {
        "source": "../../lib/supabaseClient",
        "type": "relative",
        "importedName": "supabase",
        "localName": "supabase",
        "memberOf": "supabase",
        "functionName": "supabase.from.select.eq",
        "fullMemberPath": "supabase.from.select.eq",
        "methodChain": [
          "from",
          "select",
          "eq"
        ],
        "isChainedCall": true
      },
      "console.error": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "console",
        "functionName": "console.error",
        "fullMemberPath": "console.error",
        "methodChain": [
          "error"
        ],
        "isChainedCall": true
      },
      "data.map": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "data",
        "functionName": "data.map",
        "fullMemberPath": "data.map",
        "methodChain": [
          "map"
        ],
        "isChainedCall": true
      },
      "setTransactions": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setTransactions"
      },
      "fetchTransactions": {
        "source": "local",
        "type": "local",
        "importedName": "fetchTransactions",
        "localName": "fetchTransactions"
      },
      "transactions.filter": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "transactions",
        "functionName": "transactions.filter",
        "fullMemberPath": "transactions.filter",
        "methodChain": [
          "filter"
        ],
        "isChainedCall": true
      }
    },
    "destructuredFunctions": {
      "transactions": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "transactions"
      },
      "setTransactions": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setTransactions"
      }
    }
  },
  "components/bill-item.tsx": {
    "defined": [
      "BillItem",
      "formatCurrency",
      "formatDate",
      "handleInputChange",
      "handleSave"
    ],
    "called": [
      "JSON.stringify",
      "console.error",
      "formatCurrency",
      "formatDate",
      "handleInputChange",
      "month.toLowerCase.substring",
      "onBillUpdate",
      "onTogglePaid",
      "parseFloat",
      "parseInt",
      "setEditBill",
      "setIsSaving",
      "supabase.from.update.eq",
      "toISOString",
      "toLocaleDateString",
      "toast.error",
      "toast.success",
      "useState",
      "value.toLocaleString"
    ],
    "both": [
      "formatCurrency",
      "formatDate",
      "handleInputChange"
    ],
    "imports": {
      "Bill": {
        "source": "../types/bill",
        "type": "relative",
        "importedName": "Bill",
        "localName": "Bill"
      },
      "HoverCard": {
        "source": "@/components/ui/hover-card",
        "type": "alias",
        "importedName": "HoverCard",
        "localName": "HoverCard"
      },
      "HoverCardContent": {
        "source": "@/components/ui/hover-card",
        "type": "alias",
        "importedName": "HoverCardContent",
        "localName": "HoverCardContent"
      },
      "HoverCardTrigger": {
        "source": "@/components/ui/hover-card",
        "type": "alias",
        "importedName": "HoverCardTrigger",
        "localName": "HoverCardTrigger"
      },
      "PencilIcon": {
        "source": "lucide-react",
        "type": "npm",
        "importedName": "PencilIcon",
        "localName": "PencilIcon"
      },
      "useState": {
        "source": "react",
        "type": "npm",
        "importedName": "useState",
        "localName": "useState"
      },
      "Button": {
        "source": "@/components/ui/button",
        "type": "alias",
        "importedName": "Button",
        "localName": "Button"
      },
      "Input": {
        "source": "@/components/ui/input",
        "type": "alias",
        "importedName": "Input",
        "localName": "Input"
      },
      "Label": {
        "source": "@/components/ui/label",
        "type": "alias",
        "importedName": "Label",
        "localName": "Label"
      },
      "Sheet": {
        "source": "@/components/ui/sheet",
        "type": "alias",
        "importedName": "Sheet",
        "localName": "Sheet"
      },
      "SheetClose": {
        "source": "@/components/ui/sheet",
        "type": "alias",
        "importedName": "SheetClose",
        "localName": "SheetClose"
      },
      "SheetContent": {
        "source": "@/components/ui/sheet",
        "type": "alias",
        "importedName": "SheetContent",
        "localName": "SheetContent"
      },
      "SheetDescription": {
        "source": "@/components/ui/sheet",
        "type": "alias",
        "importedName": "SheetDescription",
        "localName": "SheetDescription"
      },
      "SheetFooter": {
        "source": "@/components/ui/sheet",
        "type": "alias",
        "importedName": "SheetFooter",
        "localName": "SheetFooter"
      },
      "SheetHeader": {
        "source": "@/components/ui/sheet",
        "type": "alias",
        "importedName": "SheetHeader",
        "localName": "SheetHeader"
      },
      "SheetTitle": {
        "source": "@/components/ui/sheet",
        "type": "alias",
        "importedName": "SheetTitle",
        "localName": "SheetTitle"
      },
      "SheetTrigger": {
        "source": "@/components/ui/sheet",
        "type": "alias",
        "importedName": "SheetTrigger",
        "localName": "SheetTrigger"
      },
      "supabase": {
        "source": "@/lib/supabaseClient",
        "type": "alias",
        "importedName": "supabase",
        "localName": "supabase"
      },
      "toast": {
        "source": "sonner",
        "type": "npm",
        "importedName": "toast",
        "localName": "toast"
      }
    },
    "calledWithImports": {
      "month.toLowerCase.substring": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "month",
        "functionName": "month.toLowerCase.substring",
        "fullMemberPath": "month.toLowerCase.substring",
        "methodChain": [
          "toLowerCase",
          "substring"
        ],
        "isChainedCall": true
      },
      "useState": {
        "source": "react",
        "type": "npm",
        "importedName": "useState",
        "localName": "useState"
      },
      "value.toLocaleString": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "value",
        "functionName": "value.toLocaleString",
        "fullMemberPath": "value.toLocaleString",
        "methodChain": [
          "toLocaleString"
        ],
        "isChainedCall": true
      },
      "toLocaleDateString": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "unknown",
        "functionName": "toLocaleDateString",
        "fullMemberPath": "toLocaleDateString"
      },
      "setEditBill": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setEditBill"
      },
      "setIsSaving": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setIsSaving"
      },
      "supabase.from.update.eq": {
        "source": "@/lib/supabaseClient",
        "type": "alias",
        "importedName": "supabase",
        "localName": "supabase",
        "memberOf": "supabase",
        "functionName": "supabase.from.update.eq",
        "fullMemberPath": "supabase.from.update.eq",
        "methodChain": [
          "from",
          "update",
          "eq"
        ],
        "isChainedCall": true
      },
      "toISOString": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "unknown",
        "functionName": "toISOString",
        "fullMemberPath": "toISOString"
      },
      "onBillUpdate": {
        "source": "unknown",
        "type": "unknown",
        "importedName": "onBillUpdate",
        "localName": "onBillUpdate"
      },
      "toast.success": {
        "source": "sonner",
        "type": "npm",
        "importedName": "toast",
        "localName": "toast",
        "memberOf": "toast",
        "functionName": "toast.success",
        "fullMemberPath": "toast.success",
        "methodChain": [
          "success"
        ],
        "isChainedCall": true
      },
      "console.error": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "console",
        "functionName": "console.error",
        "fullMemberPath": "console.error",
        "methodChain": [
          "error"
        ],
        "isChainedCall": true
      },
      "JSON.stringify": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "JSON",
        "functionName": "JSON.stringify",
        "fullMemberPath": "JSON.stringify",
        "methodChain": [
          "stringify"
        ],
        "isChainedCall": true
      },
      "toast.error": {
        "source": "sonner",
        "type": "npm",
        "importedName": "toast",
        "localName": "toast",
        "memberOf": "toast",
        "functionName": "toast.error",
        "fullMemberPath": "toast.error",
        "methodChain": [
          "error"
        ],
        "isChainedCall": true
      },
      "onTogglePaid": {
        "source": "unknown",
        "type": "unknown",
        "importedName": "onTogglePaid",
        "localName": "onTogglePaid"
      },
      "handleInputChange": {
        "source": "local",
        "type": "local",
        "importedName": "handleInputChange",
        "localName": "handleInputChange"
      },
      "parseInt": {
        "source": "unknown",
        "type": "unknown",
        "importedName": "parseInt",
        "localName": "parseInt"
      },
      "parseFloat": {
        "source": "unknown",
        "type": "unknown",
        "importedName": "parseFloat",
        "localName": "parseFloat"
      },
      "formatCurrency": {
        "source": "local",
        "type": "local",
        "importedName": "formatCurrency",
        "localName": "formatCurrency"
      },
      "formatDate": {
        "source": "local",
        "type": "local",
        "importedName": "formatDate",
        "localName": "formatDate"
      }
    },
    "destructuredFunctions": {
      "editBill": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "editBill"
      },
      "setEditBill": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setEditBill"
      },
      "isSaving": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "isSaving"
      },
      "setIsSaving": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setIsSaving"
      }
    }
  },
  "components/bill-card.tsx": {
    "defined": [
      "BillCard",
      "formatCurrency",
      "getBillDetailsForMonth"
    ],
    "called": [
      "bills.filter",
      "carouselApi.off",
      "carouselApi.on",
      "carouselApi.scrollNext",
      "carouselApi.scrollPrev",
      "carouselApi.scrollTo",
      "carouselApi.selectedScrollSnap",
      "cn",
      "countryBills.map",
      "formatCurrency",
      "getBillDetailsForMonth",
      "monthName.toLowerCase.substring",
      "months.findIndex",
      "months.map",
      "onMonthChange",
      "onNextMonth",
      "onPrevMonth",
      "setCarouselApi",
      "setCurrentSlide",
      "setSelectedMonth",
      "sort",
      "sortedBills.filter",
      "sortedBills.filter.reduce",
      "sortedBills.reduce",
      "useCallback",
      "useEffect",
      "useMemo",
      "useState",
      "value.toLocaleString"
    ],
    "both": [
      "formatCurrency",
      "getBillDetailsForMonth"
    ],
    "imports": {
      "useState": {
        "source": "react",
        "type": "npm",
        "importedName": "useState",
        "localName": "useState"
      },
      "useEffect": {
        "source": "react",
        "type": "npm",
        "importedName": "useEffect",
        "localName": "useEffect"
      },
      "useCallback": {
        "source": "react",
        "type": "npm",
        "importedName": "useCallback",
        "localName": "useCallback"
      },
      "useMemo": {
        "source": "react",
        "type": "npm",
        "importedName": "useMemo",
        "localName": "useMemo"
      },
      "Bill": {
        "source": "../types/bill",
        "type": "relative",
        "importedName": "Bill",
        "localName": "Bill"
      },
      "BillItem": {
        "source": "./bill-item",
        "type": "relative",
        "importedName": "default",
        "localName": "BillItem"
      },
      "cn": {
        "source": "@/lib/utils",
        "type": "alias",
        "importedName": "cn",
        "localName": "cn"
      },
      "Carousel": {
        "source": "@/components/ui/carousel",
        "type": "alias",
        "importedName": "Carousel",
        "localName": "Carousel"
      },
      "CarouselContent": {
        "source": "@/components/ui/carousel",
        "type": "alias",
        "importedName": "CarouselContent",
        "localName": "CarouselContent"
      },
      "CarouselItem": {
        "source": "@/components/ui/carousel",
        "type": "alias",
        "importedName": "CarouselItem",
        "localName": "CarouselItem"
      },
      "CarouselPrevious": {
        "source": "@/components/ui/carousel",
        "type": "alias",
        "importedName": "CarouselPrevious",
        "localName": "CarouselPrevious"
      },
      "CarouselNext": {
        "source": "@/components/ui/carousel",
        "type": "alias",
        "importedName": "CarouselNext",
        "localName": "CarouselNext"
      },
      "CarouselApi": {
        "source": "@/components/ui/carousel",
        "type": "alias",
        "importedName": "CarouselApi",
        "localName": "CarouselApi"
      }
    },
    "calledWithImports": {
      "useState": {
        "source": "react",
        "type": "npm",
        "importedName": "useState",
        "localName": "useState"
      },
      "useCallback": {
        "source": "react",
        "type": "npm",
        "importedName": "useCallback",
        "localName": "useCallback"
      },
      "setCarouselApi": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setCarouselApi"
      },
      "useMemo": {
        "source": "react",
        "type": "npm",
        "importedName": "useMemo",
        "localName": "useMemo"
      },
      "useEffect": {
        "source": "react",
        "type": "npm",
        "importedName": "useEffect",
        "localName": "useEffect"
      },
      "months.findIndex": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "months",
        "functionName": "months.findIndex",
        "fullMemberPath": "months.findIndex",
        "methodChain": [
          "findIndex"
        ],
        "isChainedCall": true
      },
      "carouselApi.scrollTo": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "carouselApi",
        "functionName": "carouselApi.scrollTo",
        "fullMemberPath": "carouselApi.scrollTo",
        "methodChain": [
          "scrollTo"
        ],
        "isChainedCall": true
      },
      "setCurrentSlide": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setCurrentSlide"
      },
      "carouselApi.selectedScrollSnap": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "carouselApi",
        "functionName": "carouselApi.selectedScrollSnap",
        "fullMemberPath": "carouselApi.selectedScrollSnap",
        "methodChain": [
          "selectedScrollSnap"
        ],
        "isChainedCall": true
      },
      "setSelectedMonth": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setSelectedMonth"
      },
      "onMonthChange": {
        "source": "unknown",
        "type": "unknown",
        "importedName": "onMonthChange",
        "localName": "onMonthChange"
      },
      "carouselApi.on": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "carouselApi",
        "functionName": "carouselApi.on",
        "fullMemberPath": "carouselApi.on",
        "methodChain": [
          "on"
        ],
        "isChainedCall": true
      },
      "carouselApi.off": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "carouselApi",
        "functionName": "carouselApi.off",
        "fullMemberPath": "carouselApi.off",
        "methodChain": [
          "off"
        ],
        "isChainedCall": true
      },
      "carouselApi.scrollPrev": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "carouselApi",
        "functionName": "carouselApi.scrollPrev",
        "fullMemberPath": "carouselApi.scrollPrev",
        "methodChain": [
          "scrollPrev"
        ],
        "isChainedCall": true
      },
      "onPrevMonth": {
        "source": "unknown",
        "type": "unknown",
        "importedName": "onPrevMonth",
        "localName": "onPrevMonth"
      },
      "carouselApi.scrollNext": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "carouselApi",
        "functionName": "carouselApi.scrollNext",
        "fullMemberPath": "carouselApi.scrollNext",
        "methodChain": [
          "scrollNext"
        ],
        "isChainedCall": true
      },
      "onNextMonth": {
        "source": "unknown",
        "type": "unknown",
        "importedName": "onNextMonth",
        "localName": "onNextMonth"
      },
      "monthName.toLowerCase.substring": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "monthName",
        "functionName": "monthName.toLowerCase.substring",
        "fullMemberPath": "monthName.toLowerCase.substring",
        "methodChain": [
          "toLowerCase",
          "substring"
        ],
        "isChainedCall": true
      },
      "bills.filter": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "bills",
        "functionName": "bills.filter",
        "fullMemberPath": "bills.filter",
        "methodChain": [
          "filter"
        ],
        "isChainedCall": true
      },
      "sort": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "unknown",
        "functionName": "sort",
        "fullMemberPath": "sort"
      },
      "sortedBills.reduce": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "sortedBills",
        "functionName": "sortedBills.reduce",
        "fullMemberPath": "sortedBills.reduce",
        "methodChain": [
          "reduce"
        ],
        "isChainedCall": true
      },
      "sortedBills.filter.reduce": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "sortedBills",
        "functionName": "sortedBills.filter.reduce",
        "fullMemberPath": "sortedBills.filter.reduce",
        "methodChain": [
          "filter",
          "reduce"
        ],
        "isChainedCall": true
      },
      "sortedBills.filter": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "sortedBills",
        "functionName": "sortedBills.filter",
        "fullMemberPath": "sortedBills.filter",
        "methodChain": [
          "filter"
        ],
        "isChainedCall": true
      },
      "value.toLocaleString": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "value",
        "functionName": "value.toLocaleString",
        "fullMemberPath": "value.toLocaleString",
        "methodChain": [
          "toLocaleString"
        ],
        "isChainedCall": true
      },
      "months.map": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "months",
        "functionName": "months.map",
        "fullMemberPath": "months.map",
        "methodChain": [
          "map"
        ],
        "isChainedCall": true
      },
      "getBillDetailsForMonth": {
        "source": "local",
        "type": "local",
        "importedName": "getBillDetailsForMonth",
        "localName": "getBillDetailsForMonth"
      },
      "formatCurrency": {
        "source": "local",
        "type": "local",
        "importedName": "formatCurrency",
        "localName": "formatCurrency"
      },
      "countryBills.map": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "countryBills",
        "functionName": "countryBills.map",
        "fullMemberPath": "countryBills.map",
        "methodChain": [
          "map"
        ],
        "isChainedCall": true
      },
      "cn": {
        "source": "@/lib/utils",
        "type": "alias",
        "importedName": "cn",
        "localName": "cn"
      }
    },
    "destructuredFunctions": {
      "setSelectedMonth": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setSelectedMonth"
      },
      "carouselApi": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "carouselApi"
      },
      "setCarouselApi": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setCarouselApi"
      },
      "currentSlide": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "currentSlide"
      },
      "setCurrentSlide": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setCurrentSlide"
      }
    }
  },
  "amex/page.tsx": {
    "defined": [
      "Home",
      "fetchTransactions"
    ],
    "called": [
      "console.error",
      "fetchTransactions",
      "setTransactions",
      "supabase.from.select.eq",
      "transactions.filter",
      "useAuth",
      "useEffect",
      "useState",
      "window.open"
    ],
    "both": [
      "fetchTransactions"
    ],
    "imports": {
      "useEffect": {
        "source": "react",
        "type": "npm",
        "importedName": "useEffect",
        "localName": "useEffect"
      },
      "useState": {
        "source": "react",
        "type": "npm",
        "importedName": "useState",
        "localName": "useState"
      },
      "supabase": {
        "source": "../../lib/supabaseClient",
        "type": "relative",
        "importedName": "supabase",
        "localName": "supabase"
      },
      "useAuth": {
        "source": "../../context/AuthContext",
        "type": "relative",
        "importedName": "useAuth",
        "localName": "useAuth"
      },
      "Button": {
        "source": "@/components/ui/button",
        "type": "alias",
        "importedName": "Button",
        "localName": "Button"
      },
      "ProtectedRoute": {
        "source": "@/components/protected-route",
        "type": "alias",
        "importedName": "default",
        "localName": "ProtectedRoute"
      },
      "TransactionTable": {
        "source": "@/components/ui/transaction/TransactionTable",
        "type": "alias",
        "importedName": "default",
        "localName": "TransactionTable"
      },
      "Transaction": {
        "source": "@/types/transaction",
        "type": "alias",
        "importedName": "Transaction",
        "localName": "Transaction"
      },
      "UpdateAmexAggregatedButton": {
        "source": "@/components/UpdateAmexAggregatedButton",
        "type": "alias",
        "importedName": "default",
        "localName": "UpdateAmexAggregatedButton"
      },
      "Accordion": {
        "source": "@/components/ui/accordion",
        "type": "alias",
        "importedName": "Accordion",
        "localName": "Accordion"
      },
      "AccordionItem": {
        "source": "@/components/ui/accordion",
        "type": "alias",
        "importedName": "AccordionItem",
        "localName": "AccordionItem"
      },
      "AccordionTrigger": {
        "source": "@/components/ui/accordion",
        "type": "alias",
        "importedName": "AccordionTrigger",
        "localName": "AccordionTrigger"
      },
      "AccordionContent": {
        "source": "@/components/ui/accordion",
        "type": "alias",
        "importedName": "AccordionContent",
        "localName": "AccordionContent"
      }
    },
    "calledWithImports": {
      "useAuth": {
        "source": "../../context/AuthContext",
        "type": "relative",
        "importedName": "useAuth",
        "localName": "useAuth"
      },
      "useState": {
        "source": "react",
        "type": "npm",
        "importedName": "useState",
        "localName": "useState"
      },
      "useEffect": {
        "source": "react",
        "type": "npm",
        "importedName": "useEffect",
        "localName": "useEffect"
      },
      "supabase.from.select.eq": {
        "source": "../../lib/supabaseClient",
        "type": "relative",
        "importedName": "supabase",
        "localName": "supabase",
        "memberOf": "supabase",
        "functionName": "supabase.from.select.eq",
        "fullMemberPath": "supabase.from.select.eq",
        "methodChain": [
          "from",
          "select",
          "eq"
        ],
        "isChainedCall": true
      },
      "console.error": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "console",
        "functionName": "console.error",
        "fullMemberPath": "console.error",
        "methodChain": [
          "error"
        ],
        "isChainedCall": true
      },
      "setTransactions": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setTransactions"
      },
      "fetchTransactions": {
        "source": "local",
        "type": "local",
        "importedName": "fetchTransactions",
        "localName": "fetchTransactions"
      },
      "window.open": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "window",
        "functionName": "window.open",
        "fullMemberPath": "window.open",
        "methodChain": [
          "open"
        ],
        "isChainedCall": true
      },
      "transactions.filter": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "transactions",
        "functionName": "transactions.filter",
        "fullMemberPath": "transactions.filter",
        "methodChain": [
          "filter"
        ],
        "isChainedCall": true
      }
    },
    "destructuredFunctions": {
      "transactions": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "transactions"
      },
      "setTransactions": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setTransactions"
      }
    }
  },
  "actions/updateActions.ts": {
    "defined": [
      "executeAmexUpdate",
      "executeInterUpdate",
      "executeSjUpdate",
      "executeUpdate",
      "getAmexUpdatePreview",
      "getInterUpdatePreview",
      "getSjUpdatePreview",
      "getUpdatePreview",
      "previewAmexMonthTransactions",
      "previewInterTableTransactions",
      "previewSjMonthTransactions"
    ],
    "called": [
      "allNewTransactions.push",
      "allNewTransactions.sort",
      "availableNewMonths.push",
      "availableNewMonths.sort",
      "availableNewTables.push",
      "availableNewTables.sort",
      "console.error",
      "console.log",
      "existingSet.has",
      "existingSignatures.has",
      "getFullYear",
      "getTime",
      "includedMonths.map",
      "includedTables.map",
      "map",
      "month.toString.padStart",
      "newTransactions.map",
      "newTransactions.map.sort",
      "newTransactions.push",
      "newTransactions.reduce",
      "sourceMonthsIncluded.includes",
      "sourceTablesIncluded.includes",
      "sourceTransactions.filter",
      "supabase.from.insert",
      "supabase.from.insert.select",
      "supabase.from.select",
      "supabase.from.select.eq",
      "supabase.from.select.eq.limit",
      "supabase.from.select.like.order",
      "supabase.from.select.limit",
      "supabase.from.select.order",
      "supabase.from.select.order.limit",
      "tablesProcessed.push",
      "toISOString"
    ],
    "both": [],
    "imports": {
      "supabase": {
        "source": "@/lib/supabaseClient",
        "type": "alias",
        "importedName": "supabase",
        "localName": "supabase"
      },
      "Transaction": {
        "source": "@/types/transaction",
        "type": "alias",
        "importedName": "Transaction",
        "localName": "Transaction"
      }
    },
    "calledWithImports": {
      "supabase.from.select.order.limit": {
        "source": "@/lib/supabaseClient",
        "type": "alias",
        "importedName": "supabase",
        "localName": "supabase",
        "memberOf": "supabase",
        "functionName": "supabase.from.select.order.limit",
        "fullMemberPath": "supabase.from.select.order.limit",
        "methodChain": [
          "from",
          "select",
          "order",
          "limit"
        ],
        "isChainedCall": true
      },
      "supabase.from.select.order": {
        "source": "@/lib/supabaseClient",
        "type": "alias",
        "importedName": "supabase",
        "localName": "supabase",
        "memberOf": "supabase",
        "functionName": "supabase.from.select.order",
        "fullMemberPath": "supabase.from.select.order",
        "methodChain": [
          "from",
          "select",
          "order"
        ],
        "isChainedCall": true
      },
      "supabase.from.select": {
        "source": "@/lib/supabaseClient",
        "type": "alias",
        "importedName": "supabase",
        "localName": "supabase",
        "memberOf": "supabase",
        "functionName": "supabase.from.select",
        "fullMemberPath": "supabase.from.select",
        "methodChain": [
          "from",
          "select"
        ],
        "isChainedCall": true
      },
      "existingSet.has": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "existingSet",
        "functionName": "existingSet.has",
        "fullMemberPath": "existingSet.has",
        "methodChain": [
          "has"
        ],
        "isChainedCall": true
      },
      "newTransactions.push": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "newTransactions",
        "functionName": "newTransactions.push",
        "fullMemberPath": "newTransactions.push",
        "methodChain": [
          "push"
        ],
        "isChainedCall": true
      },
      "newTransactions.reduce": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "newTransactions",
        "functionName": "newTransactions.reduce",
        "fullMemberPath": "newTransactions.reduce",
        "methodChain": [
          "reduce"
        ],
        "isChainedCall": true
      },
      "newTransactions.map.sort": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "newTransactions",
        "functionName": "newTransactions.map.sort",
        "fullMemberPath": "newTransactions.map.sort",
        "methodChain": [
          "map",
          "sort"
        ],
        "isChainedCall": true
      },
      "console.error": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "console",
        "functionName": "console.error",
        "fullMemberPath": "console.error",
        "methodChain": [
          "error"
        ],
        "isChainedCall": true
      },
      "newTransactions.map": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "newTransactions",
        "functionName": "newTransactions.map",
        "fullMemberPath": "newTransactions.map",
        "methodChain": [
          "map"
        ],
        "isChainedCall": true
      },
      "supabase.from.insert.select": {
        "source": "@/lib/supabaseClient",
        "type": "alias",
        "importedName": "supabase",
        "localName": "supabase",
        "memberOf": "supabase",
        "functionName": "supabase.from.insert.select",
        "fullMemberPath": "supabase.from.insert.select",
        "methodChain": [
          "from",
          "insert",
          "select"
        ],
        "isChainedCall": true
      },
      "supabase.from.select.like.order": {
        "source": "@/lib/supabaseClient",
        "type": "alias",
        "importedName": "supabase",
        "localName": "supabase",
        "memberOf": "supabase",
        "functionName": "supabase.from.select.like.order",
        "fullMemberPath": "supabase.from.select.like.order",
        "methodChain": [
          "from",
          "select",
          "like",
          "order"
        ],
        "isChainedCall": true
      },
      "includedMonths.map": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "includedMonths",
        "functionName": "includedMonths.map",
        "fullMemberPath": "includedMonths.map",
        "methodChain": [
          "map"
        ],
        "isChainedCall": true
      },
      "getFullYear": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "unknown",
        "functionName": "getFullYear",
        "fullMemberPath": "getFullYear"
      },
      "month.toString.padStart": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "month",
        "functionName": "month.toString.padStart",
        "fullMemberPath": "month.toString.padStart",
        "methodChain": [
          "toString",
          "padStart"
        ],
        "isChainedCall": true
      },
      "sourceMonthsIncluded.includes": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "sourceMonthsIncluded",
        "functionName": "sourceMonthsIncluded.includes",
        "fullMemberPath": "sourceMonthsIncluded.includes",
        "methodChain": [
          "includes"
        ],
        "isChainedCall": true
      },
      "supabase.from.select.limit": {
        "source": "@/lib/supabaseClient",
        "type": "alias",
        "importedName": "supabase",
        "localName": "supabase",
        "memberOf": "supabase",
        "functionName": "supabase.from.select.limit",
        "fullMemberPath": "supabase.from.select.limit",
        "methodChain": [
          "from",
          "select",
          "limit"
        ],
        "isChainedCall": true
      },
      "availableNewMonths.push": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "availableNewMonths",
        "functionName": "availableNewMonths.push",
        "fullMemberPath": "availableNewMonths.push",
        "methodChain": [
          "push"
        ],
        "isChainedCall": true
      },
      "availableNewMonths.sort": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "availableNewMonths",
        "functionName": "availableNewMonths.sort",
        "fullMemberPath": "availableNewMonths.sort",
        "methodChain": [
          "sort"
        ],
        "isChainedCall": true
      },
      "supabase.from.select.eq.limit": {
        "source": "@/lib/supabaseClient",
        "type": "alias",
        "importedName": "supabase",
        "localName": "supabase",
        "memberOf": "supabase",
        "functionName": "supabase.from.select.eq.limit",
        "fullMemberPath": "supabase.from.select.eq.limit",
        "methodChain": [
          "from",
          "select",
          "eq",
          "limit"
        ],
        "isChainedCall": true
      },
      "toISOString": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "unknown",
        "functionName": "toISOString",
        "fullMemberPath": "toISOString"
      },
      "supabase.from.insert": {
        "source": "@/lib/supabaseClient",
        "type": "alias",
        "importedName": "supabase",
        "localName": "supabase",
        "memberOf": "supabase",
        "functionName": "supabase.from.insert",
        "fullMemberPath": "supabase.from.insert",
        "methodChain": [
          "from",
          "insert"
        ],
        "isChainedCall": true
      },
      "includedTables.map": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "includedTables",
        "functionName": "includedTables.map",
        "fullMemberPath": "includedTables.map",
        "methodChain": [
          "map"
        ],
        "isChainedCall": true
      },
      "sourceTablesIncluded.includes": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "sourceTablesIncluded",
        "functionName": "sourceTablesIncluded.includes",
        "fullMemberPath": "sourceTablesIncluded.includes",
        "methodChain": [
          "includes"
        ],
        "isChainedCall": true
      },
      "availableNewTables.push": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "availableNewTables",
        "functionName": "availableNewTables.push",
        "fullMemberPath": "availableNewTables.push",
        "methodChain": [
          "push"
        ],
        "isChainedCall": true
      },
      "availableNewTables.sort": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "availableNewTables",
        "functionName": "availableNewTables.sort",
        "fullMemberPath": "availableNewTables.sort",
        "methodChain": [
          "sort"
        ],
        "isChainedCall": true
      },
      "supabase.from.select.eq": {
        "source": "@/lib/supabaseClient",
        "type": "alias",
        "importedName": "supabase",
        "localName": "supabase",
        "memberOf": "supabase",
        "functionName": "supabase.from.select.eq",
        "fullMemberPath": "supabase.from.select.eq",
        "methodChain": [
          "from",
          "select",
          "eq"
        ],
        "isChainedCall": true
      },
      "map": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "unknown",
        "functionName": "map",
        "fullMemberPath": "map"
      },
      "sourceTransactions.filter": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "sourceTransactions",
        "functionName": "sourceTransactions.filter",
        "fullMemberPath": "sourceTransactions.filter",
        "methodChain": [
          "filter"
        ],
        "isChainedCall": true
      },
      "existingSignatures.has": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "existingSignatures",
        "functionName": "existingSignatures.has",
        "fullMemberPath": "existingSignatures.has",
        "methodChain": [
          "has"
        ],
        "isChainedCall": true
      },
      "allNewTransactions.push": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "allNewTransactions",
        "functionName": "allNewTransactions.push",
        "fullMemberPath": "allNewTransactions.push",
        "methodChain": [
          "push"
        ],
        "isChainedCall": true
      },
      "allNewTransactions.sort": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "allNewTransactions",
        "functionName": "allNewTransactions.sort",
        "fullMemberPath": "allNewTransactions.sort",
        "methodChain": [
          "sort"
        ],
        "isChainedCall": true
      },
      "getTime": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "unknown",
        "functionName": "getTime",
        "fullMemberPath": "getTime"
      },
      "console.log": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "console",
        "functionName": "console.log",
        "fullMemberPath": "console.log",
        "methodChain": [
          "log"
        ],
        "isChainedCall": true
      },
      "tablesProcessed.push": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "tablesProcessed",
        "functionName": "tablesProcessed.push",
        "fullMemberPath": "tablesProcessed.push",
        "methodChain": [
          "push"
        ],
        "isChainedCall": true
      }
    },
    "destructuredFunctions": {}
  },
  "actions/fileActions.ts": {
    "defined": [
      "clearTableData",
      "createTableInSupabase",
      "executeTableCreation",
      "uploadExcel",
      "uploadToSupabase"
    ],
    "called": [
      "Papa.parse",
      "XLSX.read",
      "XLSX.sheet_to_json",
      "clearTableData",
      "console.error",
      "console.log",
      "data.slice",
      "decode",
      "error.includes",
      "file.arrayBuffer",
      "file.endsWith",
      "processAmex",
      "processDEV",
      "processHandelsbanken",
      "processInterBR",
      "processInterBRAccount",
      "processSEB",
      "supabase.from.delete.neq",
      "supabase.from.insert",
      "supabase.from.select.limit",
      "supabase.from.select.order.limit",
      "supabase.rpc",
      "transactions.map",
      "uploadToSupabase"
    ],
    "both": [
      "clearTableData",
      "uploadToSupabase"
    ],
    "imports": {
      "XLSX": {
        "source": "xlsx",
        "type": "npm",
        "importedName": "*",
        "localName": "XLSX"
      },
      "Papa": {
        "source": "papaparse",
        "type": "npm",
        "importedName": "default",
        "localName": "Papa"
      },
      "supabase": {
        "source": "@/lib/supabaseClient",
        "type": "alias",
        "importedName": "supabase",
        "localName": "supabase"
      },
      "processDEV": {
        "source": "@/lib/utils/bankProcessors",
        "type": "alias",
        "importedName": "processDEV",
        "localName": "processDEV"
      },
      "processInterBR": {
        "source": "@/lib/utils/bankProcessors",
        "type": "alias",
        "importedName": "processInterBR",
        "localName": "processInterBR"
      },
      "processInterBRAccount": {
        "source": "@/lib/utils/bankProcessors",
        "type": "alias",
        "importedName": "processInterBRAccount",
        "localName": "processInterBRAccount"
      },
      "processHandelsbanken": {
        "source": "@/lib/utils/bankProcessors",
        "type": "alias",
        "importedName": "processHandelsbanken",
        "localName": "processHandelsbanken"
      },
      "processAmex": {
        "source": "@/lib/utils/bankProcessors",
        "type": "alias",
        "importedName": "processAmex",
        "localName": "processAmex"
      },
      "processSEB": {
        "source": "@/lib/utils/bankProcessors",
        "type": "alias",
        "importedName": "processSEB",
        "localName": "processSEB"
      }
    },
    "calledWithImports": {
      "console.log": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "console",
        "functionName": "console.log",
        "fullMemberPath": "console.log",
        "methodChain": [
          "log"
        ],
        "isChainedCall": true
      },
      "file.arrayBuffer": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "file",
        "functionName": "file.arrayBuffer",
        "fullMemberPath": "file.arrayBuffer",
        "methodChain": [
          "arrayBuffer"
        ],
        "isChainedCall": true
      },
      "file.endsWith": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "file",
        "functionName": "file.endsWith",
        "fullMemberPath": "file.endsWith",
        "methodChain": [
          "endsWith"
        ],
        "isChainedCall": true
      },
      "decode": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "unknown",
        "functionName": "decode",
        "fullMemberPath": "decode"
      },
      "Papa.parse": {
        "source": "papaparse",
        "type": "npm",
        "importedName": "default",
        "localName": "Papa",
        "memberOf": "Papa",
        "functionName": "Papa.parse",
        "fullMemberPath": "Papa.parse",
        "methodChain": [
          "parse"
        ],
        "isChainedCall": true
      },
      "XLSX.read": {
        "source": "xlsx",
        "type": "npm",
        "importedName": "*",
        "localName": "XLSX",
        "memberOf": "XLSX",
        "functionName": "XLSX.read",
        "fullMemberPath": "XLSX.read",
        "methodChain": [
          "read"
        ],
        "isChainedCall": true
      },
      "XLSX.sheet_to_json": {
        "source": "xlsx",
        "type": "npm",
        "importedName": "*",
        "localName": "XLSX",
        "memberOf": "XLSX",
        "functionName": "XLSX.sheet_to_json",
        "fullMemberPath": "XLSX.sheet_to_json",
        "methodChain": [
          "sheet_to_json"
        ],
        "isChainedCall": true
      },
      "data.slice": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "data",
        "functionName": "data.slice",
        "fullMemberPath": "data.slice",
        "methodChain": [
          "slice"
        ],
        "isChainedCall": true
      },
      "processDEV": {
        "source": "@/lib/utils/bankProcessors",
        "type": "alias",
        "importedName": "processDEV",
        "localName": "processDEV"
      },
      "processInterBR": {
        "source": "@/lib/utils/bankProcessors",
        "type": "alias",
        "importedName": "processInterBR",
        "localName": "processInterBR"
      },
      "processInterBRAccount": {
        "source": "@/lib/utils/bankProcessors",
        "type": "alias",
        "importedName": "processInterBRAccount",
        "localName": "processInterBRAccount"
      },
      "processHandelsbanken": {
        "source": "@/lib/utils/bankProcessors",
        "type": "alias",
        "importedName": "processHandelsbanken",
        "localName": "processHandelsbanken"
      },
      "processAmex": {
        "source": "@/lib/utils/bankProcessors",
        "type": "alias",
        "importedName": "processAmex",
        "localName": "processAmex"
      },
      "processSEB": {
        "source": "@/lib/utils/bankProcessors",
        "type": "alias",
        "importedName": "processSEB",
        "localName": "processSEB"
      },
      "uploadToSupabase": {
        "source": "local",
        "type": "local",
        "importedName": "uploadToSupabase",
        "localName": "uploadToSupabase"
      },
      "console.error": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "console",
        "functionName": "console.error",
        "fullMemberPath": "console.error",
        "methodChain": [
          "error"
        ],
        "isChainedCall": true
      },
      "supabase.rpc": {
        "source": "@/lib/supabaseClient",
        "type": "alias",
        "importedName": "supabase",
        "localName": "supabase",
        "memberOf": "supabase",
        "functionName": "supabase.rpc",
        "fullMemberPath": "supabase.rpc",
        "methodChain": [
          "rpc"
        ],
        "isChainedCall": true
      },
      "error.includes": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "error",
        "functionName": "error.includes",
        "fullMemberPath": "error.includes",
        "methodChain": [
          "includes"
        ],
        "isChainedCall": true
      },
      "supabase.from.select.limit": {
        "source": "@/lib/supabaseClient",
        "type": "alias",
        "importedName": "supabase",
        "localName": "supabase",
        "memberOf": "supabase",
        "functionName": "supabase.from.select.limit",
        "fullMemberPath": "supabase.from.select.limit",
        "methodChain": [
          "from",
          "select",
          "limit"
        ],
        "isChainedCall": true
      },
      "clearTableData": {
        "source": "local",
        "type": "local",
        "importedName": "clearTableData",
        "localName": "clearTableData"
      },
      "supabase.from.select.order.limit": {
        "source": "@/lib/supabaseClient",
        "type": "alias",
        "importedName": "supabase",
        "localName": "supabase",
        "memberOf": "supabase",
        "functionName": "supabase.from.select.order.limit",
        "fullMemberPath": "supabase.from.select.order.limit",
        "methodChain": [
          "from",
          "select",
          "order",
          "limit"
        ],
        "isChainedCall": true
      },
      "transactions.map": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "transactions",
        "functionName": "transactions.map",
        "fullMemberPath": "transactions.map",
        "methodChain": [
          "map"
        ],
        "isChainedCall": true
      },
      "supabase.from.insert": {
        "source": "@/lib/supabaseClient",
        "type": "alias",
        "importedName": "supabase",
        "localName": "supabase",
        "memberOf": "supabase",
        "functionName": "supabase.from.insert",
        "fullMemberPath": "supabase.from.insert",
        "methodChain": [
          "from",
          "insert"
        ],
        "isChainedCall": true
      },
      "supabase.from.delete.neq": {
        "source": "@/lib/supabaseClient",
        "type": "alias",
        "importedName": "supabase",
        "localName": "supabase",
        "memberOf": "supabase",
        "functionName": "supabase.from.delete.neq",
        "fullMemberPath": "supabase.from.delete.neq",
        "methodChain": [
          "from",
          "delete",
          "neq"
        ],
        "isChainedCall": true
      }
    },
    "destructuredFunctions": {}
  },
  "about/page.tsx": {
    "defined": [
      "AboutPage"
    ],
    "called": [
      "useState"
    ],
    "both": [],
    "imports": {
      "useState": {
        "source": "react",
        "type": "npm",
        "importedName": "useState",
        "localName": "useState"
      },
      "Card": {
        "source": "@/components/ui/card",
        "type": "alias",
        "importedName": "Card",
        "localName": "Card"
      },
      "CardContent": {
        "source": "@/components/ui/card",
        "type": "alias",
        "importedName": "CardContent",
        "localName": "CardContent"
      },
      "CardHeader": {
        "source": "@/components/ui/card",
        "type": "alias",
        "importedName": "CardHeader",
        "localName": "CardHeader"
      },
      "CardTitle": {
        "source": "@/components/ui/card",
        "type": "alias",
        "importedName": "CardTitle",
        "localName": "CardTitle"
      },
      "Tabs": {
        "source": "@/components/ui/tabs",
        "type": "alias",
        "importedName": "Tabs",
        "localName": "Tabs"
      },
      "TabsList": {
        "source": "@/components/ui/tabs",
        "type": "alias",
        "importedName": "TabsList",
        "localName": "TabsList"
      },
      "TabsTrigger": {
        "source": "@/components/ui/tabs",
        "type": "alias",
        "importedName": "TabsTrigger",
        "localName": "TabsTrigger"
      },
      "Image": {
        "source": "next/image",
        "type": "npm",
        "importedName": "default",
        "localName": "Image"
      },
      "ProtectedRoute": {
        "source": "@/components/protected-route",
        "type": "alias",
        "importedName": "default",
        "localName": "ProtectedRoute"
      }
    },
    "calledWithImports": {
      "useState": {
        "source": "react",
        "type": "npm",
        "importedName": "useState",
        "localName": "useState"
      }
    },
    "destructuredFunctions": {
      "activeTab": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "activeTab"
      },
      "setActiveTab": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setActiveTab"
      }
    }
  },
  "sjprio/chart/page.tsx": {
    "defined": [
      "CategoryChartPage",
      "fetchTransactions"
    ],
    "called": [
      "console.error",
      "fetchTransactions",
      "setTransactions",
      "supabase.from.select.eq.eq",
      "transactions.filter",
      "useAuth",
      "useEffect",
      "useState"
    ],
    "both": [
      "fetchTransactions"
    ],
    "imports": {
      "useEffect": {
        "source": "react",
        "type": "npm",
        "importedName": "useEffect",
        "localName": "useEffect"
      },
      "useState": {
        "source": "react",
        "type": "npm",
        "importedName": "useState",
        "localName": "useState"
      },
      "supabase": {
        "source": "../../../lib/supabaseClient",
        "type": "relative",
        "importedName": "supabase",
        "localName": "supabase"
      },
      "useAuth": {
        "source": "../../../context/AuthContext",
        "type": "relative",
        "importedName": "useAuth",
        "localName": "useAuth"
      },
      "CustomBarChart": {
        "source": "@/components/ui/custombarchart",
        "type": "alias",
        "importedName": "CustomBarChart",
        "localName": "CustomBarChart"
      },
      "ProtectedRoute": {
        "source": "@/components/protected-route",
        "type": "alias",
        "importedName": "default",
        "localName": "ProtectedRoute"
      }
    },
    "calledWithImports": {
      "useAuth": {
        "source": "../../../context/AuthContext",
        "type": "relative",
        "importedName": "useAuth",
        "localName": "useAuth"
      },
      "useState": {
        "source": "react",
        "type": "npm",
        "importedName": "useState",
        "localName": "useState"
      },
      "useEffect": {
        "source": "react",
        "type": "npm",
        "importedName": "useEffect",
        "localName": "useEffect"
      },
      "supabase.from.select.eq.eq": {
        "source": "../../../lib/supabaseClient",
        "type": "relative",
        "importedName": "supabase",
        "localName": "supabase",
        "memberOf": "supabase",
        "functionName": "supabase.from.select.eq.eq",
        "fullMemberPath": "supabase.from.select.eq.eq",
        "methodChain": [
          "from",
          "select",
          "eq",
          "eq"
        ],
        "isChainedCall": true
      },
      "console.error": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "console",
        "functionName": "console.error",
        "fullMemberPath": "console.error",
        "methodChain": [
          "error"
        ],
        "isChainedCall": true
      },
      "setTransactions": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setTransactions"
      },
      "fetchTransactions": {
        "source": "local",
        "type": "local",
        "importedName": "fetchTransactions",
        "localName": "fetchTransactions"
      },
      "transactions.filter": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "transactions",
        "functionName": "transactions.filter",
        "fullMemberPath": "transactions.filter",
        "methodChain": [
          "filter"
        ],
        "isChainedCall": true
      }
    },
    "destructuredFunctions": {
      "transactions": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "transactions"
      },
      "setTransactions": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setTransactions"
      }
    }
  },
  "inter-account/info/page.tsx": {
    "defined": [
      "InterAccountInfo"
    ],
    "called": [],
    "both": [],
    "imports": {
      "Button": {
        "source": "@/components/ui/button",
        "type": "alias",
        "importedName": "Button",
        "localName": "Button"
      },
      "ProtectedRoute": {
        "source": "@/components/protected-route",
        "type": "alias",
        "importedName": "default",
        "localName": "ProtectedRoute"
      },
      "DataFlowDiagram": {
        "source": "@/components/DataFlowDiagram",
        "type": "alias",
        "importedName": "default",
        "localName": "DataFlowDiagram"
      },
      "Card": {
        "source": "@/components/ui/card",
        "type": "alias",
        "importedName": "Card",
        "localName": "Card"
      },
      "CardContent": {
        "source": "@/components/ui/card",
        "type": "alias",
        "importedName": "CardContent",
        "localName": "CardContent"
      },
      "CardDescription": {
        "source": "@/components/ui/card",
        "type": "alias",
        "importedName": "CardDescription",
        "localName": "CardDescription"
      },
      "CardHeader": {
        "source": "@/components/ui/card",
        "type": "alias",
        "importedName": "CardHeader",
        "localName": "CardHeader"
      },
      "CardTitle": {
        "source": "@/components/ui/card",
        "type": "alias",
        "importedName": "CardTitle",
        "localName": "CardTitle"
      },
      "ArrowLeft": {
        "source": "lucide-react",
        "type": "npm",
        "importedName": "ArrowLeft",
        "localName": "ArrowLeft"
      },
      "Info": {
        "source": "lucide-react",
        "type": "npm",
        "importedName": "Info",
        "localName": "Info"
      },
      "Table": {
        "source": "lucide-react",
        "type": "npm",
        "importedName": "Table",
        "localName": "Table"
      },
      "BarChart3": {
        "source": "lucide-react",
        "type": "npm",
        "importedName": "BarChart3",
        "localName": "BarChart3"
      },
      "Filter": {
        "source": "lucide-react",
        "type": "npm",
        "importedName": "Filter",
        "localName": "Filter"
      },
      "MousePointer": {
        "source": "lucide-react",
        "type": "npm",
        "importedName": "MousePointer",
        "localName": "MousePointer"
      }
    },
    "calledWithImports": {},
    "destructuredFunctions": {}
  },
  "inter/chart/page.tsx": {
    "defined": [
      "CategoryChartPage",
      "fetchTransactions"
    ],
    "called": [
      "console.error",
      "fetchTransactions",
      "setTransactions",
      "supabase.from.select.eq.eq",
      "transactions.filter",
      "useAuth",
      "useEffect",
      "useState"
    ],
    "both": [
      "fetchTransactions"
    ],
    "imports": {
      "useEffect": {
        "source": "react",
        "type": "npm",
        "importedName": "useEffect",
        "localName": "useEffect"
      },
      "useState": {
        "source": "react",
        "type": "npm",
        "importedName": "useState",
        "localName": "useState"
      },
      "supabase": {
        "source": "../../../lib/supabaseClient",
        "type": "relative",
        "importedName": "supabase",
        "localName": "supabase"
      },
      "useAuth": {
        "source": "../../../context/AuthContext",
        "type": "relative",
        "importedName": "useAuth",
        "localName": "useAuth"
      },
      "CustomBarChart": {
        "source": "@/components/ui/custombarchart",
        "type": "alias",
        "importedName": "CustomBarChart",
        "localName": "CustomBarChart"
      },
      "ProtectedRoute": {
        "source": "@/components/protected-route",
        "type": "alias",
        "importedName": "default",
        "localName": "ProtectedRoute"
      }
    },
    "calledWithImports": {
      "useAuth": {
        "source": "../../../context/AuthContext",
        "type": "relative",
        "importedName": "useAuth",
        "localName": "useAuth"
      },
      "useState": {
        "source": "react",
        "type": "npm",
        "importedName": "useState",
        "localName": "useState"
      },
      "useEffect": {
        "source": "react",
        "type": "npm",
        "importedName": "useEffect",
        "localName": "useEffect"
      },
      "supabase.from.select.eq.eq": {
        "source": "../../../lib/supabaseClient",
        "type": "relative",
        "importedName": "supabase",
        "localName": "supabase",
        "memberOf": "supabase",
        "functionName": "supabase.from.select.eq.eq",
        "fullMemberPath": "supabase.from.select.eq.eq",
        "methodChain": [
          "from",
          "select",
          "eq",
          "eq"
        ],
        "isChainedCall": true
      },
      "console.error": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "console",
        "functionName": "console.error",
        "fullMemberPath": "console.error",
        "methodChain": [
          "error"
        ],
        "isChainedCall": true
      },
      "setTransactions": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setTransactions"
      },
      "fetchTransactions": {
        "source": "local",
        "type": "local",
        "importedName": "fetchTransactions",
        "localName": "fetchTransactions"
      },
      "transactions.filter": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "transactions",
        "functionName": "transactions.filter",
        "fullMemberPath": "transactions.filter",
        "methodChain": [
          "filter"
        ],
        "isChainedCall": true
      }
    },
    "destructuredFunctions": {
      "transactions": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "transactions"
      },
      "setTransactions": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setTransactions"
      }
    }
  },
  "global/chart/page.tsx": {
    "defined": [
      "CategoryChartPage",
      "fetchTransactions"
    ],
    "called": [
      "console.error",
      "fetchTransactions",
      "setTransactions",
      "supabase.from.select.eq",
      "transactions.filter",
      "useAuth",
      "useEffect",
      "useState"
    ],
    "both": [
      "fetchTransactions"
    ],
    "imports": {
      "useEffect": {
        "source": "react",
        "type": "npm",
        "importedName": "useEffect",
        "localName": "useEffect"
      },
      "useState": {
        "source": "react",
        "type": "npm",
        "importedName": "useState",
        "localName": "useState"
      },
      "supabase": {
        "source": "../../../lib/supabaseClient",
        "type": "relative",
        "importedName": "supabase",
        "localName": "supabase"
      },
      "useAuth": {
        "source": "../../../context/AuthContext",
        "type": "relative",
        "importedName": "useAuth",
        "localName": "useAuth"
      },
      "CustomBarChart": {
        "source": "@/components/ui/custombarchart",
        "type": "alias",
        "importedName": "CustomBarChart",
        "localName": "CustomBarChart"
      },
      "ProtectedRoute": {
        "source": "@/components/protected-route",
        "type": "alias",
        "importedName": "default",
        "localName": "ProtectedRoute"
      }
    },
    "calledWithImports": {
      "useAuth": {
        "source": "../../../context/AuthContext",
        "type": "relative",
        "importedName": "useAuth",
        "localName": "useAuth"
      },
      "useState": {
        "source": "react",
        "type": "npm",
        "importedName": "useState",
        "localName": "useState"
      },
      "useEffect": {
        "source": "react",
        "type": "npm",
        "importedName": "useEffect",
        "localName": "useEffect"
      },
      "supabase.from.select.eq": {
        "source": "../../../lib/supabaseClient",
        "type": "relative",
        "importedName": "supabase",
        "localName": "supabase",
        "memberOf": "supabase",
        "functionName": "supabase.from.select.eq",
        "fullMemberPath": "supabase.from.select.eq",
        "methodChain": [
          "from",
          "select",
          "eq"
        ],
        "isChainedCall": true
      },
      "console.error": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "console",
        "functionName": "console.error",
        "fullMemberPath": "console.error",
        "methodChain": [
          "error"
        ],
        "isChainedCall": true
      },
      "setTransactions": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setTransactions"
      },
      "fetchTransactions": {
        "source": "local",
        "type": "local",
        "importedName": "fetchTransactions",
        "localName": "fetchTransactions"
      },
      "transactions.filter": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "transactions",
        "functionName": "transactions.filter",
        "fullMemberPath": "transactions.filter",
        "methodChain": [
          "filter"
        ],
        "isChainedCall": true
      }
    },
    "destructuredFunctions": {
      "transactions": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "transactions"
      },
      "setTransactions": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setTransactions"
      }
    }
  },
  "documentation/functions/page.tsx": {
    "defined": [
      "FunctionAnalysisPage",
      "getAllFileNames",
      "getCellContent",
      "getCellStyle",
      "getCellValueCounts",
      "getFilteredFileNames",
      "getFunctionSource",
      "getFunctionType",
      "getSortIndicator",
      "getSourceWeight",
      "getTypeWeight",
      "getUniqueSources",
      "getUniqueTypes",
      "getUniqueValuesInFile",
      "getVisibleColumnCount",
      "getWeight",
      "handleColumnFilterChange",
      "handleColumnFilterSelectAll",
      "handleColumnVisibilityChange",
      "handleColumnVisibilitySelectAll",
      "handleReportSelection",
      "handleSort",
      "loadAvailableReports",
      "loadReportData"
    ],
    "called": [
      "Array.from",
      "Array.from.sort",
      "Math.min",
      "Object.entries.some",
      "Object.keys",
      "Object.keys.filter.sort",
      "Object.keys.find",
      "Object.keys.forEach",
      "Object.keys.sort",
      "Object.values.filter",
      "Object.values.forEach",
      "Object.values.reduce",
      "Object.values.some",
      "a.localeCompare",
      "aSource.localeCompare",
      "allFileNames.forEach",
      "allFunctions.add",
      "allFunctions.forEach",
      "availableReports.map",
      "columnFilter.has",
      "console.error",
      "currentSet.add",
      "currentSet.delete",
      "fetch",
      "fileData.forEach",
      "fileData.includes",
      "fileName.replace",
      "fileName.split.pop",
      "filtered.filter",
      "filtered.slice",
      "filtered.sort",
      "filteredFileNames.every",
      "filteredFileNames.map",
      "filteredFunctions.map",
      "func.toLowerCase.includes",
      "functions.filter",
      "functions.sort",
      "getAllFileNames",
      "getAllFunctions.filter",
      "getCellContent",
      "getCellStyle",
      "getCellValueCounts",
      "getFilteredFileNames",
      "getFunctionSource",
      "getFunctionType",
      "getSortIndicator",
      "getSourceWeight",
      "getTypeWeight",
      "getUniqueSources",
      "getUniqueTypes",
      "getUniqueValuesInFile",
      "getVisibleColumnCount",
      "getWeight",
      "handleColumnFilterChange",
      "handleColumnFilterSelectAll",
      "handleColumnVisibilityChange",
      "handleColumnVisibilitySelectAll",
      "handleSort",
      "loadAvailableReports",
      "loadReportData",
      "map",
      "maxRowsToShow.toString",
      "parseInt",
      "response.json",
      "searchFilter.toLowerCase",
      "searchFilter.trim",
      "setAvailableReports",
      "setColumnFilters",
      "setColumnVisibility",
      "setError",
      "setFunctionCount",
      "setIsDataLoaded",
      "setLoading",
      "setMaxRowsToShow",
      "setReportData",
      "setSearchFilter",
      "setSelectedReport",
      "setShowTable",
      "setSortState",
      "sourceFilter.has",
      "sources.add",
      "totalFunctions.add",
      "typeFilter.has",
      "types.add",
      "uniqueValues.add",
      "uniqueValues.map",
      "useEffect",
      "useMemo",
      "useState"
    ],
    "both": [
      "getAllFileNames",
      "getCellContent",
      "getCellStyle",
      "getCellValueCounts",
      "getFilteredFileNames",
      "getFunctionSource",
      "getFunctionType",
      "getSortIndicator",
      "getSourceWeight",
      "getTypeWeight",
      "getUniqueSources",
      "getUniqueTypes",
      "getUniqueValuesInFile",
      "getVisibleColumnCount",
      "getWeight",
      "handleColumnFilterChange",
      "handleColumnFilterSelectAll",
      "handleColumnVisibilityChange",
      "handleColumnVisibilitySelectAll",
      "handleSort",
      "loadAvailableReports",
      "loadReportData"
    ],
    "imports": {
      "useState": {
        "source": "react",
        "type": "npm",
        "importedName": "useState",
        "localName": "useState"
      },
      "useEffect": {
        "source": "react",
        "type": "npm",
        "importedName": "useEffect",
        "localName": "useEffect"
      },
      "useMemo": {
        "source": "react",
        "type": "npm",
        "importedName": "useMemo",
        "localName": "useMemo"
      },
      "Card": {
        "source": "@/components/ui/card",
        "type": "alias",
        "importedName": "Card",
        "localName": "Card"
      },
      "CardContent": {
        "source": "@/components/ui/card",
        "type": "alias",
        "importedName": "CardContent",
        "localName": "CardContent"
      },
      "CardHeader": {
        "source": "@/components/ui/card",
        "type": "alias",
        "importedName": "CardHeader",
        "localName": "CardHeader"
      },
      "CardTitle": {
        "source": "@/components/ui/card",
        "type": "alias",
        "importedName": "CardTitle",
        "localName": "CardTitle"
      },
      "Select": {
        "source": "@/components/ui/select",
        "type": "alias",
        "importedName": "Select",
        "localName": "Select"
      },
      "SelectContent": {
        "source": "@/components/ui/select",
        "type": "alias",
        "importedName": "SelectContent",
        "localName": "SelectContent"
      },
      "SelectItem": {
        "source": "@/components/ui/select",
        "type": "alias",
        "importedName": "SelectItem",
        "localName": "SelectItem"
      },
      "SelectTrigger": {
        "source": "@/components/ui/select",
        "type": "alias",
        "importedName": "SelectTrigger",
        "localName": "SelectTrigger"
      },
      "SelectValue": {
        "source": "@/components/ui/select",
        "type": "alias",
        "importedName": "SelectValue",
        "localName": "SelectValue"
      },
      "Button": {
        "source": "@/components/ui/button",
        "type": "alias",
        "importedName": "Button",
        "localName": "Button"
      },
      "Badge": {
        "source": "@/components/ui/badge",
        "type": "alias",
        "importedName": "Badge",
        "localName": "Badge"
      },
      "Input": {
        "source": "@/components/ui/input",
        "type": "alias",
        "importedName": "Input",
        "localName": "Input"
      },
      "DropdownMenu": {
        "source": "@/components/ui/dropdown-menu",
        "type": "alias",
        "importedName": "DropdownMenu",
        "localName": "DropdownMenu"
      },
      "DropdownMenuContent": {
        "source": "@/components/ui/dropdown-menu",
        "type": "alias",
        "importedName": "DropdownMenuContent",
        "localName": "DropdownMenuContent"
      },
      "DropdownMenuItem": {
        "source": "@/components/ui/dropdown-menu",
        "type": "alias",
        "importedName": "DropdownMenuItem",
        "localName": "DropdownMenuItem"
      },
      "DropdownMenuTrigger": {
        "source": "@/components/ui/dropdown-menu",
        "type": "alias",
        "importedName": "DropdownMenuTrigger",
        "localName": "DropdownMenuTrigger"
      },
      "DropdownMenuSeparator": {
        "source": "@/components/ui/dropdown-menu",
        "type": "alias",
        "importedName": "DropdownMenuSeparator",
        "localName": "DropdownMenuSeparator"
      },
      "DropdownMenuCheckboxItem": {
        "source": "@/components/ui/dropdown-menu",
        "type": "alias",
        "importedName": "DropdownMenuCheckboxItem",
        "localName": "DropdownMenuCheckboxItem"
      },
      "Checkbox": {
        "source": "@/components/ui/checkbox",
        "type": "alias",
        "importedName": "Checkbox",
        "localName": "Checkbox"
      },
      "ChevronDown": {
        "source": "lucide-react",
        "type": "npm",
        "importedName": "ChevronDown",
        "localName": "ChevronDown"
      },
      "Filter": {
        "source": "lucide-react",
        "type": "npm",
        "importedName": "Filter",
        "localName": "Filter"
      },
      "ProtectedRoute": {
        "source": "@/components/protected-route",
        "type": "alias",
        "importedName": "default",
        "localName": "ProtectedRoute"
      }
    },
    "calledWithImports": {
      "useState": {
        "source": "react",
        "type": "npm",
        "importedName": "useState",
        "localName": "useState"
      },
      "useEffect": {
        "source": "react",
        "type": "npm",
        "importedName": "useEffect",
        "localName": "useEffect"
      },
      "loadAvailableReports": {
        "source": "local",
        "type": "local",
        "importedName": "loadAvailableReports",
        "localName": "loadAvailableReports"
      },
      "fetch": {
        "source": "unknown",
        "type": "unknown",
        "importedName": "fetch",
        "localName": "fetch"
      },
      "response.json": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "response",
        "functionName": "response.json",
        "fullMemberPath": "response.json",
        "methodChain": [
          "json"
        ],
        "isChainedCall": true
      },
      "setAvailableReports": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setAvailableReports"
      },
      "setError": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setError"
      },
      "console.error": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "console",
        "functionName": "console.error",
        "fullMemberPath": "console.error",
        "methodChain": [
          "error"
        ],
        "isChainedCall": true
      },
      "setLoading": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setLoading"
      },
      "setIsDataLoaded": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setIsDataLoaded"
      },
      "setShowTable": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setShowTable"
      },
      "setReportData": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setReportData"
      },
      "Object.values.forEach": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "Object",
        "functionName": "Object.values.forEach",
        "fullMemberPath": "Object.values.forEach",
        "methodChain": [
          "values",
          "forEach"
        ],
        "isChainedCall": true
      },
      "fileData.forEach": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "fileData",
        "functionName": "fileData.forEach",
        "fullMemberPath": "fileData.forEach",
        "methodChain": [
          "forEach"
        ],
        "isChainedCall": true
      },
      "totalFunctions.add": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "totalFunctions",
        "functionName": "totalFunctions.add",
        "fullMemberPath": "totalFunctions.add",
        "methodChain": [
          "add"
        ],
        "isChainedCall": true
      },
      "setFunctionCount": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setFunctionCount"
      },
      "setSelectedReport": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setSelectedReport"
      },
      "loadReportData": {
        "source": "local",
        "type": "local",
        "importedName": "loadReportData",
        "localName": "loadReportData"
      },
      "useMemo": {
        "source": "react",
        "type": "npm",
        "importedName": "useMemo",
        "localName": "useMemo"
      },
      "allFunctions.add": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "allFunctions",
        "functionName": "allFunctions.add",
        "fullMemberPath": "allFunctions.add",
        "methodChain": [
          "add"
        ],
        "isChainedCall": true
      },
      "Array.from": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "Array",
        "functionName": "Array.from",
        "fullMemberPath": "Array.from",
        "methodChain": [
          "from"
        ],
        "isChainedCall": true
      },
      "searchFilter.trim": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "searchFilter",
        "functionName": "searchFilter.trim",
        "fullMemberPath": "searchFilter.trim",
        "methodChain": [
          "trim"
        ],
        "isChainedCall": true
      },
      "searchFilter.toLowerCase": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "searchFilter",
        "functionName": "searchFilter.toLowerCase",
        "fullMemberPath": "searchFilter.toLowerCase",
        "methodChain": [
          "toLowerCase"
        ],
        "isChainedCall": true
      },
      "functions.filter": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "functions",
        "functionName": "functions.filter",
        "fullMemberPath": "functions.filter",
        "methodChain": [
          "filter"
        ],
        "isChainedCall": true
      },
      "func.toLowerCase.includes": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "func",
        "functionName": "func.toLowerCase.includes",
        "fullMemberPath": "func.toLowerCase.includes",
        "methodChain": [
          "toLowerCase",
          "includes"
        ],
        "isChainedCall": true
      },
      "functions.sort": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "functions",
        "functionName": "functions.sort",
        "fullMemberPath": "functions.sort",
        "methodChain": [
          "sort"
        ],
        "isChainedCall": true
      },
      "Object.keys.filter.sort": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "Object",
        "functionName": "Object.keys.filter.sort",
        "fullMemberPath": "Object.keys.filter.sort",
        "methodChain": [
          "keys",
          "filter",
          "sort"
        ],
        "isChainedCall": true
      },
      "Object.keys.sort": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "Object",
        "functionName": "Object.keys.sort",
        "fullMemberPath": "Object.keys.sort",
        "methodChain": [
          "keys",
          "sort"
        ],
        "isChainedCall": true
      },
      "allFunctions.forEach": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "allFunctions",
        "functionName": "allFunctions.forEach",
        "fullMemberPath": "allFunctions.forEach",
        "methodChain": [
          "forEach"
        ],
        "isChainedCall": true
      },
      "getCellContent": {
        "source": "local",
        "type": "local",
        "importedName": "getCellContent",
        "localName": "getCellContent"
      },
      "uniqueValues.add": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "uniqueValues",
        "functionName": "uniqueValues.add",
        "fullMemberPath": "uniqueValues.add",
        "methodChain": [
          "add"
        ],
        "isChainedCall": true
      },
      "Array.from.sort": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "Array",
        "functionName": "Array.from.sort",
        "fullMemberPath": "Array.from.sort",
        "methodChain": [
          "from",
          "sort"
        ],
        "isChainedCall": true
      },
      "a.localeCompare": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "a",
        "functionName": "a.localeCompare",
        "fullMemberPath": "a.localeCompare",
        "methodChain": [
          "localeCompare"
        ],
        "isChainedCall": true
      },
      "fileData.includes": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "fileData",
        "functionName": "fileData.includes",
        "fullMemberPath": "fileData.includes",
        "methodChain": [
          "includes"
        ],
        "isChainedCall": true
      },
      "Object.keys.forEach": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "Object",
        "functionName": "Object.keys.forEach",
        "fullMemberPath": "Object.keys.forEach",
        "methodChain": [
          "keys",
          "forEach"
        ],
        "isChainedCall": true
      },
      "getUniqueValuesInFile": {
        "source": "local",
        "type": "local",
        "importedName": "getUniqueValuesInFile",
        "localName": "getUniqueValuesInFile"
      },
      "getUniqueTypes": {
        "source": "local",
        "type": "local",
        "importedName": "getUniqueTypes",
        "localName": "getUniqueTypes"
      },
      "getUniqueSources": {
        "source": "local",
        "type": "local",
        "importedName": "getUniqueSources",
        "localName": "getUniqueSources"
      },
      "setColumnFilters": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setColumnFilters"
      },
      "setColumnVisibility": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setColumnVisibility"
      },
      "currentSet.add": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "currentSet",
        "functionName": "currentSet.add",
        "fullMemberPath": "currentSet.add",
        "methodChain": [
          "add"
        ],
        "isChainedCall": true
      },
      "currentSet.delete": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "currentSet",
        "functionName": "currentSet.delete",
        "fullMemberPath": "currentSet.delete",
        "methodChain": [
          "delete"
        ],
        "isChainedCall": true
      },
      "getAllFileNames": {
        "source": "local",
        "type": "local",
        "importedName": "getAllFileNames",
        "localName": "getAllFileNames"
      },
      "allFileNames.forEach": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "allFileNames",
        "functionName": "allFileNames.forEach",
        "fullMemberPath": "allFileNames.forEach",
        "methodChain": [
          "forEach"
        ],
        "isChainedCall": true
      },
      "Object.values.filter": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "Object",
        "functionName": "Object.values.filter",
        "fullMemberPath": "Object.values.filter",
        "methodChain": [
          "values",
          "filter"
        ],
        "isChainedCall": true
      },
      "getFunctionType": {
        "source": "local",
        "type": "local",
        "importedName": "getFunctionType",
        "localName": "getFunctionType"
      },
      "types.add": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "types",
        "functionName": "types.add",
        "fullMemberPath": "types.add",
        "methodChain": [
          "add"
        ],
        "isChainedCall": true
      },
      "getFunctionSource": {
        "source": "local",
        "type": "local",
        "importedName": "getFunctionSource",
        "localName": "getFunctionSource"
      },
      "sources.add": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "sources",
        "functionName": "sources.add",
        "fullMemberPath": "sources.add",
        "methodChain": [
          "add"
        ],
        "isChainedCall": true
      },
      "Object.keys": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "Object",
        "functionName": "Object.keys",
        "fullMemberPath": "Object.keys",
        "methodChain": [
          "keys"
        ],
        "isChainedCall": true
      },
      "filtered.filter": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "filtered",
        "functionName": "filtered.filter",
        "fullMemberPath": "filtered.filter",
        "methodChain": [
          "filter"
        ],
        "isChainedCall": true
      },
      "getFilteredFileNames": {
        "source": "local",
        "type": "local",
        "importedName": "getFilteredFileNames",
        "localName": "getFilteredFileNames"
      },
      "filteredFileNames.every": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "filteredFileNames",
        "functionName": "filteredFileNames.every",
        "fullMemberPath": "filteredFileNames.every",
        "methodChain": [
          "every"
        ],
        "isChainedCall": true
      },
      "columnFilter.has": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "columnFilter",
        "functionName": "columnFilter.has",
        "fullMemberPath": "columnFilter.has",
        "methodChain": [
          "has"
        ],
        "isChainedCall": true
      },
      "typeFilter.has": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "typeFilter",
        "functionName": "typeFilter.has",
        "fullMemberPath": "typeFilter.has",
        "methodChain": [
          "has"
        ],
        "isChainedCall": true
      },
      "sourceFilter.has": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "sourceFilter",
        "functionName": "sourceFilter.has",
        "fullMemberPath": "sourceFilter.has",
        "methodChain": [
          "has"
        ],
        "isChainedCall": true
      },
      "filtered.sort": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "filtered",
        "functionName": "filtered.sort",
        "fullMemberPath": "filtered.sort",
        "methodChain": [
          "sort"
        ],
        "isChainedCall": true
      },
      "getTypeWeight": {
        "source": "local",
        "type": "local",
        "importedName": "getTypeWeight",
        "localName": "getTypeWeight"
      },
      "getSourceWeight": {
        "source": "local",
        "type": "local",
        "importedName": "getSourceWeight",
        "localName": "getSourceWeight"
      },
      "aSource.localeCompare": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "aSource",
        "functionName": "aSource.localeCompare",
        "fullMemberPath": "aSource.localeCompare",
        "methodChain": [
          "localeCompare"
        ],
        "isChainedCall": true
      },
      "getWeight": {
        "source": "local",
        "type": "local",
        "importedName": "getWeight",
        "localName": "getWeight"
      },
      "filtered.slice": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "filtered",
        "functionName": "filtered.slice",
        "fullMemberPath": "filtered.slice",
        "methodChain": [
          "slice"
        ],
        "isChainedCall": true
      },
      "setSortState": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setSortState"
      },
      "availableReports.map": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "availableReports",
        "functionName": "availableReports.map",
        "fullMemberPath": "availableReports.map",
        "methodChain": [
          "map"
        ],
        "isChainedCall": true
      },
      "Math.min": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "Math",
        "functionName": "Math.min",
        "fullMemberPath": "Math.min",
        "methodChain": [
          "min"
        ],
        "isChainedCall": true
      },
      "setSearchFilter": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setSearchFilter"
      },
      "maxRowsToShow.toString": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "maxRowsToShow",
        "functionName": "maxRowsToShow.toString",
        "fullMemberPath": "maxRowsToShow.toString",
        "methodChain": [
          "toString"
        ],
        "isChainedCall": true
      },
      "setMaxRowsToShow": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setMaxRowsToShow"
      },
      "parseInt": {
        "source": "unknown",
        "type": "unknown",
        "importedName": "parseInt",
        "localName": "parseInt"
      },
      "getVisibleColumnCount": {
        "source": "local",
        "type": "local",
        "importedName": "getVisibleColumnCount",
        "localName": "getVisibleColumnCount"
      },
      "handleColumnVisibilitySelectAll": {
        "source": "local",
        "type": "local",
        "importedName": "handleColumnVisibilitySelectAll",
        "localName": "handleColumnVisibilitySelectAll"
      },
      "map": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "unknown",
        "functionName": "map",
        "fullMemberPath": "map"
      },
      "handleColumnVisibilityChange": {
        "source": "local",
        "type": "local",
        "importedName": "handleColumnVisibilityChange",
        "localName": "handleColumnVisibilityChange"
      },
      "fileName.replace": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "fileName",
        "functionName": "fileName.replace",
        "fullMemberPath": "fileName.replace",
        "methodChain": [
          "replace"
        ],
        "isChainedCall": true
      },
      "fileName.split.pop": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "fileName",
        "functionName": "fileName.split.pop",
        "fullMemberPath": "fileName.split.pop",
        "methodChain": [
          "split",
          "pop"
        ],
        "isChainedCall": true
      },
      "Object.values.some": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "Object",
        "functionName": "Object.values.some",
        "fullMemberPath": "Object.values.some",
        "methodChain": [
          "values",
          "some"
        ],
        "isChainedCall": true
      },
      "Object.keys.find": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "Object",
        "functionName": "Object.keys.find",
        "fullMemberPath": "Object.keys.find",
        "methodChain": [
          "keys",
          "find"
        ],
        "isChainedCall": true
      },
      "Object.entries.some": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "Object",
        "functionName": "Object.entries.some",
        "fullMemberPath": "Object.entries.some",
        "methodChain": [
          "entries",
          "some"
        ],
        "isChainedCall": true
      },
      "handleSort": {
        "source": "local",
        "type": "local",
        "importedName": "handleSort",
        "localName": "handleSort"
      },
      "getSortIndicator": {
        "source": "local",
        "type": "local",
        "importedName": "getSortIndicator",
        "localName": "getSortIndicator"
      },
      "handleColumnFilterSelectAll": {
        "source": "local",
        "type": "local",
        "importedName": "handleColumnFilterSelectAll",
        "localName": "handleColumnFilterSelectAll"
      },
      "getAllFunctions.filter": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "getAllFunctions",
        "functionName": "getAllFunctions.filter",
        "fullMemberPath": "getAllFunctions.filter",
        "methodChain": [
          "filter"
        ],
        "isChainedCall": true
      },
      "handleColumnFilterChange": {
        "source": "local",
        "type": "local",
        "importedName": "handleColumnFilterChange",
        "localName": "handleColumnFilterChange"
      },
      "filteredFileNames.map": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "filteredFileNames",
        "functionName": "filteredFileNames.map",
        "fullMemberPath": "filteredFileNames.map",
        "methodChain": [
          "map"
        ],
        "isChainedCall": true
      },
      "uniqueValues.map": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "uniqueValues",
        "functionName": "uniqueValues.map",
        "fullMemberPath": "uniqueValues.map",
        "methodChain": [
          "map"
        ],
        "isChainedCall": true
      },
      "getCellValueCounts": {
        "source": "local",
        "type": "local",
        "importedName": "getCellValueCounts",
        "localName": "getCellValueCounts"
      },
      "filteredFunctions.map": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "filteredFunctions",
        "functionName": "filteredFunctions.map",
        "fullMemberPath": "filteredFunctions.map",
        "methodChain": [
          "map"
        ],
        "isChainedCall": true
      },
      "getCellStyle": {
        "source": "local",
        "type": "local",
        "importedName": "getCellStyle",
        "localName": "getCellStyle"
      },
      "Object.values.reduce": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "Object",
        "functionName": "Object.values.reduce",
        "fullMemberPath": "Object.values.reduce",
        "methodChain": [
          "values",
          "reduce"
        ],
        "isChainedCall": true
      }
    },
    "destructuredFunctions": {
      "availableReports": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "availableReports"
      },
      "setAvailableReports": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setAvailableReports"
      },
      "selectedReport": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "selectedReport"
      },
      "setSelectedReport": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setSelectedReport"
      },
      "reportData": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "reportData"
      },
      "setReportData": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setReportData"
      },
      "loading": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "loading"
      },
      "setLoading": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setLoading"
      },
      "error": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "error"
      },
      "setError": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setError"
      },
      "sortState": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "sortState"
      },
      "setSortState": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setSortState"
      },
      "columnFilters": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "columnFilters"
      },
      "setColumnFilters": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setColumnFilters"
      },
      "columnVisibility": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "columnVisibility"
      },
      "setColumnVisibility": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setColumnVisibility"
      },
      "isDataLoaded": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "isDataLoaded"
      },
      "setIsDataLoaded": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setIsDataLoaded"
      },
      "showTable": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "showTable"
      },
      "setShowTable": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setShowTable"
      },
      "maxRowsToShow": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "maxRowsToShow"
      },
      "setMaxRowsToShow": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setMaxRowsToShow"
      },
      "searchFilter": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "searchFilter"
      },
      "setSearchFilter": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setSearchFilter"
      },
      "functionCount": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "functionCount"
      },
      "setFunctionCount": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setFunctionCount"
      }
    }
  },
  "auth/signup/page.tsx": {
    "defined": [
      "SignupPage",
      "handleOAuthSignup",
      "handleSubmit"
    ],
    "called": [
      "console.error",
      "e.preventDefault",
      "handleOAuthSignup",
      "router.push",
      "setConfirmPassword",
      "setEmail",
      "setLoading",
      "setName",
      "setPassword",
      "supabase.signInWithOAuth",
      "supabase.signUp",
      "toast.error",
      "toast.success",
      "useRouter",
      "useState"
    ],
    "both": [
      "handleOAuthSignup"
    ],
    "imports": {
      "useState": {
        "source": "react",
        "type": "npm",
        "importedName": "useState",
        "localName": "useState"
      },
      "Button": {
        "source": "@/components/ui/button",
        "type": "alias",
        "importedName": "Button",
        "localName": "Button"
      },
      "Input": {
        "source": "@/components/ui/input",
        "type": "alias",
        "importedName": "Input",
        "localName": "Input"
      },
      "Card": {
        "source": "@/components/ui/card",
        "type": "alias",
        "importedName": "Card",
        "localName": "Card"
      },
      "CardContent": {
        "source": "@/components/ui/card",
        "type": "alias",
        "importedName": "CardContent",
        "localName": "CardContent"
      },
      "CardHeader": {
        "source": "@/components/ui/card",
        "type": "alias",
        "importedName": "CardHeader",
        "localName": "CardHeader"
      },
      "CardTitle": {
        "source": "@/components/ui/card",
        "type": "alias",
        "importedName": "CardTitle",
        "localName": "CardTitle"
      },
      "Separator": {
        "source": "@/components/ui/separator",
        "type": "alias",
        "importedName": "Separator",
        "localName": "Separator"
      },
      "Link": {
        "source": "next/link",
        "type": "npm",
        "importedName": "default",
        "localName": "Link"
      },
      "supabase": {
        "source": "@/lib/supabaseClient",
        "type": "alias",
        "importedName": "supabase",
        "localName": "supabase"
      },
      "useRouter": {
        "source": "next/navigation",
        "type": "npm",
        "importedName": "useRouter",
        "localName": "useRouter"
      },
      "toast": {
        "source": "sonner",
        "type": "npm",
        "importedName": "toast",
        "localName": "toast"
      },
      "AuthError": {
        "source": "@supabase/supabase-js",
        "type": "npm",
        "importedName": "AuthError",
        "localName": "AuthError"
      }
    },
    "calledWithImports": {
      "useState": {
        "source": "react",
        "type": "npm",
        "importedName": "useState",
        "localName": "useState"
      },
      "useRouter": {
        "source": "next/navigation",
        "type": "npm",
        "importedName": "useRouter",
        "localName": "useRouter"
      },
      "e.preventDefault": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "e",
        "functionName": "e.preventDefault",
        "fullMemberPath": "e.preventDefault",
        "methodChain": [
          "preventDefault"
        ],
        "isChainedCall": true
      },
      "toast.error": {
        "source": "sonner",
        "type": "npm",
        "importedName": "toast",
        "localName": "toast",
        "memberOf": "toast",
        "functionName": "toast.error",
        "fullMemberPath": "toast.error",
        "methodChain": [
          "error"
        ],
        "isChainedCall": true
      },
      "setLoading": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setLoading"
      },
      "supabase.signUp": {
        "source": "@/lib/supabaseClient",
        "type": "alias",
        "importedName": "supabase",
        "localName": "supabase",
        "memberOf": "supabase",
        "functionName": "supabase.signUp",
        "fullMemberPath": "supabase.signUp",
        "methodChain": [
          "signUp"
        ],
        "isChainedCall": true
      },
      "toast.success": {
        "source": "sonner",
        "type": "npm",
        "importedName": "toast",
        "localName": "toast",
        "memberOf": "toast",
        "functionName": "toast.success",
        "fullMemberPath": "toast.success",
        "methodChain": [
          "success"
        ],
        "isChainedCall": true
      },
      "router.push": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "router",
        "functionName": "router.push",
        "fullMemberPath": "router.push",
        "methodChain": [
          "push"
        ],
        "isChainedCall": true
      },
      "console.error": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "console",
        "functionName": "console.error",
        "fullMemberPath": "console.error",
        "methodChain": [
          "error"
        ],
        "isChainedCall": true
      },
      "supabase.signInWithOAuth": {
        "source": "@/lib/supabaseClient",
        "type": "alias",
        "importedName": "supabase",
        "localName": "supabase",
        "memberOf": "supabase",
        "functionName": "supabase.signInWithOAuth",
        "fullMemberPath": "supabase.signInWithOAuth",
        "methodChain": [
          "signInWithOAuth"
        ],
        "isChainedCall": true
      },
      "handleOAuthSignup": {
        "source": "local",
        "type": "local",
        "importedName": "handleOAuthSignup",
        "localName": "handleOAuthSignup"
      },
      "setName": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setName"
      },
      "setEmail": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setEmail"
      },
      "setPassword": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setPassword"
      },
      "setConfirmPassword": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setConfirmPassword"
      }
    },
    "destructuredFunctions": {
      "name": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "name"
      },
      "setName": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setName"
      },
      "email": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "email"
      },
      "setEmail": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setEmail"
      },
      "password": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "password"
      },
      "setPassword": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setPassword"
      },
      "confirmPassword": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "confirmPassword"
      },
      "setConfirmPassword": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setConfirmPassword"
      },
      "loading": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "loading"
      },
      "setLoading": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setLoading"
      }
    }
  },
  "auth/reset-password/page.tsx": {
    "defined": [
      "ResetPasswordPage",
      "checkSession",
      "handleSubmit"
    ],
    "called": [
      "checkSession",
      "console.error",
      "console.log",
      "e.preventDefault",
      "router.push",
      "setConfirmPassword",
      "setIsTokenInUrl",
      "setLoading",
      "setPassword",
      "supabase.getSession",
      "supabase.signOut",
      "supabase.updateUser",
      "toast.error",
      "toast.success",
      "urlParams.get",
      "useEffect",
      "useRouter",
      "useState"
    ],
    "both": [
      "checkSession"
    ],
    "imports": {
      "useState": {
        "source": "react",
        "type": "npm",
        "importedName": "useState",
        "localName": "useState"
      },
      "useEffect": {
        "source": "react",
        "type": "npm",
        "importedName": "useEffect",
        "localName": "useEffect"
      },
      "Button": {
        "source": "@/components/ui/button",
        "type": "alias",
        "importedName": "Button",
        "localName": "Button"
      },
      "Input": {
        "source": "@/components/ui/input",
        "type": "alias",
        "importedName": "Input",
        "localName": "Input"
      },
      "Card": {
        "source": "@/components/ui/card",
        "type": "alias",
        "importedName": "Card",
        "localName": "Card"
      },
      "CardContent": {
        "source": "@/components/ui/card",
        "type": "alias",
        "importedName": "CardContent",
        "localName": "CardContent"
      },
      "CardHeader": {
        "source": "@/components/ui/card",
        "type": "alias",
        "importedName": "CardHeader",
        "localName": "CardHeader"
      },
      "CardTitle": {
        "source": "@/components/ui/card",
        "type": "alias",
        "importedName": "CardTitle",
        "localName": "CardTitle"
      },
      "useRouter": {
        "source": "next/navigation",
        "type": "npm",
        "importedName": "useRouter",
        "localName": "useRouter"
      },
      "supabase": {
        "source": "@/lib/supabaseClient",
        "type": "alias",
        "importedName": "supabase",
        "localName": "supabase"
      },
      "toast": {
        "source": "sonner",
        "type": "npm",
        "importedName": "toast",
        "localName": "toast"
      }
    },
    "calledWithImports": {
      "useState": {
        "source": "react",
        "type": "npm",
        "importedName": "useState",
        "localName": "useState"
      },
      "useRouter": {
        "source": "next/navigation",
        "type": "npm",
        "importedName": "useRouter",
        "localName": "useRouter"
      },
      "e.preventDefault": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "e",
        "functionName": "e.preventDefault",
        "fullMemberPath": "e.preventDefault",
        "methodChain": [
          "preventDefault"
        ],
        "isChainedCall": true
      },
      "setLoading": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setLoading"
      },
      "urlParams.get": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "urlParams",
        "functionName": "urlParams.get",
        "fullMemberPath": "urlParams.get",
        "methodChain": [
          "get"
        ],
        "isChainedCall": true
      },
      "console.log": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "console",
        "functionName": "console.log",
        "fullMemberPath": "console.log",
        "methodChain": [
          "log"
        ],
        "isChainedCall": true
      },
      "supabase.updateUser": {
        "source": "@/lib/supabaseClient",
        "type": "alias",
        "importedName": "supabase",
        "localName": "supabase",
        "memberOf": "supabase",
        "functionName": "supabase.updateUser",
        "fullMemberPath": "supabase.updateUser",
        "methodChain": [
          "updateUser"
        ],
        "isChainedCall": true
      },
      "supabase.signOut": {
        "source": "@/lib/supabaseClient",
        "type": "alias",
        "importedName": "supabase",
        "localName": "supabase",
        "memberOf": "supabase",
        "functionName": "supabase.signOut",
        "fullMemberPath": "supabase.signOut",
        "methodChain": [
          "signOut"
        ],
        "isChainedCall": true
      },
      "toast.success": {
        "source": "sonner",
        "type": "npm",
        "importedName": "toast",
        "localName": "toast",
        "memberOf": "toast",
        "functionName": "toast.success",
        "fullMemberPath": "toast.success",
        "methodChain": [
          "success"
        ],
        "isChainedCall": true
      },
      "router.push": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "router",
        "functionName": "router.push",
        "fullMemberPath": "router.push",
        "methodChain": [
          "push"
        ],
        "isChainedCall": true
      },
      "console.error": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "console",
        "functionName": "console.error",
        "fullMemberPath": "console.error",
        "methodChain": [
          "error"
        ],
        "isChainedCall": true
      },
      "toast.error": {
        "source": "sonner",
        "type": "npm",
        "importedName": "toast",
        "localName": "toast",
        "memberOf": "toast",
        "functionName": "toast.error",
        "fullMemberPath": "toast.error",
        "methodChain": [
          "error"
        ],
        "isChainedCall": true
      },
      "useEffect": {
        "source": "react",
        "type": "npm",
        "importedName": "useEffect",
        "localName": "useEffect"
      },
      "supabase.getSession": {
        "source": "@/lib/supabaseClient",
        "type": "alias",
        "importedName": "supabase",
        "localName": "supabase",
        "memberOf": "supabase",
        "functionName": "supabase.getSession",
        "fullMemberPath": "supabase.getSession",
        "methodChain": [
          "getSession"
        ],
        "isChainedCall": true
      },
      "setIsTokenInUrl": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setIsTokenInUrl"
      },
      "checkSession": {
        "source": "local",
        "type": "local",
        "importedName": "checkSession",
        "localName": "checkSession"
      },
      "setPassword": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setPassword"
      },
      "setConfirmPassword": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setConfirmPassword"
      }
    },
    "destructuredFunctions": {
      "password": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "password"
      },
      "setPassword": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setPassword"
      },
      "confirmPassword": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "confirmPassword"
      },
      "setConfirmPassword": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setConfirmPassword"
      },
      "loading": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "loading"
      },
      "setLoading": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setLoading"
      },
      "isTokenInUrl": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "isTokenInUrl"
      },
      "setIsTokenInUrl": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setIsTokenInUrl"
      }
    }
  },
  "auth/callback/route.ts": {
    "defined": [
      "GET"
    ],
    "called": [
      "NextResponse.redirect",
      "code.substring",
      "console.error",
      "console.log",
      "cookies",
      "createRouteHandlerClient",
      "requestUrl.get",
      "supabase.exchangeCodeForSession"
    ],
    "both": [],
    "imports": {
      "createRouteHandlerClient": {
        "source": "@supabase/auth-helpers-nextjs",
        "type": "npm",
        "importedName": "createRouteHandlerClient",
        "localName": "createRouteHandlerClient"
      },
      "cookies": {
        "source": "next/headers",
        "type": "npm",
        "importedName": "cookies",
        "localName": "cookies"
      },
      "NextResponse": {
        "source": "next/server",
        "type": "npm",
        "importedName": "NextResponse",
        "localName": "NextResponse"
      }
    },
    "calledWithImports": {
      "requestUrl.get": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "requestUrl",
        "functionName": "requestUrl.get",
        "fullMemberPath": "requestUrl.get",
        "methodChain": [
          "get"
        ],
        "isChainedCall": true
      },
      "cookies": {
        "source": "next/headers",
        "type": "npm",
        "importedName": "cookies",
        "localName": "cookies"
      },
      "createRouteHandlerClient": {
        "source": "@supabase/auth-helpers-nextjs",
        "type": "npm",
        "importedName": "createRouteHandlerClient",
        "localName": "createRouteHandlerClient"
      },
      "console.log": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "console",
        "functionName": "console.log",
        "fullMemberPath": "console.log",
        "methodChain": [
          "log"
        ],
        "isChainedCall": true
      },
      "code.substring": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "code",
        "functionName": "code.substring",
        "fullMemberPath": "code.substring",
        "methodChain": [
          "substring"
        ],
        "isChainedCall": true
      },
      "supabase.exchangeCodeForSession": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "supabase",
        "functionName": "supabase.exchangeCodeForSession",
        "fullMemberPath": "supabase.exchangeCodeForSession",
        "methodChain": [
          "exchangeCodeForSession"
        ],
        "isChainedCall": true
      },
      "console.error": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "console",
        "functionName": "console.error",
        "fullMemberPath": "console.error",
        "methodChain": [
          "error"
        ],
        "isChainedCall": true
      },
      "NextResponse.redirect": {
        "source": "next/server",
        "type": "npm",
        "importedName": "NextResponse",
        "localName": "NextResponse",
        "memberOf": "NextResponse",
        "functionName": "NextResponse.redirect",
        "fullMemberPath": "NextResponse.redirect",
        "methodChain": [
          "redirect"
        ],
        "isChainedCall": true
      }
    },
    "destructuredFunctions": {}
  },
  "auth/login/page.tsx": {
    "defined": [
      "LoginPage",
      "handleOAuthLogin",
      "handleSubmit"
    ],
    "called": [
      "console.error",
      "e.preventDefault",
      "handleOAuthLogin",
      "router.push",
      "router.refresh",
      "setEmail",
      "setLoading",
      "setPassword",
      "supabase.signInWithOAuth",
      "supabase.signInWithPassword",
      "toast.error",
      "toast.success",
      "useRouter",
      "useState"
    ],
    "both": [
      "handleOAuthLogin"
    ],
    "imports": {
      "useState": {
        "source": "react",
        "type": "npm",
        "importedName": "useState",
        "localName": "useState"
      },
      "Button": {
        "source": "@/components/ui/button",
        "type": "alias",
        "importedName": "Button",
        "localName": "Button"
      },
      "Input": {
        "source": "@/components/ui/input",
        "type": "alias",
        "importedName": "Input",
        "localName": "Input"
      },
      "Card": {
        "source": "@/components/ui/card",
        "type": "alias",
        "importedName": "Card",
        "localName": "Card"
      },
      "CardContent": {
        "source": "@/components/ui/card",
        "type": "alias",
        "importedName": "CardContent",
        "localName": "CardContent"
      },
      "CardHeader": {
        "source": "@/components/ui/card",
        "type": "alias",
        "importedName": "CardHeader",
        "localName": "CardHeader"
      },
      "CardTitle": {
        "source": "@/components/ui/card",
        "type": "alias",
        "importedName": "CardTitle",
        "localName": "CardTitle"
      },
      "Separator": {
        "source": "@/components/ui/separator",
        "type": "alias",
        "importedName": "Separator",
        "localName": "Separator"
      },
      "Link": {
        "source": "next/link",
        "type": "npm",
        "importedName": "default",
        "localName": "Link"
      },
      "supabase": {
        "source": "@/lib/supabaseClient",
        "type": "alias",
        "importedName": "supabase",
        "localName": "supabase"
      },
      "useRouter": {
        "source": "next/navigation",
        "type": "npm",
        "importedName": "useRouter",
        "localName": "useRouter"
      },
      "toast": {
        "source": "sonner",
        "type": "npm",
        "importedName": "toast",
        "localName": "toast"
      },
      "AuthError": {
        "source": "@supabase/supabase-js",
        "type": "npm",
        "importedName": "AuthError",
        "localName": "AuthError"
      }
    },
    "calledWithImports": {
      "useState": {
        "source": "react",
        "type": "npm",
        "importedName": "useState",
        "localName": "useState"
      },
      "useRouter": {
        "source": "next/navigation",
        "type": "npm",
        "importedName": "useRouter",
        "localName": "useRouter"
      },
      "e.preventDefault": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "e",
        "functionName": "e.preventDefault",
        "fullMemberPath": "e.preventDefault",
        "methodChain": [
          "preventDefault"
        ],
        "isChainedCall": true
      },
      "setLoading": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setLoading"
      },
      "supabase.signInWithPassword": {
        "source": "@/lib/supabaseClient",
        "type": "alias",
        "importedName": "supabase",
        "localName": "supabase",
        "memberOf": "supabase",
        "functionName": "supabase.signInWithPassword",
        "fullMemberPath": "supabase.signInWithPassword",
        "methodChain": [
          "signInWithPassword"
        ],
        "isChainedCall": true
      },
      "toast.success": {
        "source": "sonner",
        "type": "npm",
        "importedName": "toast",
        "localName": "toast",
        "memberOf": "toast",
        "functionName": "toast.success",
        "fullMemberPath": "toast.success",
        "methodChain": [
          "success"
        ],
        "isChainedCall": true
      },
      "router.push": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "router",
        "functionName": "router.push",
        "fullMemberPath": "router.push",
        "methodChain": [
          "push"
        ],
        "isChainedCall": true
      },
      "router.refresh": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "router",
        "functionName": "router.refresh",
        "fullMemberPath": "router.refresh",
        "methodChain": [
          "refresh"
        ],
        "isChainedCall": true
      },
      "toast.error": {
        "source": "sonner",
        "type": "npm",
        "importedName": "toast",
        "localName": "toast",
        "memberOf": "toast",
        "functionName": "toast.error",
        "fullMemberPath": "toast.error",
        "methodChain": [
          "error"
        ],
        "isChainedCall": true
      },
      "console.error": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "console",
        "functionName": "console.error",
        "fullMemberPath": "console.error",
        "methodChain": [
          "error"
        ],
        "isChainedCall": true
      },
      "supabase.signInWithOAuth": {
        "source": "@/lib/supabaseClient",
        "type": "alias",
        "importedName": "supabase",
        "localName": "supabase",
        "memberOf": "supabase",
        "functionName": "supabase.signInWithOAuth",
        "fullMemberPath": "supabase.signInWithOAuth",
        "methodChain": [
          "signInWithOAuth"
        ],
        "isChainedCall": true
      },
      "handleOAuthLogin": {
        "source": "local",
        "type": "local",
        "importedName": "handleOAuthLogin",
        "localName": "handleOAuthLogin"
      },
      "setEmail": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setEmail"
      },
      "setPassword": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setPassword"
      }
    },
    "destructuredFunctions": {
      "email": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "email"
      },
      "setEmail": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setEmail"
      },
      "password": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "password"
      },
      "setPassword": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setPassword"
      },
      "loading": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "loading"
      },
      "setLoading": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setLoading"
      }
    }
  },
  "api/function-reports/route.ts": {
    "defined": [
      "GET"
    ],
    "called": [
      "NextResponse.json",
      "console.error",
      "file.endsWith",
      "file.startsWith",
      "files.filter.sort.reverse",
      "fs.existsSync",
      "fs.readdirSync",
      "path.join",
      "process.cwd"
    ],
    "both": [],
    "imports": {
      "NextRequest": {
        "source": "next/server",
        "type": "npm",
        "importedName": "NextRequest",
        "localName": "NextRequest"
      },
      "NextResponse": {
        "source": "next/server",
        "type": "npm",
        "importedName": "NextResponse",
        "localName": "NextResponse"
      },
      "fs": {
        "source": "fs",
        "type": "npm",
        "importedName": "default",
        "localName": "fs"
      },
      "path": {
        "source": "path",
        "type": "npm",
        "importedName": "default",
        "localName": "path"
      }
    },
    "calledWithImports": {
      "path.join": {
        "source": "path",
        "type": "npm",
        "importedName": "default",
        "localName": "path",
        "memberOf": "path",
        "functionName": "path.join",
        "fullMemberPath": "path.join",
        "methodChain": [
          "join"
        ],
        "isChainedCall": true
      },
      "process.cwd": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "process",
        "functionName": "process.cwd",
        "fullMemberPath": "process.cwd",
        "methodChain": [
          "cwd"
        ],
        "isChainedCall": true
      },
      "fs.existsSync": {
        "source": "fs",
        "type": "npm",
        "importedName": "default",
        "localName": "fs",
        "memberOf": "fs",
        "functionName": "fs.existsSync",
        "fullMemberPath": "fs.existsSync",
        "methodChain": [
          "existsSync"
        ],
        "isChainedCall": true
      },
      "NextResponse.json": {
        "source": "next/server",
        "type": "npm",
        "importedName": "NextResponse",
        "localName": "NextResponse",
        "memberOf": "NextResponse",
        "functionName": "NextResponse.json",
        "fullMemberPath": "NextResponse.json",
        "methodChain": [
          "json"
        ],
        "isChainedCall": true
      },
      "fs.readdirSync": {
        "source": "fs",
        "type": "npm",
        "importedName": "default",
        "localName": "fs",
        "memberOf": "fs",
        "functionName": "fs.readdirSync",
        "fullMemberPath": "fs.readdirSync",
        "methodChain": [
          "readdirSync"
        ],
        "isChainedCall": true
      },
      "files.filter.sort.reverse": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "files",
        "functionName": "files.filter.sort.reverse",
        "fullMemberPath": "files.filter.sort.reverse",
        "methodChain": [
          "filter",
          "sort",
          "reverse"
        ],
        "isChainedCall": true
      },
      "file.endsWith": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "file",
        "functionName": "file.endsWith",
        "fullMemberPath": "file.endsWith",
        "methodChain": [
          "endsWith"
        ],
        "isChainedCall": true
      },
      "file.startsWith": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "file",
        "functionName": "file.startsWith",
        "fullMemberPath": "file.startsWith",
        "methodChain": [
          "startsWith"
        ],
        "isChainedCall": true
      },
      "console.error": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "console",
        "functionName": "console.error",
        "fullMemberPath": "console.error",
        "methodChain": [
          "error"
        ],
        "isChainedCall": true
      }
    },
    "destructuredFunctions": {}
  },
  "auth/forgot-password/page.tsx": {
    "defined": [
      "ForgotPasswordPage",
      "handleSubmit"
    ],
    "called": [
      "console.error",
      "e.preventDefault",
      "setEmail",
      "setLoading",
      "setSubmitted",
      "supabase.resetPasswordForEmail",
      "toast.error",
      "toast.success",
      "useState"
    ],
    "both": [],
    "imports": {
      "useState": {
        "source": "react",
        "type": "npm",
        "importedName": "useState",
        "localName": "useState"
      },
      "Button": {
        "source": "@/components/ui/button",
        "type": "alias",
        "importedName": "Button",
        "localName": "Button"
      },
      "Input": {
        "source": "@/components/ui/input",
        "type": "alias",
        "importedName": "Input",
        "localName": "Input"
      },
      "Card": {
        "source": "@/components/ui/card",
        "type": "alias",
        "importedName": "Card",
        "localName": "Card"
      },
      "CardContent": {
        "source": "@/components/ui/card",
        "type": "alias",
        "importedName": "CardContent",
        "localName": "CardContent"
      },
      "CardHeader": {
        "source": "@/components/ui/card",
        "type": "alias",
        "importedName": "CardHeader",
        "localName": "CardHeader"
      },
      "CardTitle": {
        "source": "@/components/ui/card",
        "type": "alias",
        "importedName": "CardTitle",
        "localName": "CardTitle"
      },
      "Link": {
        "source": "next/link",
        "type": "npm",
        "importedName": "default",
        "localName": "Link"
      },
      "supabase": {
        "source": "@/lib/supabaseClient",
        "type": "alias",
        "importedName": "supabase",
        "localName": "supabase"
      },
      "toast": {
        "source": "sonner",
        "type": "npm",
        "importedName": "toast",
        "localName": "toast"
      }
    },
    "calledWithImports": {
      "useState": {
        "source": "react",
        "type": "npm",
        "importedName": "useState",
        "localName": "useState"
      },
      "e.preventDefault": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "e",
        "functionName": "e.preventDefault",
        "fullMemberPath": "e.preventDefault",
        "methodChain": [
          "preventDefault"
        ],
        "isChainedCall": true
      },
      "setLoading": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setLoading"
      },
      "supabase.resetPasswordForEmail": {
        "source": "@/lib/supabaseClient",
        "type": "alias",
        "importedName": "supabase",
        "localName": "supabase",
        "memberOf": "supabase",
        "functionName": "supabase.resetPasswordForEmail",
        "fullMemberPath": "supabase.resetPasswordForEmail",
        "methodChain": [
          "resetPasswordForEmail"
        ],
        "isChainedCall": true
      },
      "setSubmitted": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setSubmitted"
      },
      "toast.success": {
        "source": "sonner",
        "type": "npm",
        "importedName": "toast",
        "localName": "toast",
        "memberOf": "toast",
        "functionName": "toast.success",
        "fullMemberPath": "toast.success",
        "methodChain": [
          "success"
        ],
        "isChainedCall": true
      },
      "toast.error": {
        "source": "sonner",
        "type": "npm",
        "importedName": "toast",
        "localName": "toast",
        "memberOf": "toast",
        "functionName": "toast.error",
        "fullMemberPath": "toast.error",
        "methodChain": [
          "error"
        ],
        "isChainedCall": true
      },
      "console.error": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "console",
        "functionName": "console.error",
        "fullMemberPath": "console.error",
        "methodChain": [
          "error"
        ],
        "isChainedCall": true
      },
      "setEmail": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setEmail"
      }
    },
    "destructuredFunctions": {
      "email": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "email"
      },
      "setEmail": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setEmail"
      },
      "loading": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "loading"
      },
      "setLoading": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setLoading"
      },
      "submitted": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "submitted"
      },
      "setSubmitted": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setSubmitted"
      }
    }
  },
  "amex/chart/page.tsx": {
    "defined": [
      "CategoryChartPage",
      "fetchTransactions"
    ],
    "called": [
      "console.error",
      "fetchTransactions",
      "setTransactions",
      "supabase.from.select.eq.eq",
      "transactions.filter",
      "useAuth",
      "useEffect",
      "useState"
    ],
    "both": [
      "fetchTransactions"
    ],
    "imports": {
      "useEffect": {
        "source": "react",
        "type": "npm",
        "importedName": "useEffect",
        "localName": "useEffect"
      },
      "useState": {
        "source": "react",
        "type": "npm",
        "importedName": "useState",
        "localName": "useState"
      },
      "supabase": {
        "source": "../../../lib/supabaseClient",
        "type": "relative",
        "importedName": "supabase",
        "localName": "supabase"
      },
      "useAuth": {
        "source": "../../../context/AuthContext",
        "type": "relative",
        "importedName": "useAuth",
        "localName": "useAuth"
      },
      "CustomBarChart": {
        "source": "@/components/ui/custombarchart",
        "type": "alias",
        "importedName": "CustomBarChart",
        "localName": "CustomBarChart"
      },
      "ProtectedRoute": {
        "source": "@/components/protected-route",
        "type": "alias",
        "importedName": "default",
        "localName": "ProtectedRoute"
      }
    },
    "calledWithImports": {
      "useAuth": {
        "source": "../../../context/AuthContext",
        "type": "relative",
        "importedName": "useAuth",
        "localName": "useAuth"
      },
      "useState": {
        "source": "react",
        "type": "npm",
        "importedName": "useState",
        "localName": "useState"
      },
      "useEffect": {
        "source": "react",
        "type": "npm",
        "importedName": "useEffect",
        "localName": "useEffect"
      },
      "supabase.from.select.eq.eq": {
        "source": "../../../lib/supabaseClient",
        "type": "relative",
        "importedName": "supabase",
        "localName": "supabase",
        "memberOf": "supabase",
        "functionName": "supabase.from.select.eq.eq",
        "fullMemberPath": "supabase.from.select.eq.eq",
        "methodChain": [
          "from",
          "select",
          "eq",
          "eq"
        ],
        "isChainedCall": true
      },
      "console.error": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "console",
        "functionName": "console.error",
        "fullMemberPath": "console.error",
        "methodChain": [
          "error"
        ],
        "isChainedCall": true
      },
      "setTransactions": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setTransactions"
      },
      "fetchTransactions": {
        "source": "local",
        "type": "local",
        "importedName": "fetchTransactions",
        "localName": "fetchTransactions"
      },
      "transactions.filter": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "transactions",
        "functionName": "transactions.filter",
        "fullMemberPath": "transactions.filter",
        "methodChain": [
          "filter"
        ],
        "isChainedCall": true
      }
    },
    "destructuredFunctions": {
      "transactions": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "transactions"
      },
      "setTransactions": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setTransactions"
      }
    }
  },
  "inter-account/overview/chart/page.tsx": {
    "defined": [
      "CategoryChartPage",
      "fetchTransactions"
    ],
    "called": [
      "console.error",
      "fetchTransactions",
      "setTransactions",
      "supabase.from.select.eq.eq",
      "useAuth",
      "useEffect",
      "useState"
    ],
    "both": [
      "fetchTransactions"
    ],
    "imports": {
      "useEffect": {
        "source": "react",
        "type": "npm",
        "importedName": "useEffect",
        "localName": "useEffect"
      },
      "useState": {
        "source": "react",
        "type": "npm",
        "importedName": "useState",
        "localName": "useState"
      },
      "supabase": {
        "source": "../../../../lib/supabaseClient",
        "type": "relative",
        "importedName": "supabase",
        "localName": "supabase"
      },
      "useAuth": {
        "source": "../../../../context/AuthContext",
        "type": "relative",
        "importedName": "useAuth",
        "localName": "useAuth"
      },
      "CustomBarChart": {
        "source": "@/components/ui/custombarchart",
        "type": "alias",
        "importedName": "CustomBarChart",
        "localName": "CustomBarChart"
      },
      "TransactionLineChart": {
        "source": "@/components/ui/bank-line-chart",
        "type": "alias",
        "importedName": "TransactionLineChart",
        "localName": "TransactionLineChart"
      },
      "ProtectedRoute": {
        "source": "@/components/protected-route",
        "type": "alias",
        "importedName": "default",
        "localName": "ProtectedRoute"
      }
    },
    "calledWithImports": {
      "useAuth": {
        "source": "../../../../context/AuthContext",
        "type": "relative",
        "importedName": "useAuth",
        "localName": "useAuth"
      },
      "useState": {
        "source": "react",
        "type": "npm",
        "importedName": "useState",
        "localName": "useState"
      },
      "useEffect": {
        "source": "react",
        "type": "npm",
        "importedName": "useEffect",
        "localName": "useEffect"
      },
      "supabase.from.select.eq.eq": {
        "source": "../../../../lib/supabaseClient",
        "type": "relative",
        "importedName": "supabase",
        "localName": "supabase",
        "memberOf": "supabase",
        "functionName": "supabase.from.select.eq.eq",
        "fullMemberPath": "supabase.from.select.eq.eq",
        "methodChain": [
          "from",
          "select",
          "eq",
          "eq"
        ],
        "isChainedCall": true
      },
      "console.error": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "console",
        "functionName": "console.error",
        "fullMemberPath": "console.error",
        "methodChain": [
          "error"
        ],
        "isChainedCall": true
      },
      "setTransactions": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setTransactions"
      },
      "fetchTransactions": {
        "source": "local",
        "type": "local",
        "importedName": "fetchTransactions",
        "localName": "fetchTransactions"
      }
    },
    "destructuredFunctions": {
      "transactions": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "transactions"
      },
      "setTransactions": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setTransactions"
      }
    }
  },
  "inter-account/category/chart/page.tsx": {
    "defined": [
      "CategoryChartPage",
      "fetchTransactions"
    ],
    "called": [
      "console.error",
      "fetchTransactions",
      "setTransactions",
      "supabase.from.select.eq.eq",
      "transactions.filter",
      "useAuth",
      "useEffect",
      "useState"
    ],
    "both": [
      "fetchTransactions"
    ],
    "imports": {
      "useEffect": {
        "source": "react",
        "type": "npm",
        "importedName": "useEffect",
        "localName": "useEffect"
      },
      "useState": {
        "source": "react",
        "type": "npm",
        "importedName": "useState",
        "localName": "useState"
      },
      "supabase": {
        "source": "../../../../lib/supabaseClient",
        "type": "relative",
        "importedName": "supabase",
        "localName": "supabase"
      },
      "useAuth": {
        "source": "../../../../context/AuthContext",
        "type": "relative",
        "importedName": "useAuth",
        "localName": "useAuth"
      },
      "CustomBarChart": {
        "source": "@/components/ui/custombarchart",
        "type": "alias",
        "importedName": "CustomBarChart",
        "localName": "CustomBarChart"
      },
      "ProtectedRoute": {
        "source": "@/components/protected-route",
        "type": "alias",
        "importedName": "default",
        "localName": "ProtectedRoute"
      }
    },
    "calledWithImports": {
      "useAuth": {
        "source": "../../../../context/AuthContext",
        "type": "relative",
        "importedName": "useAuth",
        "localName": "useAuth"
      },
      "useState": {
        "source": "react",
        "type": "npm",
        "importedName": "useState",
        "localName": "useState"
      },
      "useEffect": {
        "source": "react",
        "type": "npm",
        "importedName": "useEffect",
        "localName": "useEffect"
      },
      "supabase.from.select.eq.eq": {
        "source": "../../../../lib/supabaseClient",
        "type": "relative",
        "importedName": "supabase",
        "localName": "supabase",
        "memberOf": "supabase",
        "functionName": "supabase.from.select.eq.eq",
        "fullMemberPath": "supabase.from.select.eq.eq",
        "methodChain": [
          "from",
          "select",
          "eq",
          "eq"
        ],
        "isChainedCall": true
      },
      "console.error": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "console",
        "functionName": "console.error",
        "fullMemberPath": "console.error",
        "methodChain": [
          "error"
        ],
        "isChainedCall": true
      },
      "setTransactions": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setTransactions"
      },
      "fetchTransactions": {
        "source": "local",
        "type": "local",
        "importedName": "fetchTransactions",
        "localName": "fetchTransactions"
      },
      "transactions.filter": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "transactions",
        "functionName": "transactions.filter",
        "fullMemberPath": "transactions.filter",
        "methodChain": [
          "filter"
        ],
        "isChainedCall": true
      }
    },
    "destructuredFunctions": {
      "transactions": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "transactions"
      },
      "setTransactions": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setTransactions"
      }
    }
  },
  "handelsbanken/category/chart/page.tsx": {
    "defined": [
      "CategoryChartPage",
      "fetchTransactions"
    ],
    "called": [
      "console.error",
      "fetchTransactions",
      "setTransactions",
      "supabase.from.select.eq.eq",
      "transactions.filter",
      "useAuth",
      "useEffect",
      "useState"
    ],
    "both": [
      "fetchTransactions"
    ],
    "imports": {
      "useEffect": {
        "source": "react",
        "type": "npm",
        "importedName": "useEffect",
        "localName": "useEffect"
      },
      "useState": {
        "source": "react",
        "type": "npm",
        "importedName": "useState",
        "localName": "useState"
      },
      "supabase": {
        "source": "../../../../lib/supabaseClient",
        "type": "relative",
        "importedName": "supabase",
        "localName": "supabase"
      },
      "useAuth": {
        "source": "../../../../context/AuthContext",
        "type": "relative",
        "importedName": "useAuth",
        "localName": "useAuth"
      },
      "CustomBarChart": {
        "source": "@/components/ui/custombarchart",
        "type": "alias",
        "importedName": "CustomBarChart",
        "localName": "CustomBarChart"
      },
      "ProtectedRoute": {
        "source": "@/components/protected-route",
        "type": "alias",
        "importedName": "default",
        "localName": "ProtectedRoute"
      }
    },
    "calledWithImports": {
      "useAuth": {
        "source": "../../../../context/AuthContext",
        "type": "relative",
        "importedName": "useAuth",
        "localName": "useAuth"
      },
      "useState": {
        "source": "react",
        "type": "npm",
        "importedName": "useState",
        "localName": "useState"
      },
      "useEffect": {
        "source": "react",
        "type": "npm",
        "importedName": "useEffect",
        "localName": "useEffect"
      },
      "supabase.from.select.eq.eq": {
        "source": "../../../../lib/supabaseClient",
        "type": "relative",
        "importedName": "supabase",
        "localName": "supabase",
        "memberOf": "supabase",
        "functionName": "supabase.from.select.eq.eq",
        "fullMemberPath": "supabase.from.select.eq.eq",
        "methodChain": [
          "from",
          "select",
          "eq",
          "eq"
        ],
        "isChainedCall": true
      },
      "console.error": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "console",
        "functionName": "console.error",
        "fullMemberPath": "console.error",
        "methodChain": [
          "error"
        ],
        "isChainedCall": true
      },
      "setTransactions": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setTransactions"
      },
      "fetchTransactions": {
        "source": "local",
        "type": "local",
        "importedName": "fetchTransactions",
        "localName": "fetchTransactions"
      },
      "transactions.filter": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "transactions",
        "functionName": "transactions.filter",
        "fullMemberPath": "transactions.filter",
        "methodChain": [
          "filter"
        ],
        "isChainedCall": true
      }
    },
    "destructuredFunctions": {
      "transactions": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "transactions"
      },
      "setTransactions": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setTransactions"
      }
    }
  },
  "handelsbanken/overview/chart/page.tsx": {
    "defined": [
      "CategoryChartPage",
      "fetchTransactions"
    ],
    "called": [
      "console.error",
      "fetchTransactions",
      "setTransactions",
      "supabase.from.select.eq.eq",
      "useAuth",
      "useEffect",
      "useState"
    ],
    "both": [
      "fetchTransactions"
    ],
    "imports": {
      "useEffect": {
        "source": "react",
        "type": "npm",
        "importedName": "useEffect",
        "localName": "useEffect"
      },
      "useState": {
        "source": "react",
        "type": "npm",
        "importedName": "useState",
        "localName": "useState"
      },
      "supabase": {
        "source": "../../../../lib/supabaseClient",
        "type": "relative",
        "importedName": "supabase",
        "localName": "supabase"
      },
      "useAuth": {
        "source": "../../../../context/AuthContext",
        "type": "relative",
        "importedName": "useAuth",
        "localName": "useAuth"
      },
      "CustomBarChart": {
        "source": "@/components/ui/custombarchart",
        "type": "alias",
        "importedName": "CustomBarChart",
        "localName": "CustomBarChart"
      },
      "TransactionLineChart": {
        "source": "@/components/ui/bank-line-chart",
        "type": "alias",
        "importedName": "TransactionLineChart",
        "localName": "TransactionLineChart"
      },
      "ProtectedRoute": {
        "source": "@/components/protected-route",
        "type": "alias",
        "importedName": "default",
        "localName": "ProtectedRoute"
      }
    },
    "calledWithImports": {
      "useAuth": {
        "source": "../../../../context/AuthContext",
        "type": "relative",
        "importedName": "useAuth",
        "localName": "useAuth"
      },
      "useState": {
        "source": "react",
        "type": "npm",
        "importedName": "useState",
        "localName": "useState"
      },
      "useEffect": {
        "source": "react",
        "type": "npm",
        "importedName": "useEffect",
        "localName": "useEffect"
      },
      "supabase.from.select.eq.eq": {
        "source": "../../../../lib/supabaseClient",
        "type": "relative",
        "importedName": "supabase",
        "localName": "supabase",
        "memberOf": "supabase",
        "functionName": "supabase.from.select.eq.eq",
        "fullMemberPath": "supabase.from.select.eq.eq",
        "methodChain": [
          "from",
          "select",
          "eq",
          "eq"
        ],
        "isChainedCall": true
      },
      "console.error": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "console",
        "functionName": "console.error",
        "fullMemberPath": "console.error",
        "methodChain": [
          "error"
        ],
        "isChainedCall": true
      },
      "setTransactions": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setTransactions"
      },
      "fetchTransactions": {
        "source": "local",
        "type": "local",
        "importedName": "fetchTransactions",
        "localName": "fetchTransactions"
      }
    },
    "destructuredFunctions": {
      "transactions": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 0,
        "isHookSetter": false,
        "importedName": "useState",
        "localName": "transactions"
      },
      "setTransactions": {
        "source": "react",
        "type": "npm",
        "hookName": "useState",
        "destructuredFrom": "useState",
        "destructuredIndex": 1,
        "isHookSetter": true,
        "importedName": "useState",
        "localName": "setTransactions"
      }
    }
  },
  "api/function-reports/[filename]/route.ts": {
    "defined": [
      "GET"
    ],
    "called": [
      "JSON.parse",
      "NextResponse.json",
      "console.error",
      "filename.endsWith",
      "filename.includes",
      "fs.existsSync",
      "fs.readFileSync",
      "path.join",
      "process.cwd"
    ],
    "both": [],
    "imports": {
      "NextRequest": {
        "source": "next/server",
        "type": "npm",
        "importedName": "NextRequest",
        "localName": "NextRequest"
      },
      "NextResponse": {
        "source": "next/server",
        "type": "npm",
        "importedName": "NextResponse",
        "localName": "NextResponse"
      },
      "fs": {
        "source": "fs",
        "type": "npm",
        "importedName": "default",
        "localName": "fs"
      },
      "path": {
        "source": "path",
        "type": "npm",
        "importedName": "default",
        "localName": "path"
      }
    },
    "calledWithImports": {
      "filename.endsWith": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "filename",
        "functionName": "filename.endsWith",
        "fullMemberPath": "filename.endsWith",
        "methodChain": [
          "endsWith"
        ],
        "isChainedCall": true
      },
      "filename.includes": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "filename",
        "functionName": "filename.includes",
        "fullMemberPath": "filename.includes",
        "methodChain": [
          "includes"
        ],
        "isChainedCall": true
      },
      "NextResponse.json": {
        "source": "next/server",
        "type": "npm",
        "importedName": "NextResponse",
        "localName": "NextResponse",
        "memberOf": "NextResponse",
        "functionName": "NextResponse.json",
        "fullMemberPath": "NextResponse.json",
        "methodChain": [
          "json"
        ],
        "isChainedCall": true
      },
      "path.join": {
        "source": "path",
        "type": "npm",
        "importedName": "default",
        "localName": "path",
        "memberOf": "path",
        "functionName": "path.join",
        "fullMemberPath": "path.join",
        "methodChain": [
          "join"
        ],
        "isChainedCall": true
      },
      "process.cwd": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "process",
        "functionName": "process.cwd",
        "fullMemberPath": "process.cwd",
        "methodChain": [
          "cwd"
        ],
        "isChainedCall": true
      },
      "fs.existsSync": {
        "source": "fs",
        "type": "npm",
        "importedName": "default",
        "localName": "fs",
        "memberOf": "fs",
        "functionName": "fs.existsSync",
        "fullMemberPath": "fs.existsSync",
        "methodChain": [
          "existsSync"
        ],
        "isChainedCall": true
      },
      "fs.readFileSync": {
        "source": "fs",
        "type": "npm",
        "importedName": "default",
        "localName": "fs",
        "memberOf": "fs",
        "functionName": "fs.readFileSync",
        "fullMemberPath": "fs.readFileSync",
        "methodChain": [
          "readFileSync"
        ],
        "isChainedCall": true
      },
      "JSON.parse": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "JSON",
        "functionName": "JSON.parse",
        "fullMemberPath": "JSON.parse",
        "methodChain": [
          "parse"
        ],
        "isChainedCall": true
      },
      "console.error": {
        "source": "unknown",
        "type": "unknown",
        "memberOf": "console",
        "functionName": "console.error",
        "fullMemberPath": "console.error",
        "methodChain": [
          "error"
        ],
        "isChainedCall": true
      }
    },
    "destructuredFunctions": {}
  }
}